[
  {
    "objectID": "posts/10.PTRS_simulation_weights.html",
    "href": "posts/10.PTRS_simulation_weights.html",
    "title": "10.PTRS_simulation_weights",
    "section": "",
    "text": "Read in files\n\nweights <-  read_tsv(\"/Users/natashasanthanam/Downloads/weights.height.annot.tsv\")  \nweights <- read_tsv(\"/Users/natashasanthanam/Downloads/weights.bmi.annot.tsv\")\npred_expr <- fread(\"/Users/natashasanthanam/Box/imlab-data/data-Github/web-data/2022-06-23-improving-figure-for-rat-ptrs/rat_metabolic_Ac_best__predict.txt\") %>% select(-c(FID))\n\npred_expr <- pred_expr %>% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] <- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %>% .[[\"ensembl_gene_id\"]]"
  },
  {
    "objectID": "posts/02.Prediction_Model_Pipeline.html",
    "href": "posts/02.Prediction_Model_Pipeline.html",
    "title": "02. Prediction_Model_Pipeline",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\n\nData from here - genoGex.Rdata has everything we need in it There are 5 ‘gex’ RDS files which are the gene expressions for the 5 different tissues, the ‘gtf’ is the gene annotation, ‘phyMap’ is the snp annotation, and ‘geno’ is the genotype matrix\nOur pipeline predicts expressions from the gene expression data and genotypes of the rats from the study.\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")"
  },
  {
    "objectID": "posts/02.Prediction_Model_Pipeline.html#peer-analysis",
    "href": "posts/02.Prediction_Model_Pipeline.html#peer-analysis",
    "title": "02. Prediction_Model_Pipeline",
    "section": "PEER analysis",
    "text": "PEER analysis\nNow we are performing PEER factor analysis on each tissue, choosing 7 factors.\n\npeertool -f data/\"gexAc.csv\" -n 7 -o peer_Ac --has_header\npeertool -f data/\"gexIl.csv\" -n 7 -o peer_Il --has_header\npeertool -f data/\"gexLh.csv\" -n 7 -o peer_Lh --has_header\npeertool -f data/\"gexPl.csv\" -n 7 -o peer_Pl --has_header\npeertool -f data/\"gexVo.csv\" -n 7 -o peer_Vo --has_header\n\nLater on, we examine these 7 factors, as well as other covariates, to interpret expression variability. # Gene, snp annotation files The prediction model pipeline also requires a gene annotation file as input. The code below generates it from the gene annotations provided by Palmer lab in ‘gtf’. We also collect snp info.\n\ngtf$gene_type = sub(\".*?gene_biotype(.*?);.*\", \"\\\\1\", gtf$Attr)\ngtf$gene_name = sub(\".*?gene_name(.*?);.*\", \"\\\\1\", gtf$Attr)\ngene_annotation = subset(gtf, select = -c(Source, Feature, Score, Strand, Attr, Frame) )\ngene_annotation = gene_annotation[, c(\"Chr\",\"Gene\", \"gene_name\", \"Start\", \"End\", \"gene_type\" )]\ncolnames(gene_annotation) = c(\"chr\", \"gene_id\", \"gene_name\", \"start\", \"end\")\nrownames(gene_annotation) = gene_annotation$gene_id\n\nWe have all the information needed to generate the predictions models. We are left to reorganize it to fit the pipeline. The specifics of each step is commented at the top of each block.\n\n# Making the snp annotation in the correct format for the pipeline\nphyMap <- within(phyMap,  varID <- paste(Chr, Pos, Ref, Alt, sep=\"_\"))\nrownames(phyMap) = phyMap$varID\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", 'varID', \"rsid\")\n\n\n# Splitting the snp annotation file by chromosome\ns <- setNames(split(phyMap, phyMap$chr), paste0(\"snp_annot.chr\", unique(phyMap$chr)))\nlist2env(s, globalenv())\n\nThe new genotype file combines the provided geno file and combines information from the provided snp annotation file, phyMap.\n\n# writing the genotype file to a .txt file so that we can separate it by chromosome using our geneotype parse script.\nrownames(geno) = rownames(phyMap)\nwrite.table(geno, file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/genotype.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n\nThis python script separates the genotype file by chromosome.\n\n#Splitting the genotype file by chromosome - run this from the rat_genomic_alaysis directory\npython scripts/split_genotype_by_chr.py data/genotype.txt data/geno_by_chr/'genotype'"
  },
  {
    "objectID": "posts/04.GEMMA_LMM_analysis.html",
    "href": "posts/04.GEMMA_LMM_analysis.html",
    "title": "04.GEMMA_LMM_analysis",
    "section": "",
    "text": "Gemma uses a LMM with a kinship matrix. That would account for familial structure that PrediXcan doesnt. We’ll run Gemma with the predicted expression and metabolic phenotypes to compare the results.\nWe first run GEMMA with predicted expression for Nucleus Accumbens Core Tissue generated by PrediXcan. We’ll create GRMS first for all phenotypes"
  },
  {
    "objectID": "posts/06.PTRS_Creation.html",
    "href": "posts/06.PTRS_Creation.html",
    "title": "06.PTRS_Creation",
    "section": "",
    "text": "The orth.rats file contains gives a dictionary between human genes and the corresponding gene in rats.\n\ndata.dir <- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\"\north.rats <- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\n\nIndividual PTRS creation\nYanyu’s PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI.\n\ntraits <- c(\"height\", \"bmi\")\n\n\nbase.dir <- \"~/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/\"\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with Yanyu’s PTRS weights.\n\npred_expr <- read_tsv(base.dir %&% \"prediXcan/metabolic_traits/rat_metabolic_Ac_best__predict.txt\") %>% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr <- pred_expr %>% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] <- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %>% .[[\"ensembl_gene_id\"]]\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\nfn_weights = function(trait)\n{\n  weights <- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id <- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) <- weights$gene_id\n  weights <- weights %>% rename(gene_name = gene_id)\n  return(weights)\n}\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats.\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\ndir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\nfor(trait in traits) {\n  weights <- fn_weights(trait)\n  pred_trait <- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}\n\nCompare all values across different models to actual BMI and Height\n\npred_height <- readRDS(dir %&% \"rat_pred_height_w_Human_best_PTRS.RDS\") \npred_BMI <- readRDS(dir %&% \"rat_pred_bmi_w_Human_best_PTRS.RDS\")\n\nall_rats <- read_tsv(dir %&% \"all_names.txt\", col_names = TRUE)\n\npheno <- read_csv(dir %&% \"processed_obesity_rat_Palmer_phenotypes.csv\")\npheno <- pheno %>% filter(!(rat_rfid  %in% all_rats$ID))\n\n\nweights_bmi <- fread(\"/Users/natashasanthanam/Downloads/weights.bmi.annot.tsv\") \nweights_height <-  fread(\"/Users/natashasanthanam/Downloads/weights.height.annot.tsv\")  \n\nn_genes_bmi = as.matrix(apply(weights_bmi[,2:ncol(weights_bmi)], 2, function(x) sum(x != 0 )))\nn_genes_height = as.matrix(apply(weights_height[,2:ncol(weights_height)], 2, function(x) sum(x != 0 )))\n\n#Create Dataframes with the correlation coefficient between trait in rats and ones predicted using PTRS from Humans\nBMI with predicted BMI\n\nbmi_with_tail <- pheno %>% dplyr::select(c(rat_rfid, bmi_bodylength_w_tail)) %>% na.omit()\ntempo <- pred_BMI[na.omit(match(bmi_with_tail$rat_rfid, rownames(pred_BMI))), ]\n\nbmi_w_tail_df <- data.frame(R2 = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  fit = lm(bmi_with_tail$bmi_bodylength_w_tail ~ tempo[,i])\n  bmi_w_tail_df[i,1] <- summary(fit)$r.squared\n  bmi_w_tail_df[i,2] <- glance(fit)$p.value\n  bmi_w_tail_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  bmi_w_tail_df[i,4] <- n_genes_bmi[i,1]\n  bmi_w_tail_df[i,5] <- confint(fit)[1] \n  bmi_w_tail_df[i,6] <- confint(fit)[2]\n}\n\nbmi_w_tail_cor <- data.frame(cor = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  bmi_w_tail_cor[i,1] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$estimate\n  bmi_w_tail_cor[i,2] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$p.value\n  bmi_w_tail_cor[i,3] <- paste(\"model\", i, sep = \"_\")\n  bmi_w_tail_cor[i,4] <- n_genes_bmi[i,1]\n  bmi_w_tail_cor[i,5] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$conf.int[1]\n  bmi_w_tail_cor[i,6] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$conf.int[2]\n}\n\ntotal_bmi_df <- inner_join(bmi_w_tail_cor, bmi_w_tail_df, by = \"model\")\ntotal_bmi_df <- total_bmi_df %>% select(c(model, n_genes_in_model.x, cor, R2, pvalue.x, conf.int.min.x, conf.int.max.x ))\n\nBodylength with Predicted Height\n\n#Bodylength wit Tail vs predicted Height from Human PTRS weights\nbodylength_w_tail <- pheno %>% dplyr::select(c(rat_rfid, bodylength_w_tail)) %>% na.omit()\ntempo <- pred_height[na.omit(match(bodylength_w_tail$rat_rfid, rownames(pred_height))), ]\n\nbodylength_w_tail_df <- data.frame(R2 = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  fit = lm(bodylength_w_tail$bodylength_w_tail ~ tempo[,i])\n  bodylength_w_tail_df[i,1] <- summary(fit)$r.squared\n  bodylength_w_tail_df[i,2] <- glance(fit)$p.value\n  bodylength_w_tail_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  bodylength_w_tail_df[i,4]<- n_genes_height[i,1]\n  bodylength_w_tail_df[i,5] <- confint(fit)[1] \n  bodylength_w_tail_df[i,6] <- confint(fit)[2] \n}\n\nbodylength_w_tail_cor <- data.frame(cor = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  bodylength_w_tail_cor[i,1] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$estimate\n  bodylength_w_tail_cor[i,2] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$p.value\n  bodylength_w_tail_cor[i,3] <- paste(\"model\", i, sep = \"_\")\n  bodylength_w_tail_cor[i,4]<- n_genes_height[i,1]\n  bodylength_w_tail_cor[i,5] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$conf.int[1]\n  bodylength_w_tail_cor[i,6] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$conf.int[2]\n}\n\nbodylength_w_tail_cor <- bodylength_w_tail_cor %>% filter(n_genes_in_model != 0)\n\ntotal_height_df <- inner_join(bodylength_w_tail_cor, bodylength_w_tail_df, by = \"model\")\ntotal_height_df <- total_height_df %>% select(c(model, n_genes_in_model.x, cor, R2, pvalue.x, conf.int.min.x, conf.int.max.x ))\n\n\n\nPlot Results\n\nggplot(bodylength_w_tail_cor, aes(n_genes_in_model, cor)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + ylim(c(0,0.1)) + geom_point(position=\"jitter\") +geom_line() + xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\n\nggplot(bmi_w_tail_cor, aes(n_genes_in_model, cor)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + ylim(c(0 ,0.1)) + geom_point(position=\"jitter\") +geom_line() +  xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\nViolin plot\n\nptrs_hum <- read_excel(\"/Users/natashasanthanam/Downloads/13059_2021_2591_MOESM5_ESM.xlsx\")\nptrs_hum <- ptrs_hum[7:nrow(ptrs_hum),]\ncolnames(ptrs_hum) = c(\"trait\", \"population\", \"PTRS_MESA_EUR\", \"PTRS_MESA_AFR\", \"PTRS_MESA_ALL\")\n\nptrs_hum_height <- ptrs_hum %>% filter(trait == \"height\")\nptrs_hum_height <- ptrs_hum_height %>% pivot_longer(c(\"PTRS_MESA_EUR\", \"PTRS_MESA_AFR\", \"PTRS_MESA_ALL\"), names_to = \"PTRS\") %>% select(-c(trait))\n\n\nggplot(bodylength_w_tail_cor, aes(x=n_genes_in_model, y=cor)) + \n  geom_violin()\n\nggplot(bmi_w_tail_cor, aes(x=n_genes_in_model, y=cor)) + \n  geom_violin()\n\n\n\nCreate and Plot Negative Control\n\nfasting_glucose <- pheno %>% dplyr::select(c(rat_rfid, fasting_glucose)) %>% na.omit()\ntempo <- pred_height[na.omit(match(fasting_glucose$rat_rfid, rownames(pred_height))), ]\n\nneg_control_df <- data.frame(estimate = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\n\nfor(i in 1:ncol(tempo)){\n  neg_control_df[i,1] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$estimate\n  neg_control_df[i,2] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$p.value\n  neg_control_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  neg_control_df[i,4]<- n_genes_height[i,1]\n  neg_control_df[i,5] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$conf.int[1]\n  neg_control_df[i,6] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$conf.int[2]\n}\n\nggplot(neg_control_df, aes(n_genes_in_model, estimate)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + geom_point(position=\"jitter\") +geom_line() +  xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\n\n\nTest PTRS top genes for Enrichment\n\ntop_ptrs_genes <- weights_height %>% select(c(gene_name, model_5)) %>% filter(model_5 != 0) %>% select(c(gene_name))\ntop_ptrs_genes$gene_name = sapply(strsplit(top_ptrs_genes$gene_name , \"\\\\.\"), `[`, 1)\n\ntop_ptrs_genes <- top_ptrs_genes %>% mutate(rat_gene = orth.rats[match(top_ptrs_genes$gene_name, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n\nfull_df <- read_tsv(\"/Users/natashasanthanam/Github/rat-genomic-analysis/data/rat_metabolic_traits_best_Ac_full_assocs.txt\", col_names = TRUE)\npheno_Multi_rat <- read_tsv(\"/Users/natashasanthanam/Downloads/rat_metabolic_MultiXcan_pval_assoc.txt\", col_names = TRUE)\n\n\nqqunif(full_df$pvalue, col= \"dodgerblue4\" )\nqqpoints(full_df %>% filter(gene %in% top_ptrs_genes$rat_gene) %>% .[[\"pvalue\"]],pch='+', col = \"dodgerblue\") \n\nqqunif(pheno_Multi_rat$pvalue.bodylength_w_tail, col= \"dodgerblue4\" )\nqqpoints(pheno_Multi_rat %>% filter(gene %in% top_ptrs_genes$rat_gene) %>% .[[\"pvalue.bodylength_w_tail\"]],pch='+', col = \"dodgerblue\") \n\n\nall_ptrs_genes <- weights_height %>%  filter(!(gene_name %in% top_ptrs_genes$gene_name)) %>% select(c(gene_name))\nall_ptrs_genes <-  all_ptrs_genes %>% mutate(rat_gene = orth.rats[match(all_ptrs_genes$gene_name, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n\nqqunif(full_df %>% filter(gene %in% all_ptrs_genes$rat_gene) %>% .[[\"pvalue\"]])\nqqpoints(full_df %>% filter(gene %in% top_ptrs_genes$rat_gene) %>% .[[\"pvalue\"]],pch='+', col = \"dodgerblue\") \n\n\nfull_df <- full_df %>% mutate(human_gene = orth.rats[match(full_df$gene, orth.rats$rnorvegicus_homolog_ensembl_gene), 1]$ensembl_gene_id)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/03.PrediXcan.html",
    "href": "posts/03.PrediXcan.html",
    "title": "03.PrediXcan_MultiXcan",
    "section": "",
    "text": "library(tidyverse)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(qqman)\nlibrary(ggrepel)\nlibrary(devtools)\ndevtools::source_gist(\"0ddc9c0ea03245bb30efbe3e899897be\")\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nargs = commandArgs(trailingOnly=TRUE)\ngeno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/rat_genotypes_LD_pruned_0.95/\""
  },
  {
    "objectID": "posts/03.PrediXcan.html#run-predixcan-with-metabolic-phenotype-data",
    "href": "posts/03.PrediXcan.html#run-predixcan-with-metabolic-phenotype-data",
    "title": "03.PrediXcan_MultiXcan",
    "section": "Run PrediXcan with Metabolic Phenotype Data",
    "text": "Run PrediXcan with Metabolic Phenotype Data"
  },
  {
    "objectID": "posts/03.PrediXcan.html#run-multixcan",
    "href": "posts/03.PrediXcan.html#run-multixcan",
    "title": "03.PrediXcan_MultiXcan",
    "section": "Run MultiXcan",
    "text": "Run MultiXcan"
  },
  {
    "objectID": "posts/convert_genotypes_old.html",
    "href": "posts/convert_genotypes_old.html",
    "title": "convert_genotypes_old",
    "section": "",
    "text": "Note: This is old script to convert Palmer lab genotype data in an .Rdata object to plink format. For our analysis, we used a different process to reformat, documented here\nData from here - genoGex.Rdata has everything we need in it There are 5 ‘gex’ RDS files which are the gene expressions for the 5 different tissues, the ‘gtf’ is the gene annotation, ‘phyMap’ is the snp annotation, and ‘geno’ is the genotype matrix\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndate = Sys.Date()\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/\"\n\nWe loaded several data tables into memory. geno contains genotype data, with columns of rat IDs and each row containing dosage for a single snp. These snps are listed in phyMap, with their chromosome, position, reference, and alternative alleles. In this next step, we subset genotype data to the rats with gene expression data for each tissue.\n\n# We take all except the first column of geno, which is NA (because geno is a matrix). The the result is a list of all individual ids\ngeno_Ac = geno[,match(colnames(gexAc), colnames(geno))[-1]]\ngeno_Il = geno[,match(colnames(gexIl), colnames(geno))[-1]]\ngeno_Lh = geno[,match(colnames(gexLh), colnames(geno))[-1]]\ngeno_Pl = geno[,match(colnames(gexPl), colnames(geno))[-1]]\ngeno_Vo = geno[,match(colnames(gexVo), colnames(geno))[-1]]\n\nAdding information from the snp annotation file phyMap, we generate a genotype file for each tissue.\n\nAc_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Ac), phyMap$refAllele, phyMap$effectAllele, geno_Ac)\nIl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Il),phyMap$refAllele, phyMap$effectAllele,  geno_Il)\nLh_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Lh),phyMap$refAllele, phyMap$effectAllele,  geno_Lh)\nPl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Pl),phyMap$refAllele, phyMap$effectAllele,  geno_Pl)\nVo_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Vo),phyMap$refAllele, phyMap$effectAllele,  geno_Vo)\n\n\nwrite.table(Ac_bimbam, file = wd %&% \"Ac_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Il_bimbam, file = wd %&% \"Il_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Lh_bimbam, file = wd %&% \"Lh_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Pl_bimbam, file = wd %&%\"Pl_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Vo_bimbam, file = wd %&%\"Vo_bimbam\",quote=F,col.names=F,row.names=F)\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rat_Predictability_comp_Humans.html",
    "href": "posts/Rat_Predictability_comp_Humans.html",
    "title": "Rat_Predictability_comp_Humans",
    "section": "",
    "text": "#Figure comparing pred R2 vs obs R2 in Ac tissue in Rats\nFirst find well expressed genes in Rats\n\nfila <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/models//Ac_output_db.db\"\nsqlite.driver <- dbDriver(\"SQLite\")\nconn <- dbConnect(RSQLite::SQLite(), fila)\ntempo <- dbGetQuery(conn, 'select * from extra')\n\ntempo <- tempo[order(-tempo$R2),]    \n\nFind Predicted Expression with separate Rat Genotypes\n\nconda activate imlabtools \nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files\nexport MODEL=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/models\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/Ac_output_db.db  \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/BLA_NAcc2_PL2.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}\" \\\n--prediction_output Ac_NAcc2__predict.txt  \\\n--prediction_summary_output Ac_NAcc2__summary.txt \\\n--verbosity 9 \\\n--throw\n\nMgmt\n\npred_expr <- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/Ac_NAcc2__predict.txt\")\nobs_expr <- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/NAcc2.expr.iqn.bed.gz\")\n\nobs_expr <- obs_expr %>% select(-c(`#chr`, start, end)) %>% pivot_longer(!gene_id, names_to = \"FID\", values_to = \"count\") %>% pivot_wider(names_from = gene_id, values_from = count)\n\nMgmt_pred <- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000016038\")])\nMgmt_obs <- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000016038\")]) \nMgmt_pred$FID = as.character(Mgmt_pred$FID)\n\nMgmt_pred <- Mgmt_pred[match(Mgmt_obs$FID, Mgmt_pred$FID),]\nMgmt_obs <- Mgmt_obs[match(Mgmt_pred$FID, Mgmt_obs$FID ), ]\n\nMgmt_pred$FID = as.character(Mgmt_pred$FID)\nMgmt <- inner_join(Mgmt_pred, Mgmt_obs, by = \"FID\")\n\nPolr3k\n\nPolr3k_pred <- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000017843\")])\nPolr3k_obs <- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000017843\")]) \nPolr3k_pred$FID = as.character(Polr3k_pred$FID)\n\nPolr3k_pred <- Polr3k_pred[match(Polr3k_obs$FID, Polr3k_pred$FID),]\nPolr3k_obs <- Polr3k_obs[match(Polr3k_pred$FID, Polr3k_obs$FID ), ]\n\nPolr3k_pred$FID = as.character(Polr3k_pred$FID)\nPolr3k <- inner_join(Polr3k_pred, Polr3k_obs, by = \"FID\")\n\nDhfr\n\nDhfr_pred <- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000013521\")])\nDhfr_obs <- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000013521\")]) \nDhfr_pred$FID = as.character(Dhfr_pred$FID)\n\nDhfr_pred <- Dhfr_pred[match(Dhfr_obs$FID, Dhfr_pred$FID),]\nDhfr_obs <- Dhfr_obs[match(Dhfr_pred$FID, Dhfr_obs$FID ), ]\n\nDhfr_pred$FID = as.character(Dhfr_pred$FID)\nDhfr <- inner_join(Dhfr_pred, Dhfr_obs, by = \"FID\")\n\nPlot pred vs obs expression with our models in NcAcc2 tissue\n\nMgmt <- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Mgmt.txt\")\nPolr3k <- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Polr3k.txt\")\nDhfr <- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Dhfr.txt\")\n\ng1 <- ggplot(Mgmt, aes(pred, obs)) + geom_point() + annotate(\"text\", x = 0.4, y = 2.5, label = \"Mgmt\", size = 10, fontface =\"bold.italic\") + annotate(\"text\", x = 0.53, y = 2, label = \"R2 =  0.724\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")\n\ng2 <- ggplot(Polr3k, aes(pred, obs)) + geom_smooth(size = 1) + geom_point() + ggtitle(\"Polr3k\") + annotate(\"text\", x = -1.8, y = 2, label = \"r2 =  0.796\", size = 3)  + theme(aspect.ratio=1)\n\ng3 <- ggplot(Dhfr, aes(pred, obs))  + geom_point() + annotate(\"text\", x = -0.4, y = 2.5, label = \"Dhfr\", size = 10, fontface =2) + annotate(\"text\", x = -0.25, y = 2, label = \"r2 =  0.554\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\") + coord_cartesian(xlim = c(NA, 1.25)) \n\nCalculate Predicted vs Observed Expression for Mgmt in Humans using GTEx NA predictDB with Geuvadis genotypes (hg38) as well\n\nconda activate imlabtools \nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/Data/1000G/vcf_hg38/geuvadis\nexport MODEL=/gpfs/data/im-lab/nas40t2/Data/PredictDB/GTEx_v8/models_v1/eqtl/elastic_net_models\nexport DATA=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/predixcan\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/en_Brain_Nucleus_accumbens_basal_ganglia.db  \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/ALL.chr*.shapeit2_integrated_v1a.GRCh38.20181129.phased.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}_b38\" \\\n--prediction_output 1000G_NAcc2__predict.txt  \\\n--prediction_summary_output 1000G_NAcc2__summary.txt  \\\n--verbosity 9 \\\n--throw\n\nRPS26 r2= 0.7352744\n\npred_expr <- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/1000G_NAcc2__predict.txt\")\nobs_expr <- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz\")\n\nobs_expr <- obs_expr %>% select(-c(Chr, Gene_Symbol, Coord)) %>% pivot_longer(!TargetID, names_to = \"FID\", values_to = \"count\") %>% pivot_wider(names_from = TargetID, values_from = count)\ncolnames(obs_expr)[2:ncol(obs_expr)] = sapply(strsplit(colnames(obs_expr)[2:ncol(obs_expr)], \"\\\\.\"), `[`, 1)\n\nRPS26_pred <- as.data.frame(pred_expr[, c(\"FID\", \"ENSG00000197728.9\")])\nRPS26_obs <- as.data.frame(obs_expr[,  c(\"FID\", \"ENSG00000197728\")]) \n\nRPS26_pred <- RPS26_pred[match(RPS26_obs$FID, RPS26_pred$FID),]\nRPS26_obs <- RPS26_obs[match(RPS26_pred$FID, RPS26_obs$FID ), ]\n\n\nRPS26 <- inner_join(RPS26_pred, RPS26_obs, by = \"FID\")\ncolnames(RPS26) = c(\"FID\", \"pred\", \"obs\")\n\nRPS26_GTEx <- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_RPS26.txt\", col_names = TRUE)\nDHFR_GTEx <- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_DHFR_results.txt\", col_names = TRUE)\n\n\ng4 <- ggplot(DHFR_GTEx, aes(pred, obs)) + geom_point() + annotate(\"text\", x = -0.45, y = 55, label = \"DHFR\", size = 10, fontface =2) + annotate(\"text\", x = -0.4, y = 51, label = \"r2 =  0.506\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")\n\ng5 <- ggplot(RPS26_GTEx, aes(pred, obs)) + geom_point() + annotate(\"text\", x = -0.5, y = 385, label = \"RPS26\", size = 10, fontface =\"bold.italic\") + annotate(\"text\", x = -0.45, y = 355, label = \"R2 =  0.735\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")"
  },
  {
    "objectID": "posts/05.PhenomeXcan_MutliXcan.html",
    "href": "posts/05.PhenomeXcan_MutliXcan.html",
    "title": "PhenomeXcan Query",
    "section": "",
    "text": "suppressPackageStartupMessages(source(data.dir %&% \"helpers.R\", chdir = TRUE))\nphenomexcan_con <- get_db()\ndbListTables(phenomexcan_con)"
  },
  {
    "objectID": "posts/05.PhenomeXcan_MutliXcan.html#query-phenomexcan-association-with-top-phenotypes-for-list-of-genes",
    "href": "posts/05.PhenomeXcan_MutliXcan.html#query-phenomexcan-association-with-top-phenotypes-for-list-of-genes",
    "title": "PhenomeXcan Query",
    "section": "query PhenomeXcan association with top phenotypes for list of genes",
    "text": "query PhenomeXcan association with top phenotypes for list of genes\n\ninput = list()\ninput$pheno = c(\"Obesity\")\ninput$limit = 30000\nobesity_genes <-  suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Body fat percentage\")\ninput$limit = 30000\nbody_fat_genes <- suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Body mass index (BMI) (21001_raw)\")\ninput$limit = 30000\nBMI_genes <- suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Fasting Glucose\")\ninput$limit = 30000\nglucose_genes <- suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Height\")\ninput$limit = 30000\nheight_genes <- suppressMessages(get_results_from_data_db(input))\n\nGenerate a table of all human MultiXcan results\n\n#matrix - humans (rows are genes and columns are traits (fat, BMI, Obesity))\nlistphenos <- list(BMI_genes, body_fat_genes, obesity_genes, glucose_genes, height_genes)\npheno_Multi_humans <- data_frame(gene_name = as.character())\n\nfor(l in listphenos) {\n  trait <- l$phenotype[1]\n  tempo <- l %>% dplyr::select(c(gene_name, pvalue))\n  colnames(tempo)[2] = paste(\"pvalue\", trait, sep=\"_\")\n  pheno_Multi_humans <- full_join(pheno_Multi_humans, tempo, by = \"gene_name\")\n}\n\n\nhuman_genes <- as.data.frame(pheno_Multi_humans$gene_name)\n\n#pheno_humans <- as.matrix(pheno_humans %>% dplyr::select(-c(gene_name)))\n\n\nhuman = useEnsembl(biomart='ensembl', dataset=\"hsapiens_gene_ensembl\", mirror = \"uswest\")\n#human = useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\", mirror = \"uswest\")\nattributes <- listAttributes(human)\n\nattributes = c(\"ensembl_gene_id\", \"external_gene_name\", \"rnorvegicus_homolog_ensembl_gene\", \"rnorvegicus_homolog_associated_gene_name\")\north.rats = getBM(attributes, filters=\"with_rnorvegicus_homolog\",values=TRUE, mart = human, uniqueRows=TRUE)\n\nhuman_genes <- human_genes %>% dplyr::rename(external_gene_name = `pheno_Multi_humans$gene_name`)\nhuman_genes <- inner_join(human_genes, orth.rats, by = \"external_gene_name\") %>% dplyr::select(c(external_gene_name, rnorvegicus_homolog_associated_gene_name))\n\nGenerate a table of all rat MultiXcan results\n\nfilelist <- list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/MultiXcan/results\", pattern = \"assoc.txt\",full.names = TRUE)\n\npheno_Multi_rat<- data_frame(gene = as.character())\nfor(fila in filelist) {\n  trait <- substr(fila, 66, str_length(fila)-18)\n  tempo <- fread(fila) %>% select(c(gene, pvalue))\n  colnames(tempo)[2] = paste(\"pvalue\", trait, sep=\".\")\n  pheno_Multi_rat<- full_join(pheno_Multi_rat, tempo, by = \"gene\")\n}\n\n#pheno_Multi_rat <- read_tsv(\"/Users/natashasanthanam/Downloads/rat_metabolic_MultiXcan_pval_assoc.txt\", col_names = TRUE)\n\npheno_Multi_rat <- pheno_Multi_rat %>% mutate(gene_name = orth.rats[match(pheno_Multi_rat$gene, orth.rats$rnorvegicus_homolog_ensembl_gene),2]$external_gene_name)"
  },
  {
    "objectID": "posts/Coregualtion_across_Tissues_Species.html",
    "href": "posts/Coregualtion_across_Tissues_Species.html",
    "title": "Coregulation_across_Tissues_Species",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(Hmisc)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/\"\nset.seed(777)\n\n\nCorrelation between genes within each tissue and then calculate correlation of the correlation between genes across tissues\n\n\nfilelist <- list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/metabolic_traits\", pattern = \"predict.txt\", full.names = TRUE)\north.rats <- read_tsv(dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\nGenerate Correlation Matrices for 100 rats - compare predicted Expression across tissues\n\nnames <- read_tsv(filelist[1]) %>% select(c(FID))\n\nfor(i in 1:100) {\n  id = sample(names$FID, size = 1)\n  tempo <- data.frame(gene = as.character())\n  for(fila in filelist) {\n    name <- substr(fila, 89,90)\n    tis <- fread(fila) %>% filter(FID == id) %>% pivot_longer(!c(FID, IID), names_to = \"gene\", values_to = name) %>% select(-c(FID, IID))\n    tempo <- full_join(tempo, tis,  by = \"gene\")\n  } \n  tempo <- tempo %>% mutate(var = apply(tempo[,-1], 1, var)) %>% na.omit()\n  saveRDS(tempo, dir %&% \"prediXcan/GREx_comp/cor_tis_per_ind/\" %&% id %&% \".GREx.mat.RDS\")\n}\n\nCheck heatmap of some individuals\n\ni1 <- readRDS(\"/Users/natashasanthanam/Downloads/00077E6712.cor.mat.RDS\")\ni2 <- readRDS(\"/Users/natashasanthanam/Downloads/00077E7788.cor.mat.RDS\")\n\nmelted_i1 <- melt(i1, na.rm = TRUE)\nmelted_i2 <- melt(i2, na.rm = TRUE)\n\np1= ggplot(data = melted_i1, aes(x=Var1, y=Var2, fill=value)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(),) + ggtitle(\"00077E6712\") + theme(aspect.ratio = 1)\np2= ggplot(data = melted_i2, aes(x=Var1, y=Var2, fill=value)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(),) + ggtitle(\"00077E7788\") + theme(aspect.ratio = 1)\n\nggarrange(p1, p2, ncol=2)\n\nLook at all genes across tissues in one individual Evidence of shared regulation across tissues\n\ni3 = readRDS(\"/Users/natashasanthanam/Downloads/00077E83E3.GREx.mat.RDS\") %>% dplyr::select(-c(gene, var))\npairs(i3)\n\n\nCo-regulation Shared Across Species\n\n\ngene_ids <- data.frame(id = fread(filelist[1]) %>% select(-c(FID, IID)) %>%  colnames()\nfor(fila in filelist[2:length(filelist)]) {\n  df <- data.frame(id = fread(fila) %>% select(-c(FID, IID)) %>%  colnames())\n  gene_ids <- inner_join(gene_ids, df, by = \"id\")\n}\n\n\ngtf <- fread(dir %&% \"Box_files/gtf.txt\", header = TRUE)\ngtf <-  gtf[match(tempo$id, gtf$Gene),]\n \nfor(i in 1:20) {\n  tempo <- gtf %>% filter(Chr == i) %>% select(c(Gene))\n  if(nrow(tempo) == 0 ) {\n  i = i+1  \n  }\n  else {\n  df <- data.frame(row = as.character(), column = as.character())\n  for(fila in filelist) {\n    tis <- substr(fila, 58,59)\n    expr <- as.data.frame(fread(fila) %>% select(-c(FID, IID)))\n    expr <- expr[,intersect(tempo$Gene, colnames(expr))]\n    res2<-rcorr(as.matrix(expr[,]))\n  d2 <- flattenCorrMatrix(res2$r, res2$P)\n    colnames(d2)[3] = tis\n    colnames(d2)[4] = paste(\"p\", tis, sep = \"_\")\n    df <- full_join(df, d2, by = c(\"row\", \"column\"))\n  }\n  saveRDS(df, dir %&% \"prediXcan/GREx_comp/cor_genes_per_chr/chr\" %&% i %&% \".RDS\" )\n  }\n}\n\nSave correlation of coregulation across tissues\n\ncoreg.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/cor_genes_per_chr\"\nfilelist <- list.files(coreg.dir, pattern = \".RDS\", full.names = TRUE)\n\nfor(fila in filelist) {\n  tempo <- readRDS(fila) %>% select(c(row, column, Ac, Il, Pl, Lh, Vo)) %>%\n  i <- substr(fila, 89, str_length(fila)- 4)\n  cor.mat <-  cor(tempo[,3:7])\n  saveRDS(cor.mat, dir %&% \"prediXcan/GREx_comp/cor_genes_per_chr/cor_coreg_chr\" %&% i %&% \".RDS\")\n}\n\nGraph of Correlation of Coregulation across tissues\n\ndata.dir <- \"/Users/natashasanthanam/CRI/\"\nfilelist <- list.files(data.dir, pattern=\"cor_coreg\", full.names = TRUE)\ncorr_coreg <- list()\n\nfor(fila in filelist) {\n  i <- match(fila, filelist)\n  corr_coreg[[i]] <- readRDS(fila)\n}\n\nGenerate Coregulation in Humans (GTEx)\nFirst generate predicted expression in Framingham using GTEx models\n\nconda activate imlabtools\nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/Data/dbGaP/Transcriptome/Framingham/imputed_hrc1.1\nexport MODEL=/gpfs/data/im-lab/nas40t2/Data/PredictDB/GTEx_v8/models_v1/eqtl/ctimp\nexport RESULTS=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/PTRS_weights/PGP\nexport DATA=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/predixcan\n\nprintf \"Predict expression\\n\\n\"\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/ctimp_$TISSUE.db \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/chr*.dose.vcf.gz  \\\n--vcf_mode genotyped \\\n--liftover $DATA/hg19ToHg38.over.chain.gz  \\\n--on_the_fly_mapping METADATA \"chr{}_{}_{}_{}_b38\" \\\n--prediction_output $RESULTS/Framingham__$TISSUE.predict.txt \\\n--prediction_summary_output $RESULTS/Framingham__$TISSUE.summary.txt \\\n--verbosity 9 \\\n--throw\n\nTISSUE=Brain_Cerebellum\n\n\nflattenCorrMatrix <- function(cormat, pmat) {\n  ut <- upper.tri(cormat)\n  data.frame(\n    row = rownames(cormat)[row(cormat)[ut]],\n    column = rownames(cormat)[col(cormat)[ut]],\n    cor  =(cormat)[ut],\n    p = pmat[ut]\n    )\n}\n\nCalculate Coregulation between genes in GTEx\n\ngtf <- fread(\"/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/annotations_gencode_v26.tsv\", header = TRUE)\n\n for(i in 1:20) {\n  tempo <- gtf %>% filter(chromosome == paste(\"chr\", i, sep=\"\")) %>% select(c(gene_id))\n  expr <- as.data.frame( fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/Framingham_less_mem__Brain_Cerebellum.predict.txt\")) %>% select(-c(FID, IID)) \n colnames(expr) = sapply(strsplit(colnames(expr), \"\\\\.\"), `[`, 1)\n    expr <- expr[, intersect(tempo$gene_id, colnames(expr))]\n   res2<-rcorr(as.matrix(expr[,]))\n  d2 <- flattenCorrMatrix(res2$r, res2$P)\nsaveRDS(d2, dir %&% \"prediXcan/GREx_comp/cor_GTEx_genes_per_chr/GTEx_chr\" %&% i %&% \".RDS\" )\n }\n\n#Can also calculate correlation between genes in GTEx for all genes\nexpr <- as.data.frame( fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/Framingham_less_mem__Brain_Cerebellum.predict.txt\")) %>% select(-c(FID, IID)) \n colnames(expr) = sapply(strsplit(colnames(expr), \"\\\\.\"), `[`, 1)\n res2<-rcorr(as.matrix(expr[,]))\n  d2 <- flattenCorrMatrix(res2$r, res2$P)\n\nCheck if Coregualtion is preserved across species\nPlot Coregulation across species\n\np.dir <- \"/Users/natashasanthanam/CRI/\"\nfilelist <- list.files(p.dir, pattern = \"all\", full.names = TRUE)\n\nfor(fila in filelist) {\n  df <- readRDS(fila)\n  pairs(df)\n}\n\nHeatmap ordered with TSS\n\nonly_GTEx <- readRDS(\"/Users/natashasanthanam/Downloads/cor_pred_expr_GTEx_all_genes.RDS\") %>% select(-c(p)) %>% mutate(start = gtf[match(only_GTEx$row, gtf$gene_id), 5]$start) %>% distinct(row, column, .keep_all = TRUE)\n\nGTEx_ordered <- only_GTEx[sort(only_GTEx$start),]\n\nGTEx_chr2_genes <- only_GTEx[na.omit(match(gtf$gene_id, only_GTEx$row)), ]\n\np3= ggplot(data = GTEx_ordered, aes(x=row, y=column, fill=cor)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(), axis.text = element_text(size = 2)) + ggtitle(\"Heatmap for predicted expression in GTEx Cerebellum\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rat_QC_Merging.html",
    "href": "posts/Rat_QC_Merging.html",
    "title": "Rat QC and Comparison Check",
    "section": "",
    "text": "Apurva sent bimbam files that I converted to map/ped and then bim/bed/fam files using my own pipeline. Pipeline is in rat_compare_genotypes_metabolic.Rmd file."
  },
  {
    "objectID": "posts/01.Heritability_Sparsity_SM.html",
    "href": "posts/01.Heritability_Sparsity_SM.html",
    "title": "01.Heritability_Sparsity Sabrina",
    "section": "",
    "text": "ge.dir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\n\n\n\n\nFor each gene, we calculate heritability from its local GRM. Start with creating list of genes for each of the gene expression file:\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\nensidlist <- gexAc$EnsemblGeneID\nensidlist_Il <- gexIl$EnsemblGeneID\nensidlist_Lh <- gexLh$EnsemblGeneID\nensidlist_Pl <- gexPl$EnsemblGeneID\nensidlist_Vo <- gexVo$EnsemblGeneID\n\n\n# Read in bim files for each tissue\nbimfile <- ge.dir %&% \"rat_genome_Ac.bim\" ###get SNP position information###\nbimfile_Lh <- ge.dir %&% \"rat_genome_Lh.bim\"\nbimfile_Il <- ge.dir %&% \"rat_genome_Il.bim\"\nbimfile_Pl <- ge.dir %&% \"rat_genome_Pl.bim\"\nbimfile_Vo <- ge.dir %&% \"rat_genome_Vo.bim\"\n\nbim <- read.table(bimfile)\nbim_Lh <- read.table(bimfile_Lh)\nbim_Il <- read.table(bimfile_Il)\nbim_Pl <- read.table(bimfile_Pl)\nbim_Vo <- read.table(bimfile_Vo)\n\nrownames(bim) <- bim$V2\nrownames(bim_Lh) <- bim_Lh$V2\nrownames(bim_Il) <- bim_Il$V2\nrownames(bim_Pl) <- bim_Pl$V2\nrownames(bim_Vo) <- bim_Vo$V2\n\nWe run gcta Ac plink files and gene annotation to generate local GRMs, then h2 calculations.\n\ngt.dir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Ac/\"\npheno.dir <- gt.dir %&% \"phenotype_files/\"\ngrm.dir <- gt.dir %&% \"GRMs/\"\nh2.dir <- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene <- ensidlist[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <-geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bim,bim[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,4]>=start & chrsnps[,4]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Ac.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm <- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Ac --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Ac.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist)){\n    cat(i,\"of\",length(ensidlist),\"\\n\")\n    ensid <- ensidlist[i]\n    gene <- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr <- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals <- colnames(gexAc)[c(-1)]\n  expression <- as.character(gexAc[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp <- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC <- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nRepeat for Il:\n\ngt.dir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Il/\"\npheno.dir <- gt.dir %&% \"phenotype_files/\"\ngrm.dir <- gt.dir %&% \"GRMs/\"\nh2.dir <- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"/\",length(ensidlist_Il),\"\\n\")\n    gene <- ensidlist_Il[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <-geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bim_Il,bim_Il[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,4]>=start & chrsnps[,4]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Il.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm <- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Il --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Il.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"of\",length(ensidlist_Il),\"\\n\")\n    ensid <- ensidlist_Il[i]\n    gene <- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr <- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals <- colnames(gexIl)[c(-1)]\n  expression <- as.character(gexIl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp <- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC <- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nLh:\n\ngt.dir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Lh/\"\npheno.dir <- gt.dir %&% \"phenotype_files/\"\ngrm.dir <- gt.dir %&% \"GRMs/\"\nh2.dir <- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"/\",length(ensidlist_Lh),\"\\n\")\n    gene <- ensidlist_Lh[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <-geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bim_Lh,bim_Lh[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,4]>=start & chrsnps[,4]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Lh.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm <- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Lh --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Lh.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"of\",length(ensidlist_Lh),\"\\n\")\n    ensid <- ensidlist_Lh[i]\n    gene <- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr <- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals <- colnames(gexLh)[c(-1)]\n  expression <- as.character(gexLh[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp <- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC <- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nPl:\n\ngt.dir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Pl/\"\npheno.dir <- gt.dir %&% \"phenotype_files/\"\ngrm.dir <- gt.dir %&% \"GRMs/\"\nh2.dir <- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"/\",length(ensidlist_Pl),\"\\n\")\n    gene <- ensidlist_Pl[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <-geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bim_Pl,bim_Pl[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,4]>=start & chrsnps[,4]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Pl.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm <- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Pl --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Pl.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"of\",length(ensidlist_Pl),\"\\n\")\n    ensid <- ensidlist_Pl[i]\n    gene <- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr <- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals <- colnames(gexPl)[c(-1)]\n  expression <- as.character(gexPl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp <- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC <- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nVo\n\ngt.dir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Vo/\"\npheno.dir <- gt.dir %&% \"phenotype_files/\"\ngrm.dir <- gt.dir %&% \"GRMs/\"\nh2.dir <- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"/\",length(ensidlist_Vo),\"\\n\")\n    gene <- ensidlist_Vo[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <-geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bim_Vo,bim_Vo[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,4]>=start & chrsnps[,4]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Vo.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm <- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Vo --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Vo.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"of\",length(ensidlist_Vo),\"\\n\")\n    ensid <- ensidlist_Vo[i]\n    gene <- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr <- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals <- colnames(gexVo)[c(-1)]\n  expression <- as.character(gexVo[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp <- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC <- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}"
  },
  {
    "objectID": "posts/07.SPTRS_Creation.html",
    "href": "posts/07.SPTRS_Creation.html",
    "title": "07 SPTRS_Creation",
    "section": "",
    "text": "Set up the conda environment\n\nconda env create -f environment.yml\n\n# to activate: conda activate SPrediXcan2PTRS"
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html",
    "href": "posts/generate_plink_format_genotypes.html",
    "title": "Generate_plink_format_genotypes",
    "section": "",
    "text": "library(workflowr)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(readxl)\n\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\""
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#generating-raw-genotype-files-from-tysons-original-analysis",
    "href": "posts/generate_plink_format_genotypes.html#generating-raw-genotype-files-from-tysons-original-analysis",
    "title": "Generate_plink_format_genotypes",
    "section": "Generating Raw Genotype files from Tyson’s original analysis",
    "text": "Generating Raw Genotype files from Tyson’s original analysis\nData from here - genoGex.Rdata has everything we need in it There are 5 ‘gex’ RDS files which are the gene expressions for the 5 different tissues, the ‘gtf’ is the gene annotation, ‘phyMap’ is the snp annotation, and ‘geno’ is the genotype matrix\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\n\nn = gexAc$EnsemblGeneID\ngexAc_transpose <- as.data.frame(t(gexAc[,-1]))\ncolnames(gexAc_transpose) <- n\n\nn = gexIl$EnsemblGeneID\ngexIl_transpose <- as.data.frame(t(gexIl[,-1]))\ncolnames(gexIl_transpose) <- n\n\nn = gexLh$EnsemblGeneID\ngexLh_transpose <- as.data.frame(t(gexLh[,-1]))\ncolnames(gexLh_transpose) <- n\n\nn = gexPl$EnsemblGeneID\ngexPl_transpose <- as.data.frame(t(gexPl[,-1]))\ncolnames(gexPl_transpose) <- n\n\nn = gexVo$EnsemblGeneID\ngexVo_transpose <- as.data.frame(t(gexVo[,-1]))\ncolnames(gexVo_transpose) <- n\n\n\ninvnorm = function(x) {\n  if(is.null(dim(x))) res = invnorm.vector(x) else\n  res=apply(x,2,invnorm.vector)\n  res\n}\ninvnorm.vector = function(x) {yy = rank(x)/(length(x)+1); qnorm(yy)}\n\n\ngexAc_transpose = invnorm(gexAc_transpose)\n\ngexIl_transpose = invnorm(gexIl_transpose)\n\ngexLh_transpose = invnorm(gexLh_transpose)\n\ngexPl_transpose = invnorm(gexPl_transpose)\n\ngexVo_transpose = invnorm(gexVo_transpose)\n\nWe first transposed each gene expression file as a matrix with individuals as the columns and genes for the rows. Now we add gene annotations.\n\ngtf$gene_type = sub(\".*?gene_biotype(.*?);.*\", \"\\\\1\", gtf$Attr)\ngtf$gene_name = sub(\".*?gene_name(.*?);.*\", \"\\\\1\", gtf$Attr)\n\ngene_annotation = subset(gtf, select = -c(Source, Feature, Score, Strand, Attr, Frame) )\ngene_annotation = gene_annotation[, c(\"Chr\",\"Gene\", \"gene_name\", \"Start\", \"End\", \"gene_type\" )]\ncolnames(gene_annotation) = c(\"chr\", \"gene_id\", \"gene_name\", \"start\", \"end\")\nrownames(gene_annotation) = gene_annotation$gene_id\n\nphyMap <- within(phyMap,  varID <- paste(Chr, Pos, Ref, Alt, sep=\"_\"))\nrownames(phyMap) = phyMap$varID\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", 'varID', \"rsid\")\n\nNext, we subset genotype files to the rats with gene expression data from respective tissues.\n\nrownames(geno) = rownames(phyMap)\n#write.table(geno, file = \"./data/genotype.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n\n\ngeno_Ac = geno[,match(rownames(gexAc_transpose), colnames(geno))]\ngeno_Il = geno[,match(rownames(gexIl_transpose), colnames(geno))]\ngeno_Lh = geno[,match(rownames(gexLh_transpose), colnames(geno))]\ngeno_Pl = geno[,match(rownames(gexPl_transpose), colnames(geno))]\ngeno_Vo = geno[,match(rownames(gexVo_transpose), colnames(geno))]\n\n\nwrite.table(geno_Ac, file = wd %&% \"genotype_Ac.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Il, file = wd %&% \"genotype_Il.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Lh, file = wd %&% \"genotype_Lh.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Pl, file = wd %&% \"genotype_Pl.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Vo, file = wd %&% \"genotype_Vo.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)"
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#generating-mapped-files-for-plink",
    "href": "posts/generate_plink_format_genotypes.html#generating-mapped-files-for-plink",
    "title": "Generate_plink_format_genotypes",
    "section": "Generating MAP/PED files for plink",
    "text": "Generating MAP/PED files for plink\nMAP\n\nnIndividuals_Ac <- ncol(geno_Ac)\nnSNPs_Ac <- nrow(geno_Ac)\n\nMAP <- phyMap %>% rename( SNP = rsid, CHR = chr, BP = pos) %>% mutate(CM = 0) %>% select(c(CHR, SNP, CM, BP))\nwrite_tsv(MAP, wd %&% \"rat_genotype.map\", col_names = FALSE)\n\nPED\n\nPED6 <- data.frame(\n  FID = colnames(geno_Ac),\n  IID = colnames(geno_Ac),\n  FatherID = 0,\n  MotherID = 0,\n  Sex = 1,\n  Phenotype = 1)\n\n# convert 0,1,2 to genotypes, a bit tricky\n# make helper dataframe for matching alleles\nmyAlleles <- data.frame(\n  AA = paste(phyMap$refAllele,phyMap$refAllele),\n  AB = paste(phyMap$refAllele, phyMap$effectAllele),\n  BB = paste(phyMap$effectAllele,phyMap$effectAllele) )\n   \nPEDsnps <- geno_Ac[,] + 1\n\nPEDsnpsAB <- \n  sapply(seq(nSNPs_Ac), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\n\nPED <- cbind(PED6, PEDsnpsAB)\n\nwrite_tsv(PED, wd %&% \"rat_genotype.ped\",col_names = FALSE)\n\nRepeat for other tissues ~ only need to change the rows\n\nPED_Il <- data.frame(FID = colnames(geno_Il), IID = colnames(geno_Il), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Lh <- data.frame(FID = colnames(geno_Lh), IID = colnames(geno_Lh), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Pl <- data.frame(FID = colnames(geno_Pl), IID = colnames(geno_Pl), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Vo <- data.frame(FID = colnames(geno_Vo), IID = colnames(geno_Vo), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\n\nPEDsnps <- geno_Il[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Il)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Il, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Il.ped\",col_names = FALSE)\n\nPEDsnps <- geno_Lh[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Lh)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Lh, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Lh.ped\",col_names = FALSE)\n\nPEDsnps <- geno_Pl[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Pl)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Pl, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Pl.ped\",col_names = FALSE)\n\nPEDsnps <- geno_Vo[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Vo)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Vo, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Vo.ped\",col_names = FALSE)\n\nGenerating Phenotype file ~ We’re using gene expression levels\n\npheno_Ac <- as.data.frame(cbind(FID = rownames(gexAc_transpose), IID = rownames(gexAc_transpose), gexAc_transpose))\npheno_Il <- as.data.frame(cbind(FID = rownames(gexIl_transpose), IID = rownames(gexIl_transpose), gexIl_transpose))\npheno_Lh <- as.data.frame(cbind(FID = rownames(gexLh_transpose), IID = rownames(gexLh_transpose), gexLh_transpose))\npheno_Pl <- as.data.frame(cbind(FID = rownames(gexPl_transpose), IID = rownames(gexPl_transpose), gexPl_transpose))\npheno_Vo <- as.data.frame(cbind(FID = rownames(gexVo_transpose), IID = rownames(gexVo_transpose), gexVo_transpose))\n\n\nwrite_tsv(pheno_Ac, wd %&% \"phenotype_files/rat_pheno_Ac.txt\", col_names = FALSE)\nwrite_tsv(pheno_Il, wd %&% \"phenotype_files/rat_pheno_Il.txt\", col_names = FALSE)\nwrite_tsv(pheno_Lh, wd %&% \"phenotype_files/rat_pheno_Lh.txt\", col_names = FALSE)\nwrite_tsv(pheno_Pl, wd %&% \"phenotype_files/rat_pheno_Pl.txt\", col_names = FALSE)\nwrite_tsv(pheno_Vo, wd %&% \"phenotype_files/rat_pheno_Vo.txt\", col_names = FALSE)"
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#convert-mapped-files-to-plink",
    "href": "posts/generate_plink_format_genotypes.html#convert-mapped-files-to-plink",
    "title": "Generate_plink_format_genotypes",
    "section": "Convert MAP/PED files to plink",
    "text": "Convert MAP/PED files to plink\nAll conversion to plink format use the same MAP file, but because of plink conventions, the MAP file must match the name of the PED file, so we rename the map file each time we convert genotypes for a different tissue.\n\ncd /gpfs/data/im-lab/nas40t2/sabrina/Rat_Genomics_Paper_Pipeline/data\n\nplink --file rat_genotype --make-bed --out plink_files/rat_genome_Ac\n\nmv rat_genotype.map rat_genotype_Il.map\nplink --file rat_genotype_Il --make-bed --out plink_files/rat_genome_Il\n\nmv rat_genotype_Il.map rat_genotype_Lh.map\nplink --file rat_genotype_Lh --make-bed --out plink_files/rat_genome_Lh\n\nmv rat_genotype_Lh.map rat_genotype_Pl.map\nplink --file rat_genotype_Pl --make-bed --out plink_files/rat_genome_Pl\n\nmv rat_genotype_Pl.map rat_genotype_Vo.map\nplink --file rat_genotype_Vo --make-bed --out plink_files/rat_genome_Vo"
  },
  {
    "objectID": "posts/Sparsity_Badger_Template.html",
    "href": "posts/Sparsity_Badger_Template.html",
    "title": "Sparsity_Badger_Template",
    "section": "",
    "text": "---\ndefinitions:\n\n  # command and template must always be specified.\n  command: gemma\n  template: /gpfs/data/im-lab/nas40t2/Github/badger/examples/PBS_example_template.jinja\n\n  copy_to_item: true\n\n  default_arguments:\n    job_memory: \"4gb\"\n    job_walltime: \"6:00:00\"\n    logs_folder: /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/logs\n    setup: \"module load gcc/6.2.0 \\n module load gemma/0.94 \\n cd /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac \"\n\n  # This specifies what the script does once an individual file is generated.\n  submission:\n    !PBSQueue\n      jobs_folder: /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/jobs\n      job_name_key: job_name # Jobs will be written to job_name.sh files with the generated job_name argument filled in.\n      fake_submission: true # Specifying this just writes the files and does not run a submission command.\n\n  constants:\n    GRM_dir: &GRM_DIR \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/GRMs/\"\n    pheno_file: &PHENO_FILE \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/phenotype_files/\"\n    geno_pref: &GENO_PREF \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files/\"\n# There are a lot of different types of arguments, and only a few are shown here.\narguments:\n\n  - !Scalar { name: argument_4, prefix: \"-bslmm\", value: 1 }\n  - !Scalar { name: argument_5, prefix: \"-n\", value: 1 }\n\n  - !FilesInFolder\n    name: argument_1\n    prefix: \"-g\"\n    folder: \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files\"\n    regexp_filter: \"geno(.*)\"\n    metadata_rules:\n      - !ExtractFromFileNameRegexpMetadata\n        paths: [ gene_name ]\n\n  - !ArgumentFromMetadata\n    name: argument_2\n    prefix: \"-p\"\n    prepend: *PHENO_FILE\n    format_rule: \"tmp.pheno.{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]\n    \n  - !ArgumentFromMetadata\n    name: argument_3\n    prefix: \"-k\"\n    prepend: *GRM_DIR\n    format_rule: \"grm_Ac_{gene_name}.cXX.txt\"\n    sources: [ { path: gene_name, destination: gene_name }]\n  \n  - !ArgumentFromMetadata\n    name: argument_6\n    prefix: \"-o\"\n    format_rule: \"Ac_out_{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]\n\n  - !ArgumentFromMetadata\n    name: job_name\n    format_rule: \"gemma_sub_Ac-{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html",
    "href": "posts/Human_PTRS_Comparison.html",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "",
    "text": "library(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(glmnet)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndevtools::source_gist(\"ee5f67abddd0b761ee24410ea71c41aa\")\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\ndevtools::source_gist(\"1e9053c8f35c30396429350a08f33ea7\")\n\nYanyu’s PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI.\n\ntraits <- c(\"height\", \"bmi\")\n# folder with PrediXcan results\nresults.dir <- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/PrediXcan/metabolic_traits/\"\n# folder with PTRS weights, predicted traits will output here\ndata.dir <- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\"\n\n\n\n\nThe orth.rats file contains gives a dictionary between human genes and the corresponding gene in rats.\n\north.rats <- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with PTRS weights.\n\npred_expr <- read_tsv(results.dir %&% \"rat_metabolic_Ac_best__predict.txt\") %>% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr <- pred_expr %>% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] <- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %>% .[[\"ensembl_gene_id\"]]\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\nfn_weights = function(trait)\n{\n  weights <- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id <- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) <- weights$gene_id\n  weights <- weights %>% rename(gene_name = gene_id)\n  return(weights)\n}\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats.\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\nfor(trait in traits) {\n  weights <- fn_weights(trait)\n  pred_trait <- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, data.dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#human-ptrs-results",
    "href": "posts/Human_PTRS_Comparison.html#human-ptrs-results",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "Human PTRS Results",
    "text": "Human PTRS Results\nThe Personal Genome Project is a public resource of individual data from informed volunteers. PGP genetic data is publicly available, and we have processed trait information in an sqlite database. In Yanyu Liang’s development of PTRS, she generated PTRS weights using elastic net. We want to use PGP data to test Yanyu’s PTRS weights and compare to observed height. We previously generated predicted expression in Summary_PTRS_PGS.Rmd"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#calculate-predicted-height-in-pgp-using-individual-ptrs-weights",
    "href": "posts/Human_PTRS_Comparison.html#calculate-predicted-height-in-pgp-using-individual-ptrs-weights",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "Calculate Predicted Height in PGP using Individual PTRS Weights",
    "text": "Calculate Predicted Height in PGP using Individual PTRS Weights\n\npred_expr <- read_tsv(data.dir %&% \"PTRS_weights/PGP/PGP_Whole_Blood__predict.txt\") %>% select(-c(FID))\n\nWe repeat the same method from before for predicting traits, but this time predicting height and BMI for PGP individuals.\n\npred_height_humans <- fn_generate_trait(pred_expr, weights)"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#compare-performance-to-observed-height-in-personal-genomes",
    "href": "posts/Human_PTRS_Comparison.html#compare-performance-to-observed-height-in-personal-genomes",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "Compare Performance to Observed Height in Personal Genomes",
    "text": "Compare Performance to Observed Height in Personal Genomes\nFirst, we load PGP phenotype data, stored in an sqlite database.\n\ndb <- \"~/Box/imlab-data/data-Github/web-data/2021-04-21-personal-genomes-project-data/repgp-data.sqlite3\"\nsqlite.driver <- dbDriver(\"SQLite\")\nconn <- dbConnect(RSQLite::SQLite(), db)\ndbListTables(conn)\n\nusers <- dbGetQuery(conn, 'select * from users')\ndbDisconnect(conn)\n\npheno <- users  %>% select(c(sample, height)) %>% na.omit()\nn_genes = as.matrix(apply(weights[,2:ncol(weights)], 2, function(x) sum(x != 0 )))\n\n\npheno <- pheno[na.omit(match(rownames(pred_height_humans), pheno$sample)),]\n\ntempo <- pred_height_humans[na.omit(match(pheno$sample, rownames(pred_height_humans))), ]\n\nheight_df <- data.frame(estimate = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  height_df[i,1] <- cor.test(pheno$height, tempo[,i])$estimate\n  height_df[i,2] <- cor.test(pheno$height, tempo[,i])$p.value\n  height_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  height_df[i,4] <- n_genes[i,1]\n  height_df[i,5] <- cor.test(pheno$height, tempo[,i])$conf.int[1]\n  height_df[i,6] <- cor.test(pheno$height, tempo[,i])$conf.int[2]\n}"
  },
  {
    "objectID": "posts/about.html",
    "href": "posts/about.html",
    "title": "About",
    "section": "",
    "text": "Describe your project.\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/GTEx_n_genes_rat_comparison.html",
    "href": "posts/GTEx_n_genes_rat_comparison.html",
    "title": "GTEx_comparison_rat_n_genes",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndir <- \"/gpfs/data/im-lab/nas40t2/Data/GTEx/V8/GTEx_Analysis_v8_eQTL_expression_matrices/\"\ngeno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/\""
  },
  {
    "objectID": "posts/GTEx_n_genes_rat_comparison.html#compare-number-of-genes-predicted-between-rat-and-gtex-prediction-models",
    "href": "posts/GTEx_n_genes_rat_comparison.html#compare-number-of-genes-predicted-between-rat-and-gtex-prediction-models",
    "title": "GTEx_comparison_rat_n_genes",
    "section": "Compare number of genes predicted between Rat and GTEx prediction models",
    "text": "Compare number of genes predicted between Rat and GTEx prediction models"
  },
  {
    "objectID": "posts/generate_sparsity_figs.html",
    "href": "posts/generate_sparsity_figs.html",
    "title": "Generate Sparsity Figures",
    "section": "",
    "text": "we will use this for comparison later\n\noverlap <- read_tsv(data.dir %&% \"Box_files/overlap_rat_genes_GTEx.txt\", col_names = TRUE)  # genes that are present in both rat expression data and in GTEx\n\nexpr_Ac <- readRDS(data.dir %&% \"expression/Ac_expression_transformed.RDS\")\nexpr_Ac <- expr_Ac[, intersect(colnames(expr_Ac), overlap$rat_gene)]\nsaveRDS(expr_Ac, data.dir %&% \"expression/Ac_expression_intesrect_GTEx.RDS\")"
  },
  {
    "objectID": "posts/generate_sparsity_figs.html#generate-r2-predictions-for-all-elastic-net-parameters-between-0-and-1",
    "href": "posts/generate_sparsity_figs.html#generate-r2-predictions-for-all-elastic-net-parameters-between-0-and-1",
    "title": "Generate Sparsity Figures",
    "section": "Generate R2 predictions for all elastic net parameters between 0 and 1",
    "text": "Generate R2 predictions for all elastic net parameters between 0 and 1\nWe run the same Prediction Model Pipeline only for Ac tissue. However this time, I didn’t break it down into chromosome. This takes longer but means you have less files, a file for each alpha parameter.\n\nfor i in $(seq 0 0.1 1.0)\ndo\nqsub -v alpha=$i sparsity_rats_pipeline.pbs\ndone\n\nNow we have predictability for all parameters of alpha. We can now iterate through all alphas and create the long data format. We also only select for genes that have an average cor > 0.3 and subsample 20 genes.\n\nldf <- list() # creates a list\nlisttsv <- list.files(path = dir, pattern = \"working_TW_Ac_exp_10-foldCV_elasticNet_alpha\", full.names = TRUE) # creates the list of all the tsv files in the directory\ntempo <- read_tsv(listtsv[1], col_names = TRUE) \ntempo <- tempo %>% select(c(gene, cor))\ncolnames(tempo)[2] = \"0\"\n\nfor (k in 2:length(listtsv)){\n ldf[[k]] <- read_tsv(listtsv[k], col_names = TRUE)\n alpha <- substr(listtsv[k], 107, str_length(listtsv[k]) - 13)\n fila <- as.data.frame(ldf[[k]]) \n fila <- fila %>% select(c(gene, cor)) \n colnames(fila)[2] = alpha\n tempo <- inner_join(tempo, fila, by = \"gene\")\n}\n\nPlot results of r for all parameers of alpha\n\ntempo <- read_tsv(\"/Users/natashasanthanam/Downloads/rat_elastic_net_all_parameters_GTEx_only_genes.txt\", col_names = TRUE)\n\ndata_long <- tempo  %>%   pivot_longer(!gene, names_to = \"value\", values_to = \"count\")\n   \np1 <-  ggplot(data_long, aes(x = as.numeric(value), y = count)) + geom_smooth(show_guide = FALSE, se=T, size = .5, col = \"dodgerblue2\")  +  xlab(expression(paste(\"Elastic net mixing parameter (\",alpha, \")\"))) + ylab(expression(paste(\"10-fold cross-validated R\")))\n\np2 = ggplot(tempo, aes(x = `0`, y = `0.5`)) + geom_hex(bins = 50)   +\n      geom_abline(slope = 1, intercept = 0, color = \"darkgrey\", size = 0.8) +\n      ylab(\"cor for mixing paramter = 0.5\" ) +\n      xlab(\"cor for mixing paramter = 0\") + theme_bw(base_size = 16)\n\np1"
  },
  {
    "objectID": "posts/01.Heritability_Sparsity.html#calculate-cis-heritability-within-1mb",
    "href": "posts/01.Heritability_Sparsity.html#calculate-cis-heritability-within-1mb",
    "title": "01.Heritability_Sparsity",
    "section": "Calculate Cis Heritability within 1MB",
    "text": "Calculate Cis Heritability within 1MB\nFirst we create bimbam formats for genotypes from the original genotype file. The bimbam format is the input for gemma, which we will use for both heritability and sparisty estiamtes.\n\nlibrary(tidyverse)\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd <- \"/Users/natashasanthanam/Github/rat-genomic-analysis/data/\"\n\ngeno_Ac = geno[,match(rownames(gexAc_transpose), colnames(geno))]\ngeno_Il = geno[,match(rownames(gexIl_transpose), colnames(geno))]\ngeno_Lh = geno[,match(rownames(gexLh_transpose), colnames(geno))]\ngeno_Pl = geno[,match(rownames(gexPl_transpose), colnames(geno))]\ngeno_Vo = geno[,match(rownames(gexVo_transpose), colnames(geno))]\n\nAc_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Ac), phyMap$refAllele, phyMap$effectAllele, geno_Ac)\nIl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Il),phyMap$refAllele, phyMap$effectAllele,  geno_Il)\nLh_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Lh),phyMap$refAllele, phyMap$effectAllele,  geno_Lh)\nPl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Pl),phyMap$refAllele, phyMap$effectAllele,  geno_Pl)\nVo_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Vo),phyMap$refAllele, phyMap$effectAllele,  geno_Vo)\n\nwrite.table(Ac_bimbam, file = wd %&% \"Ac_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Il_bimbam, file = wd %&% \"Il_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Lh_bimbam, file = wd %&% \"Lh_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Pl_bimbam, file = wd %&%\"Pl_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Vo_bimbam, file = wd %&%\"Vo_bimbam\",quote=F,col.names=F,row.names=F)\n\nCollect list of individuals from the expression files\n\ngtf <- read_tsv(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gtf.txt\", col_names=TRUE)\ngexAc_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexAc_transpose.txt\")\ngexIl_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexIl_transpose.txt\")\ngexLh_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexLh_transpose.txt\")\ngexPl_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexPl_transpose.txt\")\ngexVo_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexVo_transpose.txt\")\n\nensidlist <- colnames(gexAc_transpose)\nensidlist_Il <- colnames(gexIl_transpose)\nensidlist_Lh <- colnames(gexLh_transpose)\nensidlist_Pl <- colnames(gexPl_transpose)\nensidlist_Vo <- colnames(gexVo_transpose)"
  },
  {
    "objectID": "posts/01.Heritability_Sparsity.html#sparsity-analysis",
    "href": "posts/01.Heritability_Sparsity.html#sparsity-analysis",
    "title": "01.Heritability_Sparsity",
    "section": "Sparsity Analysis",
    "text": "Sparsity Analysis\nAll the code above generates the local GRM for each phenotype (gene). With the GRM we then run gemma again to calculate both PVE (heritability) and PGE (sparsity). I used a badger template to calculate h2 and sparsity for each tissue. This steps takes a lot of computing power, so we use Badger. It takes approximatley 2-3 days to run.\nThe code to run badger is here\n\nsource(\"./Rat_Genomics_Paper_Pipeline/analysis/Sparsity_Badger_Template.Rmd\")\n\nGEMMA then generates a .hyp file for each phenotype or in our case gene of interest. The hyp file contains the posterior samples for the hyper-parameters (h, PVE, rho, PGE, pi and gamma) for every 10th iteration. For our purposes, we are interested in the PGE and PVE parameters.\nTo then calculate the point estimate and credible set for Proportion of Variance Explained (PVE) and Proportion of genetic variance explained by the sparse effects terms (PGE), we calculate the posterior probability for each gene for each tissue.\nI generated a function that calculates the beta of the posterior distribution and can be found here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rat_genomics_paper_pipeline_hki",
    "section": "",
    "text": ":::{#quarto-listing-pipeline .hidden} \\(e = mC^2\\)\n:::{.hidden render-id=“pipeline-listing-listing”}\n:::{.list .quarto-listing-default}\n\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n10.PTRS_simulation_weights\n\n\n\n\n\n\n\n\n\n\n\n\nJun 26, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n09.PRS_Rats\n\n\n\n\n\n\n\n\n\n\n\n\nMay 4, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n04.GEMMA_LMM_analysis\n\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nGenerate Sparsity Figures\n\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nHuman_PTRS_Performance_Comparison\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 24, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nconvert_genotypes_old\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n\n\nrat_compare_genotypes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nRat_Predictability_comp_Humans\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nPhenomeXcan Query\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nCoregulation_across_Tissues_Species\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nRat QC and Comparison Check\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nGenerate_plink_format_genotypes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nGTEx_comparison_rat_n_genes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n\nPrediction_Model_Pipeline\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nTyson Miller\n\n\n\n\n\n\n\n\n06.PTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n03.PrediXcan_MultiXcan\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n08.Compare_all_PTRS\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n01.Heritability_Sparsity Sabrina\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam, Sabrina\n\n\n\n\n\n\n\n\n07 SPTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nSparsity_Badger_Template\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n\n\n01.Heritability_Sparsity\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n:::\n\n\nNo matching items\n\n:::\n:::"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\n:::{#quarto-listing-pipeline .hidden} \\(e = mC^2\\)\n:::{.hidden render-id=“pipeline-listing-listing”}\n:::{.list .quarto-listing-default}\n\n\n\n\n01.Heritability_Sparsity\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n\n\n01.Heritability_Sparsity Sabrina\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam, Sabrina\n\n\n\n\n\n\n\n\n\nPrediction_Model_Pipeline\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nTyson Miller\n\n\n\n\n\n\n\n\n03.PrediXcan_MultiXcan\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n04.GEMMA_LMM_analysis\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n06.PTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n07 SPTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n08.Compare_all_PTRS\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n09.PRS_Rats\n\n\n\n\n\n\n\n\n\n\n\nMay 4, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\n10.PTRS_simulation_weights\n\n\n\n\n\n\n\n\n\n\n\nJun 26, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nCoregulation_across_Tissues_Species\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nGTEx_comparison_rat_n_genes\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nGenerate Sparsity Figures\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nGenerate_plink_format_genotypes\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nHuman_PTRS_Performance_Comparison\n\n\n\n\n\n\n\n\n\n\n\nFeb 24, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nPhenomeXcan Query\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nRat QC and Comparison Check\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nRat_Predictability_comp_Humans\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n\n\nSparsity_Badger_Template\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n\n\nconvert_genotypes_old\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n\n\nrat_compare_genotypes\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n:::\n\nNo matching items\n\n:::\n:::"
  }
]