[
  {
    "objectID": "posts/10.PTRS_simulation_weights.html",
    "href": "posts/10.PTRS_simulation_weights.html",
    "title": "10.PTRS_simulation_weights",
    "section": "",
    "text": "Read in files\n\nweights &lt;-  read_tsv(\"/Users/natashasanthanam/Downloads/weights.height.annot.tsv\")  \nweights &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/weights.bmi.annot.tsv\")\npred_expr &lt;- fread(\"/Users/natashasanthanam/Box/imlab-data/data-Github/web-data/2022-06-23-improving-figure-for-rat-ptrs/rat_metabolic_Ac_best__predict.txt\") %&gt;% select(-c(FID))\n\npred_expr &lt;- pred_expr %&gt;% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] &lt;- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %&gt;% .[[\"ensembl_gene_id\"]]"
  },
  {
    "objectID": "posts/10.PTRS_simulation_weights.html#check-simulation-of-different-weights-for-ptrs-correlation-with-observed-trait",
    "href": "posts/10.PTRS_simulation_weights.html#check-simulation-of-different-weights-for-ptrs-correlation-with-observed-trait",
    "title": "10.PTRS_simulation_weights",
    "section": "",
    "text": "Read in files\n\nweights &lt;-  read_tsv(\"/Users/natashasanthanam/Downloads/weights.height.annot.tsv\")  \nweights &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/weights.bmi.annot.tsv\")\npred_expr &lt;- fread(\"/Users/natashasanthanam/Box/imlab-data/data-Github/web-data/2022-06-23-improving-figure-for-rat-ptrs/rat_metabolic_Ac_best__predict.txt\") %&gt;% select(-c(FID))\n\npred_expr &lt;- pred_expr %&gt;% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] &lt;- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %&gt;% .[[\"ensembl_gene_id\"]]"
  },
  {
    "objectID": "posts/02.Prediction_Model_Pipeline.html",
    "href": "posts/02.Prediction_Model_Pipeline.html",
    "title": "02. Prediction_Model_Pipeline",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\n\nData from here - genoGex.Rdata has everything we need in it There are 5 ‘gex’ RDS files which are the gene expressions for the 5 different tissues, the ‘gtf’ is the gene annotation, ‘phyMap’ is the snp annotation, and ‘geno’ is the genotype matrix\nOur pipeline predicts expressions from the gene expression data and genotypes of the rats from the study.\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")"
  },
  {
    "objectID": "posts/02.Prediction_Model_Pipeline.html#peer-analysis",
    "href": "posts/02.Prediction_Model_Pipeline.html#peer-analysis",
    "title": "02. Prediction_Model_Pipeline",
    "section": "PEER analysis",
    "text": "PEER analysis\nNow we are performing PEER factor analysis on each tissue, choosing 7 factors.\n\npeertool -f data/\"gexAc.csv\" -n 7 -o peer_Ac --has_header\npeertool -f data/\"gexIl.csv\" -n 7 -o peer_Il --has_header\npeertool -f data/\"gexLh.csv\" -n 7 -o peer_Lh --has_header\npeertool -f data/\"gexPl.csv\" -n 7 -o peer_Pl --has_header\npeertool -f data/\"gexVo.csv\" -n 7 -o peer_Vo --has_header\n\nLater on, we examine these 7 factors, as well as other covariates, to interpret expression variability. # Gene, snp annotation files The prediction model pipeline also requires a gene annotation file as input. The code below generates it from the gene annotations provided by Palmer lab in ‘gtf’. We also collect snp info.\n\ngtf$gene_type = sub(\".*?gene_biotype(.*?);.*\", \"\\\\1\", gtf$Attr)\ngtf$gene_name = sub(\".*?gene_name(.*?);.*\", \"\\\\1\", gtf$Attr)\ngene_annotation = subset(gtf, select = -c(Source, Feature, Score, Strand, Attr, Frame) )\ngene_annotation = gene_annotation[, c(\"Chr\",\"Gene\", \"gene_name\", \"Start\", \"End\", \"gene_type\" )]\ncolnames(gene_annotation) = c(\"chr\", \"gene_id\", \"gene_name\", \"start\", \"end\")\nrownames(gene_annotation) = gene_annotation$gene_id\n\nWe have all the information needed to generate the predictions models. We are left to reorganize it to fit the pipeline. The specifics of each step is commented at the top of each block.\n\n# Making the snp annotation in the correct format for the pipeline\nphyMap &lt;- within(phyMap,  varID &lt;- paste(Chr, Pos, Ref, Alt, sep=\"_\"))\nrownames(phyMap) = phyMap$varID\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", 'varID', \"rsid\")\n\n\n# Splitting the snp annotation file by chromosome\ns &lt;- setNames(split(phyMap, phyMap$chr), paste0(\"snp_annot.chr\", unique(phyMap$chr)))\nlist2env(s, globalenv())\n\nThe new genotype file combines the provided geno file and combines information from the provided snp annotation file, phyMap.\n\n# writing the genotype file to a .txt file so that we can separate it by chromosome using our geneotype parse script.\nrownames(geno) = rownames(phyMap)\nwrite.table(geno, file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/genotype.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n\nThis python script separates the genotype file by chromosome.\n\n#Splitting the genotype file by chromosome - run this from the rat_genomic_alaysis directory\npython scripts/split_genotype_by_chr.py data/genotype.txt data/geno_by_chr/'genotype'"
  },
  {
    "objectID": "posts/04.GEMMA_LMM_analysis.html",
    "href": "posts/04.GEMMA_LMM_analysis.html",
    "title": "04.GEMMA_LMM_analysis",
    "section": "",
    "text": "Gemma uses a LMM with a kinship matrix. That would account for familial structure that PrediXcan doesnt. We’ll run Gemma with the predicted expression and metabolic phenotypes to compare the results.\nWe first run GEMMA with predicted expression for Nucleus Accumbens Core Tissue generated by PrediXcan. We’ll create GRMS first for all phenotypes"
  },
  {
    "objectID": "posts/04.GEMMA_LMM_analysis.html#check-gene-level-associations-with-gemma",
    "href": "posts/04.GEMMA_LMM_analysis.html#check-gene-level-associations-with-gemma",
    "title": "04.GEMMA_LMM_analysis",
    "section": "",
    "text": "Gemma uses a LMM with a kinship matrix. That would account for familial structure that PrediXcan doesnt. We’ll run Gemma with the predicted expression and metabolic phenotypes to compare the results.\nWe first run GEMMA with predicted expression for Nucleus Accumbens Core Tissue generated by PrediXcan. We’ll create GRMS first for all phenotypes"
  },
  {
    "objectID": "posts/06.PTRS_Creation.html",
    "href": "posts/06.PTRS_Creation.html",
    "title": "06.PTRS_Creation",
    "section": "",
    "text": "The orth.rats file contains gives a dictionary between human genes and the corresponding gene in rats.\n\ndata.dir &lt;- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\"\north.rats &lt;- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\n\nIndividual PTRS creation\nYanyu’s PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI.\n\ntraits &lt;- c(\"height\", \"bmi\")\n\n\nbase.dir &lt;- \"~/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/\"\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with Yanyu’s PTRS weights.\n\npred_expr &lt;- read_tsv(base.dir %&% \"prediXcan/metabolic_traits/rat_metabolic_Ac_best__predict.txt\") %&gt;% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr &lt;- pred_expr %&gt;% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] &lt;- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %&gt;% .[[\"ensembl_gene_id\"]]\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\nfn_weights = function(trait)\n{\n  weights &lt;- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id &lt;- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) &lt;- weights$gene_id\n  weights &lt;- weights %&gt;% rename(gene_name = gene_id)\n  return(weights)\n}\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats.\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\ndir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\nfor(trait in traits) {\n  weights &lt;- fn_weights(trait)\n  pred_trait &lt;- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}\n\nCompare all values across different models to actual BMI and Height\n\npred_height &lt;- readRDS(dir %&% \"rat_pred_height_w_Human_best_PTRS.RDS\") \npred_BMI &lt;- readRDS(dir %&% \"rat_pred_bmi_w_Human_best_PTRS.RDS\")\n\nall_rats &lt;- read_tsv(dir %&% \"all_names.txt\", col_names = TRUE)\n\npheno &lt;- read_csv(dir %&% \"processed_obesity_rat_Palmer_phenotypes.csv\")\npheno &lt;- pheno %&gt;% filter(!(rat_rfid  %in% all_rats$ID))\n\n\nweights_bmi &lt;- fread(\"/Users/natashasanthanam/Downloads/weights.bmi.annot.tsv\") \nweights_height &lt;-  fread(\"/Users/natashasanthanam/Downloads/weights.height.annot.tsv\")  \n\nn_genes_bmi = as.matrix(apply(weights_bmi[,2:ncol(weights_bmi)], 2, function(x) sum(x != 0 )))\nn_genes_height = as.matrix(apply(weights_height[,2:ncol(weights_height)], 2, function(x) sum(x != 0 )))\n\n#Create Dataframes with the correlation coefficient between trait in rats and ones predicted using PTRS from Humans\nBMI with predicted BMI\n\nbmi_with_tail &lt;- pheno %&gt;% dplyr::select(c(rat_rfid, bmi_bodylength_w_tail)) %&gt;% na.omit()\ntempo &lt;- pred_BMI[na.omit(match(bmi_with_tail$rat_rfid, rownames(pred_BMI))), ]\n\nbmi_w_tail_df &lt;- data.frame(R2 = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  fit = lm(bmi_with_tail$bmi_bodylength_w_tail ~ tempo[,i])\n  bmi_w_tail_df[i,1] &lt;- summary(fit)$r.squared\n  bmi_w_tail_df[i,2] &lt;- glance(fit)$p.value\n  bmi_w_tail_df[i,3] &lt;- paste(\"model\", i, sep = \"_\")\n  bmi_w_tail_df[i,4] &lt;- n_genes_bmi[i,1]\n  bmi_w_tail_df[i,5] &lt;- confint(fit)[1] \n  bmi_w_tail_df[i,6] &lt;- confint(fit)[2]\n}\n\nbmi_w_tail_cor &lt;- data.frame(cor = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  bmi_w_tail_cor[i,1] &lt;- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$estimate\n  bmi_w_tail_cor[i,2] &lt;- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$p.value\n  bmi_w_tail_cor[i,3] &lt;- paste(\"model\", i, sep = \"_\")\n  bmi_w_tail_cor[i,4] &lt;- n_genes_bmi[i,1]\n  bmi_w_tail_cor[i,5] &lt;- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$conf.int[1]\n  bmi_w_tail_cor[i,6] &lt;- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$conf.int[2]\n}\n\ntotal_bmi_df &lt;- inner_join(bmi_w_tail_cor, bmi_w_tail_df, by = \"model\")\ntotal_bmi_df &lt;- total_bmi_df %&gt;% select(c(model, n_genes_in_model.x, cor, R2, pvalue.x, conf.int.min.x, conf.int.max.x ))\n\nBodylength with Predicted Height\n\n#Bodylength wit Tail vs predicted Height from Human PTRS weights\nbodylength_w_tail &lt;- pheno %&gt;% dplyr::select(c(rat_rfid, bodylength_w_tail)) %&gt;% na.omit()\ntempo &lt;- pred_height[na.omit(match(bodylength_w_tail$rat_rfid, rownames(pred_height))), ]\n\nbodylength_w_tail_df &lt;- data.frame(R2 = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  fit = lm(bodylength_w_tail$bodylength_w_tail ~ tempo[,i])\n  bodylength_w_tail_df[i,1] &lt;- summary(fit)$r.squared\n  bodylength_w_tail_df[i,2] &lt;- glance(fit)$p.value\n  bodylength_w_tail_df[i,3] &lt;- paste(\"model\", i, sep = \"_\")\n  bodylength_w_tail_df[i,4]&lt;- n_genes_height[i,1]\n  bodylength_w_tail_df[i,5] &lt;- confint(fit)[1] \n  bodylength_w_tail_df[i,6] &lt;- confint(fit)[2] \n}\n\nbodylength_w_tail_cor &lt;- data.frame(cor = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  bodylength_w_tail_cor[i,1] &lt;- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$estimate\n  bodylength_w_tail_cor[i,2] &lt;- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$p.value\n  bodylength_w_tail_cor[i,3] &lt;- paste(\"model\", i, sep = \"_\")\n  bodylength_w_tail_cor[i,4]&lt;- n_genes_height[i,1]\n  bodylength_w_tail_cor[i,5] &lt;- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$conf.int[1]\n  bodylength_w_tail_cor[i,6] &lt;- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$conf.int[2]\n}\n\nbodylength_w_tail_cor &lt;- bodylength_w_tail_cor %&gt;% filter(n_genes_in_model != 0)\n\ntotal_height_df &lt;- inner_join(bodylength_w_tail_cor, bodylength_w_tail_df, by = \"model\")\ntotal_height_df &lt;- total_height_df %&gt;% select(c(model, n_genes_in_model.x, cor, R2, pvalue.x, conf.int.min.x, conf.int.max.x ))\n\n\n\nPlot Results\n\nggplot(bodylength_w_tail_cor, aes(n_genes_in_model, cor)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + ylim(c(0,0.1)) + geom_point(position=\"jitter\") +geom_line() + xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\n\nggplot(bmi_w_tail_cor, aes(n_genes_in_model, cor)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + ylim(c(0 ,0.1)) + geom_point(position=\"jitter\") +geom_line() +  xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\nViolin plot\n\nptrs_hum &lt;- read_excel(\"/Users/natashasanthanam/Downloads/13059_2021_2591_MOESM5_ESM.xlsx\")\nptrs_hum &lt;- ptrs_hum[7:nrow(ptrs_hum),]\ncolnames(ptrs_hum) = c(\"trait\", \"population\", \"PTRS_MESA_EUR\", \"PTRS_MESA_AFR\", \"PTRS_MESA_ALL\")\n\nptrs_hum_height &lt;- ptrs_hum %&gt;% filter(trait == \"height\")\nptrs_hum_height &lt;- ptrs_hum_height %&gt;% pivot_longer(c(\"PTRS_MESA_EUR\", \"PTRS_MESA_AFR\", \"PTRS_MESA_ALL\"), names_to = \"PTRS\") %&gt;% select(-c(trait))\n\n\nggplot(bodylength_w_tail_cor, aes(x=n_genes_in_model, y=cor)) + \n  geom_violin()\n\nggplot(bmi_w_tail_cor, aes(x=n_genes_in_model, y=cor)) + \n  geom_violin()\n\n\n\nCreate and Plot Negative Control\n\nfasting_glucose &lt;- pheno %&gt;% dplyr::select(c(rat_rfid, fasting_glucose)) %&gt;% na.omit()\ntempo &lt;- pred_height[na.omit(match(fasting_glucose$rat_rfid, rownames(pred_height))), ]\n\nneg_control_df &lt;- data.frame(estimate = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\n\nfor(i in 1:ncol(tempo)){\n  neg_control_df[i,1] &lt;- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$estimate\n  neg_control_df[i,2] &lt;- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$p.value\n  neg_control_df[i,3] &lt;- paste(\"model\", i, sep = \"_\")\n  neg_control_df[i,4]&lt;- n_genes_height[i,1]\n  neg_control_df[i,5] &lt;- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$conf.int[1]\n  neg_control_df[i,6] &lt;- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$conf.int[2]\n}\n\nggplot(neg_control_df, aes(n_genes_in_model, estimate)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + geom_point(position=\"jitter\") +geom_line() +  xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\n\n\nTest PTRS top genes for Enrichment\n\ntop_ptrs_genes &lt;- weights_height %&gt;% select(c(gene_name, model_5)) %&gt;% filter(model_5 != 0) %&gt;% select(c(gene_name))\ntop_ptrs_genes$gene_name = sapply(strsplit(top_ptrs_genes$gene_name , \"\\\\.\"), `[`, 1)\n\ntop_ptrs_genes &lt;- top_ptrs_genes %&gt;% mutate(rat_gene = orth.rats[match(top_ptrs_genes$gene_name, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n\nfull_df &lt;- read_tsv(\"/Users/natashasanthanam/Github/rat-genomic-analysis/data/rat_metabolic_traits_best_Ac_full_assocs.txt\", col_names = TRUE)\npheno_Multi_rat &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/rat_metabolic_MultiXcan_pval_assoc.txt\", col_names = TRUE)\n\n\nqqunif(full_df$pvalue, col= \"dodgerblue4\" )\nqqpoints(full_df %&gt;% filter(gene %in% top_ptrs_genes$rat_gene) %&gt;% .[[\"pvalue\"]],pch='+', col = \"dodgerblue\") \n\nqqunif(pheno_Multi_rat$pvalue.bodylength_w_tail, col= \"dodgerblue4\" )\nqqpoints(pheno_Multi_rat %&gt;% filter(gene %in% top_ptrs_genes$rat_gene) %&gt;% .[[\"pvalue.bodylength_w_tail\"]],pch='+', col = \"dodgerblue\") \n\n\nall_ptrs_genes &lt;- weights_height %&gt;%  filter(!(gene_name %in% top_ptrs_genes$gene_name)) %&gt;% select(c(gene_name))\nall_ptrs_genes &lt;-  all_ptrs_genes %&gt;% mutate(rat_gene = orth.rats[match(all_ptrs_genes$gene_name, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n\nqqunif(full_df %&gt;% filter(gene %in% all_ptrs_genes$rat_gene) %&gt;% .[[\"pvalue\"]])\nqqpoints(full_df %&gt;% filter(gene %in% top_ptrs_genes$rat_gene) %&gt;% .[[\"pvalue\"]],pch='+', col = \"dodgerblue\") \n\n\nfull_df &lt;- full_df %&gt;% mutate(human_gene = orth.rats[match(full_df$gene, orth.rats$rnorvegicus_homolog_ensembl_gene), 1]$ensembl_gene_id)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/03.PrediXcan.html",
    "href": "posts/03.PrediXcan.html",
    "title": "03.PrediXcan_MultiXcan",
    "section": "",
    "text": "library(tidyverse)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(qqman)\nlibrary(ggrepel)\nlibrary(devtools)\ndevtools::source_gist(\"0ddc9c0ea03245bb30efbe3e899897be\")\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nargs = commandArgs(trailingOnly=TRUE)\ngeno.dir &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/rat_genotypes_LD_pruned_0.95/\""
  },
  {
    "objectID": "posts/03.PrediXcan.html#run-predixcan-with-metabolic-phenotype-data",
    "href": "posts/03.PrediXcan.html#run-predixcan-with-metabolic-phenotype-data",
    "title": "03.PrediXcan_MultiXcan",
    "section": "Run PrediXcan with Metabolic Phenotype Data",
    "text": "Run PrediXcan with Metabolic Phenotype Data"
  },
  {
    "objectID": "posts/03.PrediXcan.html#run-multixcan",
    "href": "posts/03.PrediXcan.html#run-multixcan",
    "title": "03.PrediXcan_MultiXcan",
    "section": "Run MultiXcan",
    "text": "Run MultiXcan"
  },
  {
    "objectID": "posts/convert_genotypes_old.html",
    "href": "posts/convert_genotypes_old.html",
    "title": "convert_genotypes_old",
    "section": "",
    "text": "Note: This is old script to convert Palmer lab genotype data in an .Rdata object to plink format. For our analysis, we used a different process to reformat, documented here\nData from here - genoGex.Rdata has everything we need in it There are 5 ‘gex’ RDS files which are the gene expressions for the 5 different tissues, the ‘gtf’ is the gene annotation, ‘phyMap’ is the snp annotation, and ‘geno’ is the genotype matrix\n\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndate = Sys.Date()\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/\"\n\nWe loaded several data tables into memory. geno contains genotype data, with columns of rat IDs and each row containing dosage for a single snp. These snps are listed in phyMap, with their chromosome, position, reference, and alternative alleles. In this next step, we subset genotype data to the rats with gene expression data for each tissue.\n\n# We take all except the first column of geno, which is NA (because geno is a matrix). The the result is a list of all individual ids\ngeno_Ac = geno[,match(colnames(gexAc), colnames(geno))[-1]]\ngeno_Il = geno[,match(colnames(gexIl), colnames(geno))[-1]]\ngeno_Lh = geno[,match(colnames(gexLh), colnames(geno))[-1]]\ngeno_Pl = geno[,match(colnames(gexPl), colnames(geno))[-1]]\ngeno_Vo = geno[,match(colnames(gexVo), colnames(geno))[-1]]\n\nAdding information from the snp annotation file phyMap, we generate a genotype file for each tissue.\n\nAc_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Ac), phyMap$refAllele, phyMap$effectAllele, geno_Ac)\nIl_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Il),phyMap$refAllele, phyMap$effectAllele,  geno_Il)\nLh_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Lh),phyMap$refAllele, phyMap$effectAllele,  geno_Lh)\nPl_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Pl),phyMap$refAllele, phyMap$effectAllele,  geno_Pl)\nVo_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Vo),phyMap$refAllele, phyMap$effectAllele,  geno_Vo)\n\n\nwrite.table(Ac_bimbam, file = wd %&% \"Ac_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Il_bimbam, file = wd %&% \"Il_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Lh_bimbam, file = wd %&% \"Lh_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Pl_bimbam, file = wd %&%\"Pl_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Vo_bimbam, file = wd %&%\"Vo_bimbam\",quote=F,col.names=F,row.names=F)\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rat_Predictability_comp_Humans.html",
    "href": "posts/Rat_Predictability_comp_Humans.html",
    "title": "Rat_Predictability_comp_Humans",
    "section": "",
    "text": "#Figure comparing pred R2 vs obs R2 in Ac tissue in Rats\nFirst find well expressed genes in Rats\n\nfila &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/models//Ac_output_db.db\"\nsqlite.driver &lt;- dbDriver(\"SQLite\")\nconn &lt;- dbConnect(RSQLite::SQLite(), fila)\ntempo &lt;- dbGetQuery(conn, 'select * from extra')\n\ntempo &lt;- tempo[order(-tempo$R2),]    \n\nFind Predicted Expression with separate Rat Genotypes\n\nconda activate imlabtools \nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files\nexport MODEL=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/models\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/Ac_output_db.db  \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/BLA_NAcc2_PL2.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}\" \\\n--prediction_output Ac_NAcc2__predict.txt  \\\n--prediction_summary_output Ac_NAcc2__summary.txt \\\n--verbosity 9 \\\n--throw\n\nMgmt\n\npred_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/Ac_NAcc2__predict.txt\")\nobs_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/NAcc2.expr.iqn.bed.gz\")\n\nobs_expr &lt;- obs_expr %&gt;% select(-c(`#chr`, start, end)) %&gt;% pivot_longer(!gene_id, names_to = \"FID\", values_to = \"count\") %&gt;% pivot_wider(names_from = gene_id, values_from = count)\n\nMgmt_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000016038\")])\nMgmt_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000016038\")]) \nMgmt_pred$FID = as.character(Mgmt_pred$FID)\n\nMgmt_pred &lt;- Mgmt_pred[match(Mgmt_obs$FID, Mgmt_pred$FID),]\nMgmt_obs &lt;- Mgmt_obs[match(Mgmt_pred$FID, Mgmt_obs$FID ), ]\n\nMgmt_pred$FID = as.character(Mgmt_pred$FID)\nMgmt &lt;- inner_join(Mgmt_pred, Mgmt_obs, by = \"FID\")\n\nPolr3k\n\nPolr3k_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000017843\")])\nPolr3k_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000017843\")]) \nPolr3k_pred$FID = as.character(Polr3k_pred$FID)\n\nPolr3k_pred &lt;- Polr3k_pred[match(Polr3k_obs$FID, Polr3k_pred$FID),]\nPolr3k_obs &lt;- Polr3k_obs[match(Polr3k_pred$FID, Polr3k_obs$FID ), ]\n\nPolr3k_pred$FID = as.character(Polr3k_pred$FID)\nPolr3k &lt;- inner_join(Polr3k_pred, Polr3k_obs, by = \"FID\")\n\nDhfr\n\nDhfr_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000013521\")])\nDhfr_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000013521\")]) \nDhfr_pred$FID = as.character(Dhfr_pred$FID)\n\nDhfr_pred &lt;- Dhfr_pred[match(Dhfr_obs$FID, Dhfr_pred$FID),]\nDhfr_obs &lt;- Dhfr_obs[match(Dhfr_pred$FID, Dhfr_obs$FID ), ]\n\nDhfr_pred$FID = as.character(Dhfr_pred$FID)\nDhfr &lt;- inner_join(Dhfr_pred, Dhfr_obs, by = \"FID\")\n\nPlot pred vs obs expression with our models in NcAcc2 tissue\n\nMgmt &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Mgmt.txt\")\nPolr3k &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Polr3k.txt\")\nDhfr &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Dhfr.txt\")\n\ng1 &lt;- ggplot(Mgmt, aes(pred, obs)) + geom_point() + annotate(\"text\", x = 0.4, y = 2.5, label = \"Mgmt\", size = 10, fontface =\"bold.italic\") + annotate(\"text\", x = 0.53, y = 2, label = \"R2 =  0.724\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")\n\ng2 &lt;- ggplot(Polr3k, aes(pred, obs)) + geom_smooth(size = 1) + geom_point() + ggtitle(\"Polr3k\") + annotate(\"text\", x = -1.8, y = 2, label = \"r2 =  0.796\", size = 3)  + theme(aspect.ratio=1)\n\ng3 &lt;- ggplot(Dhfr, aes(pred, obs))  + geom_point() + annotate(\"text\", x = -0.4, y = 2.5, label = \"Dhfr\", size = 10, fontface =2) + annotate(\"text\", x = -0.25, y = 2, label = \"r2 =  0.554\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\") + coord_cartesian(xlim = c(NA, 1.25)) \n\nCalculate Predicted vs Observed Expression for Mgmt in Humans using GTEx NA predictDB with Geuvadis genotypes (hg38) as well\n\nconda activate imlabtools \nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/Data/1000G/vcf_hg38/geuvadis\nexport MODEL=/gpfs/data/im-lab/nas40t2/Data/PredictDB/GTEx_v8/models_v1/eqtl/elastic_net_models\nexport DATA=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/predixcan\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/en_Brain_Nucleus_accumbens_basal_ganglia.db  \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/ALL.chr*.shapeit2_integrated_v1a.GRCh38.20181129.phased.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}_b38\" \\\n--prediction_output 1000G_NAcc2__predict.txt  \\\n--prediction_summary_output 1000G_NAcc2__summary.txt  \\\n--verbosity 9 \\\n--throw\n\nRPS26 r2= 0.7352744\n\npred_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/1000G_NAcc2__predict.txt\")\nobs_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz\")\n\nobs_expr &lt;- obs_expr %&gt;% select(-c(Chr, Gene_Symbol, Coord)) %&gt;% pivot_longer(!TargetID, names_to = \"FID\", values_to = \"count\") %&gt;% pivot_wider(names_from = TargetID, values_from = count)\ncolnames(obs_expr)[2:ncol(obs_expr)] = sapply(strsplit(colnames(obs_expr)[2:ncol(obs_expr)], \"\\\\.\"), `[`, 1)\n\nRPS26_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSG00000197728.9\")])\nRPS26_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSG00000197728\")]) \n\nRPS26_pred &lt;- RPS26_pred[match(RPS26_obs$FID, RPS26_pred$FID),]\nRPS26_obs &lt;- RPS26_obs[match(RPS26_pred$FID, RPS26_obs$FID ), ]\n\n\nRPS26 &lt;- inner_join(RPS26_pred, RPS26_obs, by = \"FID\")\ncolnames(RPS26) = c(\"FID\", \"pred\", \"obs\")\n\nRPS26_GTEx &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_RPS26.txt\", col_names = TRUE)\nDHFR_GTEx &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_DHFR_results.txt\", col_names = TRUE)\n\n\ng4 &lt;- ggplot(DHFR_GTEx, aes(pred, obs)) + geom_point() + annotate(\"text\", x = -0.45, y = 55, label = \"DHFR\", size = 10, fontface =2) + annotate(\"text\", x = -0.4, y = 51, label = \"r2 =  0.506\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")\n\ng5 &lt;- ggplot(RPS26_GTEx, aes(pred, obs)) + geom_point() + annotate(\"text\", x = -0.5, y = 385, label = \"RPS26\", size = 10, fontface =\"bold.italic\") + annotate(\"text\", x = -0.45, y = 355, label = \"R2 =  0.735\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")"
  },
  {
    "objectID": "posts/Rat_Predictability_comp_Humans.html#script-to-compare-heritability-and-predictability-between-rats-and-humans",
    "href": "posts/Rat_Predictability_comp_Humans.html#script-to-compare-heritability-and-predictability-between-rats-and-humans",
    "title": "Rat_Predictability_comp_Humans",
    "section": "",
    "text": "#Figure comparing pred R2 vs obs R2 in Ac tissue in Rats\nFirst find well expressed genes in Rats\n\nfila &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/models//Ac_output_db.db\"\nsqlite.driver &lt;- dbDriver(\"SQLite\")\nconn &lt;- dbConnect(RSQLite::SQLite(), fila)\ntempo &lt;- dbGetQuery(conn, 'select * from extra')\n\ntempo &lt;- tempo[order(-tempo$R2),]    \n\nFind Predicted Expression with separate Rat Genotypes\n\nconda activate imlabtools \nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files\nexport MODEL=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/models\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/Ac_output_db.db  \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/BLA_NAcc2_PL2.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}\" \\\n--prediction_output Ac_NAcc2__predict.txt  \\\n--prediction_summary_output Ac_NAcc2__summary.txt \\\n--verbosity 9 \\\n--throw\n\nMgmt\n\npred_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/Ac_NAcc2__predict.txt\")\nobs_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/NAcc2.expr.iqn.bed.gz\")\n\nobs_expr &lt;- obs_expr %&gt;% select(-c(`#chr`, start, end)) %&gt;% pivot_longer(!gene_id, names_to = \"FID\", values_to = \"count\") %&gt;% pivot_wider(names_from = gene_id, values_from = count)\n\nMgmt_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000016038\")])\nMgmt_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000016038\")]) \nMgmt_pred$FID = as.character(Mgmt_pred$FID)\n\nMgmt_pred &lt;- Mgmt_pred[match(Mgmt_obs$FID, Mgmt_pred$FID),]\nMgmt_obs &lt;- Mgmt_obs[match(Mgmt_pred$FID, Mgmt_obs$FID ), ]\n\nMgmt_pred$FID = as.character(Mgmt_pred$FID)\nMgmt &lt;- inner_join(Mgmt_pred, Mgmt_obs, by = \"FID\")\n\nPolr3k\n\nPolr3k_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000017843\")])\nPolr3k_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000017843\")]) \nPolr3k_pred$FID = as.character(Polr3k_pred$FID)\n\nPolr3k_pred &lt;- Polr3k_pred[match(Polr3k_obs$FID, Polr3k_pred$FID),]\nPolr3k_obs &lt;- Polr3k_obs[match(Polr3k_pred$FID, Polr3k_obs$FID ), ]\n\nPolr3k_pred$FID = as.character(Polr3k_pred$FID)\nPolr3k &lt;- inner_join(Polr3k_pred, Polr3k_obs, by = \"FID\")\n\nDhfr\n\nDhfr_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSRNOG00000013521\")])\nDhfr_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSRNOG00000013521\")]) \nDhfr_pred$FID = as.character(Dhfr_pred$FID)\n\nDhfr_pred &lt;- Dhfr_pred[match(Dhfr_obs$FID, Dhfr_pred$FID),]\nDhfr_obs &lt;- Dhfr_obs[match(Dhfr_pred$FID, Dhfr_obs$FID ), ]\n\nDhfr_pred$FID = as.character(Dhfr_pred$FID)\nDhfr &lt;- inner_join(Dhfr_pred, Dhfr_obs, by = \"FID\")\n\nPlot pred vs obs expression with our models in NcAcc2 tissue\n\nMgmt &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Mgmt.txt\")\nPolr3k &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Polr3k.txt\")\nDhfr &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/model_perf_Dhfr.txt\")\n\ng1 &lt;- ggplot(Mgmt, aes(pred, obs)) + geom_point() + annotate(\"text\", x = 0.4, y = 2.5, label = \"Mgmt\", size = 10, fontface =\"bold.italic\") + annotate(\"text\", x = 0.53, y = 2, label = \"R2 =  0.724\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")\n\ng2 &lt;- ggplot(Polr3k, aes(pred, obs)) + geom_smooth(size = 1) + geom_point() + ggtitle(\"Polr3k\") + annotate(\"text\", x = -1.8, y = 2, label = \"r2 =  0.796\", size = 3)  + theme(aspect.ratio=1)\n\ng3 &lt;- ggplot(Dhfr, aes(pred, obs))  + geom_point() + annotate(\"text\", x = -0.4, y = 2.5, label = \"Dhfr\", size = 10, fontface =2) + annotate(\"text\", x = -0.25, y = 2, label = \"r2 =  0.554\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\") + coord_cartesian(xlim = c(NA, 1.25)) \n\nCalculate Predicted vs Observed Expression for Mgmt in Humans using GTEx NA predictDB with Geuvadis genotypes (hg38) as well\n\nconda activate imlabtools \nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/Data/1000G/vcf_hg38/geuvadis\nexport MODEL=/gpfs/data/im-lab/nas40t2/Data/PredictDB/GTEx_v8/models_v1/eqtl/elastic_net_models\nexport DATA=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/predixcan\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/en_Brain_Nucleus_accumbens_basal_ganglia.db  \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/ALL.chr*.shapeit2_integrated_v1a.GRCh38.20181129.phased.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}_b38\" \\\n--prediction_output 1000G_NAcc2__predict.txt  \\\n--prediction_summary_output 1000G_NAcc2__summary.txt  \\\n--verbosity 9 \\\n--throw\n\nRPS26 r2= 0.7352744\n\npred_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/1000G_NAcc2__predict.txt\")\nobs_expr &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz\")\n\nobs_expr &lt;- obs_expr %&gt;% select(-c(Chr, Gene_Symbol, Coord)) %&gt;% pivot_longer(!TargetID, names_to = \"FID\", values_to = \"count\") %&gt;% pivot_wider(names_from = TargetID, values_from = count)\ncolnames(obs_expr)[2:ncol(obs_expr)] = sapply(strsplit(colnames(obs_expr)[2:ncol(obs_expr)], \"\\\\.\"), `[`, 1)\n\nRPS26_pred &lt;- as.data.frame(pred_expr[, c(\"FID\", \"ENSG00000197728.9\")])\nRPS26_obs &lt;- as.data.frame(obs_expr[,  c(\"FID\", \"ENSG00000197728\")]) \n\nRPS26_pred &lt;- RPS26_pred[match(RPS26_obs$FID, RPS26_pred$FID),]\nRPS26_obs &lt;- RPS26_obs[match(RPS26_pred$FID, RPS26_obs$FID ), ]\n\n\nRPS26 &lt;- inner_join(RPS26_pred, RPS26_obs, by = \"FID\")\ncolnames(RPS26) = c(\"FID\", \"pred\", \"obs\")\n\nRPS26_GTEx &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_RPS26.txt\", col_names = TRUE)\nDHFR_GTEx &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_DHFR_results.txt\", col_names = TRUE)\n\n\ng4 &lt;- ggplot(DHFR_GTEx, aes(pred, obs)) + geom_point() + annotate(\"text\", x = -0.45, y = 55, label = \"DHFR\", size = 10, fontface =2) + annotate(\"text\", x = -0.4, y = 51, label = \"r2 =  0.506\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")\n\ng5 &lt;- ggplot(RPS26_GTEx, aes(pred, obs)) + geom_point() + annotate(\"text\", x = -0.5, y = 385, label = \"RPS26\", size = 10, fontface =\"bold.italic\") + annotate(\"text\", x = -0.45, y = 355, label = \"R2 =  0.735\", size = 8) + theme(aspect.ratio=1) + xlab(\"Predicted expression\") + ylab(\"Observed Expression\")"
  },
  {
    "objectID": "posts/05.PhenomeXcan_MutliXcan.html",
    "href": "posts/05.PhenomeXcan_MutliXcan.html",
    "title": "PhenomeXcan Query",
    "section": "",
    "text": "suppressPackageStartupMessages(source(data.dir %&% \"helpers.R\", chdir = TRUE))\nphenomexcan_con &lt;- get_db()\ndbListTables(phenomexcan_con)"
  },
  {
    "objectID": "posts/05.PhenomeXcan_MutliXcan.html#query-phenomexcan-association-with-top-phenotypes-for-list-of-genes",
    "href": "posts/05.PhenomeXcan_MutliXcan.html#query-phenomexcan-association-with-top-phenotypes-for-list-of-genes",
    "title": "PhenomeXcan Query",
    "section": "query PhenomeXcan association with top phenotypes for list of genes",
    "text": "query PhenomeXcan association with top phenotypes for list of genes\n\ninput = list()\ninput$pheno = c(\"Obesity\")\ninput$limit = 30000\nobesity_genes &lt;-  suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Body fat percentage\")\ninput$limit = 30000\nbody_fat_genes &lt;- suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Body mass index (BMI) (21001_raw)\")\ninput$limit = 30000\nBMI_genes &lt;- suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Fasting Glucose\")\ninput$limit = 30000\nglucose_genes &lt;- suppressMessages(get_results_from_data_db(input))\n\n\ninput = list()\ninput$pheno = c(\"Height\")\ninput$limit = 30000\nheight_genes &lt;- suppressMessages(get_results_from_data_db(input))\n\nGenerate a table of all human MultiXcan results\n\n#matrix - humans (rows are genes and columns are traits (fat, BMI, Obesity))\nlistphenos &lt;- list(BMI_genes, body_fat_genes, obesity_genes, glucose_genes, height_genes)\npheno_Multi_humans &lt;- data_frame(gene_name = as.character())\n\nfor(l in listphenos) {\n  trait &lt;- l$phenotype[1]\n  tempo &lt;- l %&gt;% dplyr::select(c(gene_name, pvalue))\n  colnames(tempo)[2] = paste(\"pvalue\", trait, sep=\"_\")\n  pheno_Multi_humans &lt;- full_join(pheno_Multi_humans, tempo, by = \"gene_name\")\n}\n\n\nhuman_genes &lt;- as.data.frame(pheno_Multi_humans$gene_name)\n\n#pheno_humans &lt;- as.matrix(pheno_humans %&gt;% dplyr::select(-c(gene_name)))\n\n\nhuman = useEnsembl(biomart='ensembl', dataset=\"hsapiens_gene_ensembl\", mirror = \"uswest\")\n#human = useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\", mirror = \"uswest\")\nattributes &lt;- listAttributes(human)\n\nattributes = c(\"ensembl_gene_id\", \"external_gene_name\", \"rnorvegicus_homolog_ensembl_gene\", \"rnorvegicus_homolog_associated_gene_name\")\north.rats = getBM(attributes, filters=\"with_rnorvegicus_homolog\",values=TRUE, mart = human, uniqueRows=TRUE)\n\nhuman_genes &lt;- human_genes %&gt;% dplyr::rename(external_gene_name = `pheno_Multi_humans$gene_name`)\nhuman_genes &lt;- inner_join(human_genes, orth.rats, by = \"external_gene_name\") %&gt;% dplyr::select(c(external_gene_name, rnorvegicus_homolog_associated_gene_name))\n\nGenerate a table of all rat MultiXcan results\n\nfilelist &lt;- list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/MultiXcan/results\", pattern = \"assoc.txt\",full.names = TRUE)\n\npheno_Multi_rat&lt;- data_frame(gene = as.character())\nfor(fila in filelist) {\n  trait &lt;- substr(fila, 66, str_length(fila)-18)\n  tempo &lt;- fread(fila) %&gt;% select(c(gene, pvalue))\n  colnames(tempo)[2] = paste(\"pvalue\", trait, sep=\".\")\n  pheno_Multi_rat&lt;- full_join(pheno_Multi_rat, tempo, by = \"gene\")\n}\n\n#pheno_Multi_rat &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/rat_metabolic_MultiXcan_pval_assoc.txt\", col_names = TRUE)\n\npheno_Multi_rat &lt;- pheno_Multi_rat %&gt;% mutate(gene_name = orth.rats[match(pheno_Multi_rat$gene, orth.rats$rnorvegicus_homolog_ensembl_gene),2]$external_gene_name)"
  },
  {
    "objectID": "posts/Coregualtion_across_Tissues_Species.html",
    "href": "posts/Coregualtion_across_Tissues_Species.html",
    "title": "Coregulation_across_Tissues_Species",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(Hmisc)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndir &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/\"\nset.seed(777)\n\n\nCorrelation between genes within each tissue and then calculate correlation of the correlation between genes across tissues\n\n\nfilelist &lt;- list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/metabolic_traits\", pattern = \"predict.txt\", full.names = TRUE)\north.rats &lt;- read_tsv(dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\nGenerate Correlation Matrices for 100 rats - compare predicted Expression across tissues\n\nnames &lt;- read_tsv(filelist[1]) %&gt;% select(c(FID))\n\nfor(i in 1:100) {\n  id = sample(names$FID, size = 1)\n  tempo &lt;- data.frame(gene = as.character())\n  for(fila in filelist) {\n    name &lt;- substr(fila, 89,90)\n    tis &lt;- fread(fila) %&gt;% filter(FID == id) %&gt;% pivot_longer(!c(FID, IID), names_to = \"gene\", values_to = name) %&gt;% select(-c(FID, IID))\n    tempo &lt;- full_join(tempo, tis,  by = \"gene\")\n  } \n  tempo &lt;- tempo %&gt;% mutate(var = apply(tempo[,-1], 1, var)) %&gt;% na.omit()\n  saveRDS(tempo, dir %&% \"prediXcan/GREx_comp/cor_tis_per_ind/\" %&% id %&% \".GREx.mat.RDS\")\n}\n\nCheck heatmap of some individuals\n\ni1 &lt;- readRDS(\"/Users/natashasanthanam/Downloads/00077E6712.cor.mat.RDS\")\ni2 &lt;- readRDS(\"/Users/natashasanthanam/Downloads/00077E7788.cor.mat.RDS\")\n\nmelted_i1 &lt;- melt(i1, na.rm = TRUE)\nmelted_i2 &lt;- melt(i2, na.rm = TRUE)\n\np1= ggplot(data = melted_i1, aes(x=Var1, y=Var2, fill=value)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(),) + ggtitle(\"00077E6712\") + theme(aspect.ratio = 1)\np2= ggplot(data = melted_i2, aes(x=Var1, y=Var2, fill=value)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(),) + ggtitle(\"00077E7788\") + theme(aspect.ratio = 1)\n\nggarrange(p1, p2, ncol=2)\n\nLook at all genes across tissues in one individual Evidence of shared regulation across tissues\n\ni3 = readRDS(\"/Users/natashasanthanam/Downloads/00077E83E3.GREx.mat.RDS\") %&gt;% dplyr::select(-c(gene, var))\npairs(i3)\n\n\nCo-regulation Shared Across Species\n\n\ngene_ids &lt;- data.frame(id = fread(filelist[1]) %&gt;% select(-c(FID, IID)) %&gt;%  colnames()\nfor(fila in filelist[2:length(filelist)]) {\n  df &lt;- data.frame(id = fread(fila) %&gt;% select(-c(FID, IID)) %&gt;%  colnames())\n  gene_ids &lt;- inner_join(gene_ids, df, by = \"id\")\n}\n\n\ngtf &lt;- fread(dir %&% \"Box_files/gtf.txt\", header = TRUE)\ngtf &lt;-  gtf[match(tempo$id, gtf$Gene),]\n \nfor(i in 1:20) {\n  tempo &lt;- gtf %&gt;% filter(Chr == i) %&gt;% select(c(Gene))\n  if(nrow(tempo) == 0 ) {\n  i = i+1  \n  }\n  else {\n  df &lt;- data.frame(row = as.character(), column = as.character())\n  for(fila in filelist) {\n    tis &lt;- substr(fila, 58,59)\n    expr &lt;- as.data.frame(fread(fila) %&gt;% select(-c(FID, IID)))\n    expr &lt;- expr[,intersect(tempo$Gene, colnames(expr))]\n    res2&lt;-rcorr(as.matrix(expr[,]))\n  d2 &lt;- flattenCorrMatrix(res2$r, res2$P)\n    colnames(d2)[3] = tis\n    colnames(d2)[4] = paste(\"p\", tis, sep = \"_\")\n    df &lt;- full_join(df, d2, by = c(\"row\", \"column\"))\n  }\n  saveRDS(df, dir %&% \"prediXcan/GREx_comp/cor_genes_per_chr/chr\" %&% i %&% \".RDS\" )\n  }\n}\n\nSave correlation of coregulation across tissues\n\ncoreg.dir &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/cor_genes_per_chr\"\nfilelist &lt;- list.files(coreg.dir, pattern = \".RDS\", full.names = TRUE)\n\nfor(fila in filelist) {\n  tempo &lt;- readRDS(fila) %&gt;% select(c(row, column, Ac, Il, Pl, Lh, Vo)) %&gt;%\n  i &lt;- substr(fila, 89, str_length(fila)- 4)\n  cor.mat &lt;-  cor(tempo[,3:7])\n  saveRDS(cor.mat, dir %&% \"prediXcan/GREx_comp/cor_genes_per_chr/cor_coreg_chr\" %&% i %&% \".RDS\")\n}\n\nGraph of Correlation of Coregulation across tissues\n\ndata.dir &lt;- \"/Users/natashasanthanam/CRI/\"\nfilelist &lt;- list.files(data.dir, pattern=\"cor_coreg\", full.names = TRUE)\ncorr_coreg &lt;- list()\n\nfor(fila in filelist) {\n  i &lt;- match(fila, filelist)\n  corr_coreg[[i]] &lt;- readRDS(fila)\n}\n\nGenerate Coregulation in Humans (GTEx)\nFirst generate predicted expression in G1000 using GTEx models\n\nconda activate imlabtools\nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/Data/dbGaP/Transcriptome/G1000/imputed_hrc1.1\nexport MODEL=/gpfs/data/im-lab/nas40t2/Data/PredictDB/GTEx_v8/models_v1/eqtl/ctimp\nexport RESULTS=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/PTRS_weights/PGP\nexport DATA=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/predixcan\n\nprintf \"Predict expression\\n\\n\"\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/ctimp_$TISSUE.db \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/chr*.dose.vcf.gz  \\\n--vcf_mode genotyped \\\n--liftover $DATA/hg19ToHg38.over.chain.gz  \\\n--on_the_fly_mapping METADATA \"chr{}_{}_{}_{}_b38\" \\\n--prediction_output $RESULTS/G1000__$TISSUE.predict.txt \\\n--prediction_summary_output $RESULTS/G1000__$TISSUE.summary.txt \\\n--verbosity 9 \\\n--throw\n\nTISSUE=Brain_Cerebellum\n\n\nflattenCorrMatrix &lt;- function(cormat, pmat) {\n  ut &lt;- upper.tri(cormat)\n  data.frame(\n    row = rownames(cormat)[row(cormat)[ut]],\n    column = rownames(cormat)[col(cormat)[ut]],\n    cor  =(cormat)[ut],\n    p = pmat[ut]\n    )\n}\n\nCalculate Coregulation between genes in GTEx\n\ngtf &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/annotations_gencode_v26.tsv\", header = TRUE)\n\n for(i in 1:20) {\n  tempo &lt;- gtf %&gt;% filter(chromosome == paste(\"chr\", i, sep=\"\")) %&gt;% select(c(gene_id))\n  expr &lt;- as.data.frame( fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/G1000_less_mem__Brain_Cerebellum.predict.txt\")) %&gt;% select(-c(FID, IID)) \n colnames(expr) = sapply(strsplit(colnames(expr), \"\\\\.\"), `[`, 1)\n    expr &lt;- expr[, intersect(tempo$gene_id, colnames(expr))]\n   res2&lt;-rcorr(as.matrix(expr[,]))\n  d2 &lt;- flattenCorrMatrix(res2$r, res2$P)\nsaveRDS(d2, dir %&% \"prediXcan/GREx_comp/cor_GTEx_genes_per_chr/GTEx_chr\" %&% i %&% \".RDS\" )\n }\n\n#Can also calculate correlation between genes in GTEx for all genes\nexpr &lt;- as.data.frame( fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/G1000_less_mem__Brain_Cerebellum.predict.txt\")) %&gt;% select(-c(FID, IID)) \n colnames(expr) = sapply(strsplit(colnames(expr), \"\\\\.\"), `[`, 1)\n res2&lt;-rcorr(as.matrix(expr[,]))\n  d2 &lt;- flattenCorrMatrix(res2$r, res2$P)\n\nCheck if Coregualtion is preserved across species\nPlot Coregulation across species\n\np.dir &lt;- \"/Users/natashasanthanam/CRI/\"\nfilelist &lt;- list.files(p.dir, pattern = \"all\", full.names = TRUE)\n\nfor(fila in filelist) {\n  df &lt;- readRDS(fila)\n  pairs(df)\n}\n\nHeatmap ordered with TSS\n\nonly_GTEx &lt;- readRDS(\"/Users/natashasanthanam/Downloads/cor_pred_expr_GTEx_all_genes.RDS\") %&gt;% select(-c(p)) %&gt;% mutate(start = gtf[match(only_GTEx$row, gtf$gene_id), 5]$start) %&gt;% distinct(row, column, .keep_all = TRUE)\n\nGTEx_ordered &lt;- only_GTEx[sort(only_GTEx$start),]\n\nGTEx_chr2_genes &lt;- only_GTEx[na.omit(match(gtf$gene_id, only_GTEx$row)), ]\n\np3= ggplot(data = GTEx_ordered, aes(x=row, y=column, fill=cor)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(), axis.text = element_text(size = 2)) + ggtitle(\"Heatmap for predicted expression in GTEx Cerebellum\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rat_QC_Merging.html",
    "href": "posts/Rat_QC_Merging.html",
    "title": "Rat QC and Comparison Check",
    "section": "",
    "text": "Apurva sent bimbam files that I converted to map/ped and then bim/bed/fam files using my own pipeline. Pipeline is in rat_compare_genotypes_metabolic.Rmd file."
  },
  {
    "objectID": "posts/Rat_QC_Merging.html#compare-the-overlap-of-rats-between-the-original-80-and-new-ones-sent-by-apurva",
    "href": "posts/Rat_QC_Merging.html#compare-the-overlap-of-rats-between-the-original-80-and-new-ones-sent-by-apurva",
    "title": "Rat QC and Comparison Check",
    "section": "",
    "text": "Apurva sent bimbam files that I converted to map/ped and then bim/bed/fam files using my own pipeline. Pipeline is in rat_compare_genotypes_metabolic.Rmd file."
  },
  {
    "objectID": "posts/01.Heritability_Sparsity_SM.html",
    "href": "posts/01.Heritability_Sparsity_SM.html",
    "title": "01.Heritability_Sparsity Sabrina",
    "section": "",
    "text": "ge.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\n\n\n\n\nFor each gene, we calculate heritability from its local GRM. Start with creating list of genes for each of the gene expression file:\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\nensidlist &lt;- gexAc$EnsemblGeneID\nensidlist_Il &lt;- gexIl$EnsemblGeneID\nensidlist_Lh &lt;- gexLh$EnsemblGeneID\nensidlist_Pl &lt;- gexPl$EnsemblGeneID\nensidlist_Vo &lt;- gexVo$EnsemblGeneID\n\n\n# Read in bim files for each tissue\nbimfile &lt;- ge.dir %&% \"rat_genome_Ac.bim\" ###get SNP position information###\nbimfile_Lh &lt;- ge.dir %&% \"rat_genome_Lh.bim\"\nbimfile_Il &lt;- ge.dir %&% \"rat_genome_Il.bim\"\nbimfile_Pl &lt;- ge.dir %&% \"rat_genome_Pl.bim\"\nbimfile_Vo &lt;- ge.dir %&% \"rat_genome_Vo.bim\"\n\nbim &lt;- read.table(bimfile)\nbim_Lh &lt;- read.table(bimfile_Lh)\nbim_Il &lt;- read.table(bimfile_Il)\nbim_Pl &lt;- read.table(bimfile_Pl)\nbim_Vo &lt;- read.table(bimfile_Vo)\n\nrownames(bim) &lt;- bim$V2\nrownames(bim_Lh) &lt;- bim_Lh$V2\nrownames(bim_Il) &lt;- bim_Il$V2\nrownames(bim_Pl) &lt;- bim_Pl$V2\nrownames(bim_Vo) &lt;- bim_Vo$V2\n\nWe run gcta Ac plink files and gene annotation to generate local GRMs, then h2 calculations.\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Ac/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene &lt;- ensidlist[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim,bim[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Ac.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Ac --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Ac.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist)){\n    cat(i,\"of\",length(ensidlist),\"\\n\")\n    ensid &lt;- ensidlist[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexAc)[c(-1)]\n  expression &lt;- as.character(gexAc[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nRepeat for Il:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Il/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"/\",length(ensidlist_Il),\"\\n\")\n    gene &lt;- ensidlist_Il[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Il,bim_Il[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Il.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Il --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Il.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"of\",length(ensidlist_Il),\"\\n\")\n    ensid &lt;- ensidlist_Il[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexIl)[c(-1)]\n  expression &lt;- as.character(gexIl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nLh:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Lh/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"/\",length(ensidlist_Lh),\"\\n\")\n    gene &lt;- ensidlist_Lh[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Lh,bim_Lh[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Lh.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Lh --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Lh.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"of\",length(ensidlist_Lh),\"\\n\")\n    ensid &lt;- ensidlist_Lh[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexLh)[c(-1)]\n  expression &lt;- as.character(gexLh[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nPl:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Pl/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"/\",length(ensidlist_Pl),\"\\n\")\n    gene &lt;- ensidlist_Pl[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Pl,bim_Pl[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Pl.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Pl --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Pl.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"of\",length(ensidlist_Pl),\"\\n\")\n    ensid &lt;- ensidlist_Pl[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexPl)[c(-1)]\n  expression &lt;- as.character(gexPl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nVo\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Vo/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"/\",length(ensidlist_Vo),\"\\n\")\n    gene &lt;- ensidlist_Vo[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Vo,bim_Vo[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Vo.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Vo --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Vo.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"of\",length(ensidlist_Vo),\"\\n\")\n    ensid &lt;- ensidlist_Vo[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexVo)[c(-1)]\n  expression &lt;- as.character(gexVo[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}"
  },
  {
    "objectID": "posts/01.Heritability_Sparsity_SM.html#definitions",
    "href": "posts/01.Heritability_Sparsity_SM.html#definitions",
    "title": "01.Heritability_Sparsity Sabrina",
    "section": "",
    "text": "ge.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")"
  },
  {
    "objectID": "posts/01.Heritability_Sparsity_SM.html#calculate-cis-heritability-within-1mb",
    "href": "posts/01.Heritability_Sparsity_SM.html#calculate-cis-heritability-within-1mb",
    "title": "01.Heritability_Sparsity Sabrina",
    "section": "",
    "text": "For each gene, we calculate heritability from its local GRM. Start with creating list of genes for each of the gene expression file:\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\nensidlist &lt;- gexAc$EnsemblGeneID\nensidlist_Il &lt;- gexIl$EnsemblGeneID\nensidlist_Lh &lt;- gexLh$EnsemblGeneID\nensidlist_Pl &lt;- gexPl$EnsemblGeneID\nensidlist_Vo &lt;- gexVo$EnsemblGeneID\n\n\n# Read in bim files for each tissue\nbimfile &lt;- ge.dir %&% \"rat_genome_Ac.bim\" ###get SNP position information###\nbimfile_Lh &lt;- ge.dir %&% \"rat_genome_Lh.bim\"\nbimfile_Il &lt;- ge.dir %&% \"rat_genome_Il.bim\"\nbimfile_Pl &lt;- ge.dir %&% \"rat_genome_Pl.bim\"\nbimfile_Vo &lt;- ge.dir %&% \"rat_genome_Vo.bim\"\n\nbim &lt;- read.table(bimfile)\nbim_Lh &lt;- read.table(bimfile_Lh)\nbim_Il &lt;- read.table(bimfile_Il)\nbim_Pl &lt;- read.table(bimfile_Pl)\nbim_Vo &lt;- read.table(bimfile_Vo)\n\nrownames(bim) &lt;- bim$V2\nrownames(bim_Lh) &lt;- bim_Lh$V2\nrownames(bim_Il) &lt;- bim_Il$V2\nrownames(bim_Pl) &lt;- bim_Pl$V2\nrownames(bim_Vo) &lt;- bim_Vo$V2\n\nWe run gcta Ac plink files and gene annotation to generate local GRMs, then h2 calculations.\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Ac/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene &lt;- ensidlist[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim,bim[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Ac.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Ac --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Ac.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist)){\n    cat(i,\"of\",length(ensidlist),\"\\n\")\n    ensid &lt;- ensidlist[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexAc)[c(-1)]\n  expression &lt;- as.character(gexAc[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nRepeat for Il:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Il/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"/\",length(ensidlist_Il),\"\\n\")\n    gene &lt;- ensidlist_Il[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Il,bim_Il[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Il.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Il --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Il.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"of\",length(ensidlist_Il),\"\\n\")\n    ensid &lt;- ensidlist_Il[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexIl)[c(-1)]\n  expression &lt;- as.character(gexIl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nLh:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Lh/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"/\",length(ensidlist_Lh),\"\\n\")\n    gene &lt;- ensidlist_Lh[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Lh,bim_Lh[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Lh.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Lh --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Lh.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"of\",length(ensidlist_Lh),\"\\n\")\n    ensid &lt;- ensidlist_Lh[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexLh)[c(-1)]\n  expression &lt;- as.character(gexLh[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nPl:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Pl/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"/\",length(ensidlist_Pl),\"\\n\")\n    gene &lt;- ensidlist_Pl[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Pl,bim_Pl[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Pl.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Pl --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Pl.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"of\",length(ensidlist_Pl),\"\\n\")\n    ensid &lt;- ensidlist_Pl[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexPl)[c(-1)]\n  expression &lt;- as.character(gexPl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nVo\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Vo/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"/\",length(ensidlist_Vo),\"\\n\")\n    gene &lt;- ensidlist_Vo[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Vo,bim_Vo[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Vo.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Vo --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Vo.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"of\",length(ensidlist_Vo),\"\\n\")\n    ensid &lt;- ensidlist_Vo[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexVo)[c(-1)]\n  expression &lt;- as.character(gexVo[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}"
  },
  {
    "objectID": "posts/07.SPTRS_Creation.html",
    "href": "posts/07.SPTRS_Creation.html",
    "title": "07 SPTRS_Creation",
    "section": "",
    "text": "Set up the conda environment\n\nconda env create -f environment.yml\n\n# to activate: conda activate SPrediXcan2PTRS"
  },
  {
    "objectID": "posts/07.SPTRS_Creation.html#script-to-run-lassosum-ptrs-summary-statistics-ptrs-on-gtex-data-for-height",
    "href": "posts/07.SPTRS_Creation.html#script-to-run-lassosum-ptrs-summary-statistics-ptrs-on-gtex-data-for-height",
    "title": "07 SPTRS_Creation",
    "section": "",
    "text": "Set up the conda environment\n\nconda env create -f environment.yml\n\n# to activate: conda activate SPrediXcan2PTRS"
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html",
    "href": "posts/generate_plink_format_genotypes.html",
    "title": "Generate_plink_format_genotypes",
    "section": "",
    "text": "library(workflowr)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(readxl)\n\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\""
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#definitions",
    "href": "posts/generate_plink_format_genotypes.html#definitions",
    "title": "Generate_plink_format_genotypes",
    "section": "",
    "text": "library(workflowr)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(readxl)\n\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\""
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#generating-raw-genotype-files-from-tysons-original-analysis",
    "href": "posts/generate_plink_format_genotypes.html#generating-raw-genotype-files-from-tysons-original-analysis",
    "title": "Generate_plink_format_genotypes",
    "section": "Generating Raw Genotype files from Tyson’s original analysis",
    "text": "Generating Raw Genotype files from Tyson’s original analysis\nData from here - genoGex.Rdata has everything we need in it There are 5 ‘gex’ RDS files which are the gene expressions for the 5 different tissues, the ‘gtf’ is the gene annotation, ‘phyMap’ is the snp annotation, and ‘geno’ is the genotype matrix\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\n\nn = gexAc$EnsemblGeneID\ngexAc_transpose &lt;- as.data.frame(t(gexAc[,-1]))\ncolnames(gexAc_transpose) &lt;- n\n\nn = gexIl$EnsemblGeneID\ngexIl_transpose &lt;- as.data.frame(t(gexIl[,-1]))\ncolnames(gexIl_transpose) &lt;- n\n\nn = gexLh$EnsemblGeneID\ngexLh_transpose &lt;- as.data.frame(t(gexLh[,-1]))\ncolnames(gexLh_transpose) &lt;- n\n\nn = gexPl$EnsemblGeneID\ngexPl_transpose &lt;- as.data.frame(t(gexPl[,-1]))\ncolnames(gexPl_transpose) &lt;- n\n\nn = gexVo$EnsemblGeneID\ngexVo_transpose &lt;- as.data.frame(t(gexVo[,-1]))\ncolnames(gexVo_transpose) &lt;- n\n\n\ninvnorm = function(x) {\n  if(is.null(dim(x))) res = invnorm.vector(x) else\n  res=apply(x,2,invnorm.vector)\n  res\n}\ninvnorm.vector = function(x) {yy = rank(x)/(length(x)+1); qnorm(yy)}\n\n\ngexAc_transpose = invnorm(gexAc_transpose)\n\ngexIl_transpose = invnorm(gexIl_transpose)\n\ngexLh_transpose = invnorm(gexLh_transpose)\n\ngexPl_transpose = invnorm(gexPl_transpose)\n\ngexVo_transpose = invnorm(gexVo_transpose)\n\nWe first transposed each gene expression file as a matrix with individuals as the columns and genes for the rows. Now we add gene annotations.\n\ngtf$gene_type = sub(\".*?gene_biotype(.*?);.*\", \"\\\\1\", gtf$Attr)\ngtf$gene_name = sub(\".*?gene_name(.*?);.*\", \"\\\\1\", gtf$Attr)\n\ngene_annotation = subset(gtf, select = -c(Source, Feature, Score, Strand, Attr, Frame) )\ngene_annotation = gene_annotation[, c(\"Chr\",\"Gene\", \"gene_name\", \"Start\", \"End\", \"gene_type\" )]\ncolnames(gene_annotation) = c(\"chr\", \"gene_id\", \"gene_name\", \"start\", \"end\")\nrownames(gene_annotation) = gene_annotation$gene_id\n\nphyMap &lt;- within(phyMap,  varID &lt;- paste(Chr, Pos, Ref, Alt, sep=\"_\"))\nrownames(phyMap) = phyMap$varID\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", 'varID', \"rsid\")\n\nNext, we subset genotype files to the rats with gene expression data from respective tissues.\n\nrownames(geno) = rownames(phyMap)\n#write.table(geno, file = \"./data/genotype.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n\n\ngeno_Ac = geno[,match(rownames(gexAc_transpose), colnames(geno))]\ngeno_Il = geno[,match(rownames(gexIl_transpose), colnames(geno))]\ngeno_Lh = geno[,match(rownames(gexLh_transpose), colnames(geno))]\ngeno_Pl = geno[,match(rownames(gexPl_transpose), colnames(geno))]\ngeno_Vo = geno[,match(rownames(gexVo_transpose), colnames(geno))]\n\n\nwrite.table(geno_Ac, file = wd %&% \"genotype_Ac.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Il, file = wd %&% \"genotype_Il.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Lh, file = wd %&% \"genotype_Lh.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Pl, file = wd %&% \"genotype_Pl.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Vo, file = wd %&% \"genotype_Vo.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)"
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#generating-mapped-files-for-plink",
    "href": "posts/generate_plink_format_genotypes.html#generating-mapped-files-for-plink",
    "title": "Generate_plink_format_genotypes",
    "section": "Generating MAP/PED files for plink",
    "text": "Generating MAP/PED files for plink\nMAP\n\nnIndividuals_Ac &lt;- ncol(geno_Ac)\nnSNPs_Ac &lt;- nrow(geno_Ac)\n\nMAP &lt;- phyMap %&gt;% rename( SNP = rsid, CHR = chr, BP = pos) %&gt;% mutate(CM = 0) %&gt;% select(c(CHR, SNP, CM, BP))\nwrite_tsv(MAP, wd %&% \"rat_genotype.map\", col_names = FALSE)\n\nPED\n\nPED6 &lt;- data.frame(\n  FID = colnames(geno_Ac),\n  IID = colnames(geno_Ac),\n  FatherID = 0,\n  MotherID = 0,\n  Sex = 1,\n  Phenotype = 1)\n\n# convert 0,1,2 to genotypes, a bit tricky\n# make helper dataframe for matching alleles\nmyAlleles &lt;- data.frame(\n  AA = paste(phyMap$refAllele,phyMap$refAllele),\n  AB = paste(phyMap$refAllele, phyMap$effectAllele),\n  BB = paste(phyMap$effectAllele,phyMap$effectAllele) )\n   \nPEDsnps &lt;- geno_Ac[,] + 1\n\nPEDsnpsAB &lt;- \n  sapply(seq(nSNPs_Ac), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\n\nPED &lt;- cbind(PED6, PEDsnpsAB)\n\nwrite_tsv(PED, wd %&% \"rat_genotype.ped\",col_names = FALSE)\n\nRepeat for other tissues ~ only need to change the rows\n\nPED_Il &lt;- data.frame(FID = colnames(geno_Il), IID = colnames(geno_Il), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Lh &lt;- data.frame(FID = colnames(geno_Lh), IID = colnames(geno_Lh), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Pl &lt;- data.frame(FID = colnames(geno_Pl), IID = colnames(geno_Pl), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Vo &lt;- data.frame(FID = colnames(geno_Vo), IID = colnames(geno_Vo), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\n\nPEDsnps &lt;- geno_Il[,] + 1\nPEDsnpsAB &lt;- \n  sapply(seq(nrow(geno_Il)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED &lt;- cbind(PED_Il, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Il.ped\",col_names = FALSE)\n\nPEDsnps &lt;- geno_Lh[,] + 1\nPEDsnpsAB &lt;- \n  sapply(seq(nrow(geno_Lh)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED &lt;- cbind(PED_Lh, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Lh.ped\",col_names = FALSE)\n\nPEDsnps &lt;- geno_Pl[,] + 1\nPEDsnpsAB &lt;- \n  sapply(seq(nrow(geno_Pl)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED &lt;- cbind(PED_Pl, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Pl.ped\",col_names = FALSE)\n\nPEDsnps &lt;- geno_Vo[,] + 1\nPEDsnpsAB &lt;- \n  sapply(seq(nrow(geno_Vo)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED &lt;- cbind(PED_Vo, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Vo.ped\",col_names = FALSE)\n\nGenerating Phenotype file ~ We’re using gene expression levels\n\npheno_Ac &lt;- as.data.frame(cbind(FID = rownames(gexAc_transpose), IID = rownames(gexAc_transpose), gexAc_transpose))\npheno_Il &lt;- as.data.frame(cbind(FID = rownames(gexIl_transpose), IID = rownames(gexIl_transpose), gexIl_transpose))\npheno_Lh &lt;- as.data.frame(cbind(FID = rownames(gexLh_transpose), IID = rownames(gexLh_transpose), gexLh_transpose))\npheno_Pl &lt;- as.data.frame(cbind(FID = rownames(gexPl_transpose), IID = rownames(gexPl_transpose), gexPl_transpose))\npheno_Vo &lt;- as.data.frame(cbind(FID = rownames(gexVo_transpose), IID = rownames(gexVo_transpose), gexVo_transpose))\n\n\nwrite_tsv(pheno_Ac, wd %&% \"phenotype_files/rat_pheno_Ac.txt\", col_names = FALSE)\nwrite_tsv(pheno_Il, wd %&% \"phenotype_files/rat_pheno_Il.txt\", col_names = FALSE)\nwrite_tsv(pheno_Lh, wd %&% \"phenotype_files/rat_pheno_Lh.txt\", col_names = FALSE)\nwrite_tsv(pheno_Pl, wd %&% \"phenotype_files/rat_pheno_Pl.txt\", col_names = FALSE)\nwrite_tsv(pheno_Vo, wd %&% \"phenotype_files/rat_pheno_Vo.txt\", col_names = FALSE)"
  },
  {
    "objectID": "posts/generate_plink_format_genotypes.html#convert-mapped-files-to-plink",
    "href": "posts/generate_plink_format_genotypes.html#convert-mapped-files-to-plink",
    "title": "Generate_plink_format_genotypes",
    "section": "Convert MAP/PED files to plink",
    "text": "Convert MAP/PED files to plink\nAll conversion to plink format use the same MAP file, but because of plink conventions, the MAP file must match the name of the PED file, so we rename the map file each time we convert genotypes for a different tissue.\n\ncd /gpfs/data/im-lab/nas40t2/sabrina/Rat_Genomics_Paper_Pipeline/data\n\nplink --file rat_genotype --make-bed --out plink_files/rat_genome_Ac\n\nmv rat_genotype.map rat_genotype_Il.map\nplink --file rat_genotype_Il --make-bed --out plink_files/rat_genome_Il\n\nmv rat_genotype_Il.map rat_genotype_Lh.map\nplink --file rat_genotype_Lh --make-bed --out plink_files/rat_genome_Lh\n\nmv rat_genotype_Lh.map rat_genotype_Pl.map\nplink --file rat_genotype_Pl --make-bed --out plink_files/rat_genome_Pl\n\nmv rat_genotype_Pl.map rat_genotype_Vo.map\nplink --file rat_genotype_Vo --make-bed --out plink_files/rat_genome_Vo"
  },
  {
    "objectID": "posts/Sparsity_Badger_Template.html",
    "href": "posts/Sparsity_Badger_Template.html",
    "title": "Sparsity_Badger_Template",
    "section": "",
    "text": "---\ndefinitions:\n\n  # command and template must always be specified.\n  command: gemma\n  template: /gpfs/data/im-lab/nas40t2/Github/badger/examples/PBS_example_template.jinja\n\n  copy_to_item: true\n\n  default_arguments:\n    job_memory: \"4gb\"\n    job_walltime: \"6:00:00\"\n    logs_folder: /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/logs\n    setup: \"module load gcc/6.2.0 \\n module load gemma/0.94 \\n cd /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac \"\n\n  # This specifies what the script does once an individual file is generated.\n  submission:\n    !PBSQueue\n      jobs_folder: /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/jobs\n      job_name_key: job_name # Jobs will be written to job_name.sh files with the generated job_name argument filled in.\n      fake_submission: true # Specifying this just writes the files and does not run a submission command.\n\n  constants:\n    GRM_dir: &GRM_DIR \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/GRMs/\"\n    pheno_file: &PHENO_FILE \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/phenotype_files/\"\n    geno_pref: &GENO_PREF \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files/\"\n# There are a lot of different types of arguments, and only a few are shown here.\narguments:\n\n  - !Scalar { name: argument_4, prefix: \"-bslmm\", value: 1 }\n  - !Scalar { name: argument_5, prefix: \"-n\", value: 1 }\n\n  - !FilesInFolder\n    name: argument_1\n    prefix: \"-g\"\n    folder: \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files\"\n    regexp_filter: \"geno(.*)\"\n    metadata_rules:\n      - !ExtractFromFileNameRegexpMetadata\n        paths: [ gene_name ]\n\n  - !ArgumentFromMetadata\n    name: argument_2\n    prefix: \"-p\"\n    prepend: *PHENO_FILE\n    format_rule: \"tmp.pheno.{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]\n    \n  - !ArgumentFromMetadata\n    name: argument_3\n    prefix: \"-k\"\n    prepend: *GRM_DIR\n    format_rule: \"grm_Ac_{gene_name}.cXX.txt\"\n    sources: [ { path: gene_name, destination: gene_name }]\n  \n  - !ArgumentFromMetadata\n    name: argument_6\n    prefix: \"-o\"\n    format_rule: \"Ac_out_{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]\n\n  - !ArgumentFromMetadata\n    name: job_name\n    format_rule: \"gemma_sub_Ac-{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]"
  },
  {
    "objectID": "posts/Sparsity_Badger_Template.html#badger-script-to-calculate-sparsity-for-each-gene-using-gemma",
    "href": "posts/Sparsity_Badger_Template.html#badger-script-to-calculate-sparsity-for-each-gene-using-gemma",
    "title": "Sparsity_Badger_Template",
    "section": "",
    "text": "---\ndefinitions:\n\n  # command and template must always be specified.\n  command: gemma\n  template: /gpfs/data/im-lab/nas40t2/Github/badger/examples/PBS_example_template.jinja\n\n  copy_to_item: true\n\n  default_arguments:\n    job_memory: \"4gb\"\n    job_walltime: \"6:00:00\"\n    logs_folder: /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/logs\n    setup: \"module load gcc/6.2.0 \\n module load gemma/0.94 \\n cd /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac \"\n\n  # This specifies what the script does once an individual file is generated.\n  submission:\n    !PBSQueue\n      jobs_folder: /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/jobs\n      job_name_key: job_name # Jobs will be written to job_name.sh files with the generated job_name argument filled in.\n      fake_submission: true # Specifying this just writes the files and does not run a submission command.\n\n  constants:\n    GRM_dir: &GRM_DIR \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/GRMs/\"\n    pheno_file: &PHENO_FILE \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/phenotype_files/\"\n    geno_pref: &GENO_PREF \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files/\"\n# There are a lot of different types of arguments, and only a few are shown here.\narguments:\n\n  - !Scalar { name: argument_4, prefix: \"-bslmm\", value: 1 }\n  - !Scalar { name: argument_5, prefix: \"-n\", value: 1 }\n\n  - !FilesInFolder\n    name: argument_1\n    prefix: \"-g\"\n    folder: \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files\"\n    regexp_filter: \"geno(.*)\"\n    metadata_rules:\n      - !ExtractFromFileNameRegexpMetadata\n        paths: [ gene_name ]\n\n  - !ArgumentFromMetadata\n    name: argument_2\n    prefix: \"-p\"\n    prepend: *PHENO_FILE\n    format_rule: \"tmp.pheno.{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]\n    \n  - !ArgumentFromMetadata\n    name: argument_3\n    prefix: \"-k\"\n    prepend: *GRM_DIR\n    format_rule: \"grm_Ac_{gene_name}.cXX.txt\"\n    sources: [ { path: gene_name, destination: gene_name }]\n  \n  - !ArgumentFromMetadata\n    name: argument_6\n    prefix: \"-o\"\n    format_rule: \"Ac_out_{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]\n\n  - !ArgumentFromMetadata\n    name: job_name\n    format_rule: \"gemma_sub_Ac-{gene_name}\"\n    sources: [ { path: gene_name, destination: gene_name }]"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html",
    "href": "posts/Human_PTRS_Comparison.html",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "",
    "text": "library(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(glmnet)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndevtools::source_gist(\"ee5f67abddd0b761ee24410ea71c41aa\")\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\ndevtools::source_gist(\"1e9053c8f35c30396429350a08f33ea7\")\n\nYanyu’s PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI.\n\ntraits &lt;- c(\"height\", \"bmi\")\n# folder with PrediXcan results\nresults.dir &lt;- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/PrediXcan/metabolic_traits/\"\n# folder with PTRS weights, predicted traits will output here\ndata.dir &lt;- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\"\n\n\n\n\nThe orth.rats file contains gives a dictionary between human genes and the corresponding gene in rats.\n\north.rats &lt;- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with PTRS weights.\n\npred_expr &lt;- read_tsv(results.dir %&% \"rat_metabolic_Ac_best__predict.txt\") %&gt;% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr &lt;- pred_expr %&gt;% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] &lt;- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %&gt;% .[[\"ensembl_gene_id\"]]\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\nfn_weights = function(trait)\n{\n  weights &lt;- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id &lt;- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) &lt;- weights$gene_id\n  weights &lt;- weights %&gt;% rename(gene_name = gene_id)\n  return(weights)\n}\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats.\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\nfor(trait in traits) {\n  weights &lt;- fn_weights(trait)\n  pred_trait &lt;- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, data.dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#setup",
    "href": "posts/Human_PTRS_Comparison.html#setup",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "",
    "text": "library(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(glmnet)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndevtools::source_gist(\"ee5f67abddd0b761ee24410ea71c41aa\")\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\ndevtools::source_gist(\"1e9053c8f35c30396429350a08f33ea7\")\n\nYanyu’s PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI.\n\ntraits &lt;- c(\"height\", \"bmi\")\n# folder with PrediXcan results\nresults.dir &lt;- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/PrediXcan/metabolic_traits/\"\n# folder with PTRS weights, predicted traits will output here\ndata.dir &lt;- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\""
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#data-wrangling",
    "href": "posts/Human_PTRS_Comparison.html#data-wrangling",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "",
    "text": "The orth.rats file contains gives a dictionary between human genes and the corresponding gene in rats.\n\north.rats &lt;- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with PTRS weights.\n\npred_expr &lt;- read_tsv(results.dir %&% \"rat_metabolic_Ac_best__predict.txt\") %&gt;% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr &lt;- pred_expr %&gt;% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] &lt;- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %&gt;% .[[\"ensembl_gene_id\"]]\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\nfn_weights = function(trait)\n{\n  weights &lt;- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id &lt;- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) &lt;- weights$gene_id\n  weights &lt;- weights %&gt;% rename(gene_name = gene_id)\n  return(weights)\n}\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats.\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\nfor(trait in traits) {\n  weights &lt;- fn_weights(trait)\n  pred_trait &lt;- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, data.dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#human-ptrs-results",
    "href": "posts/Human_PTRS_Comparison.html#human-ptrs-results",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "Human PTRS Results",
    "text": "Human PTRS Results\nThe Personal Genome Project is a public resource of individual data from informed volunteers. PGP genetic data is publicly available, and we have processed trait information in an sqlite database. In Yanyu Liang’s development of PTRS, she generated PTRS weights using elastic net. We want to use PGP data to test Yanyu’s PTRS weights and compare to observed height. We previously generated predicted expression in Summary_PTRS_PGS.Rmd"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#calculate-predicted-height-in-pgp-using-individual-ptrs-weights",
    "href": "posts/Human_PTRS_Comparison.html#calculate-predicted-height-in-pgp-using-individual-ptrs-weights",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "Calculate Predicted Height in PGP using Individual PTRS Weights",
    "text": "Calculate Predicted Height in PGP using Individual PTRS Weights\n\npred_expr &lt;- read_tsv(data.dir %&% \"PTRS_weights/PGP/PGP_Whole_Blood__predict.txt\") %&gt;% select(-c(FID))\n\nWe repeat the same method from before for predicting traits, but this time predicting height and BMI for PGP individuals.\n\npred_height_humans &lt;- fn_generate_trait(pred_expr, weights)"
  },
  {
    "objectID": "posts/Human_PTRS_Comparison.html#compare-performance-to-observed-height-in-personal-genomes",
    "href": "posts/Human_PTRS_Comparison.html#compare-performance-to-observed-height-in-personal-genomes",
    "title": "Human_PTRS_Performance_Comparison",
    "section": "Compare Performance to Observed Height in Personal Genomes",
    "text": "Compare Performance to Observed Height in Personal Genomes\nFirst, we load PGP phenotype data, stored in an sqlite database.\n\ndb &lt;- \"~/Box/imlab-data/data-Github/web-data/2021-04-21-personal-genomes-project-data/repgp-data.sqlite3\"\nsqlite.driver &lt;- dbDriver(\"SQLite\")\nconn &lt;- dbConnect(RSQLite::SQLite(), db)\ndbListTables(conn)\n\nusers &lt;- dbGetQuery(conn, 'select * from users')\ndbDisconnect(conn)\n\npheno &lt;- users  %&gt;% select(c(sample, height)) %&gt;% na.omit()\nn_genes = as.matrix(apply(weights[,2:ncol(weights)], 2, function(x) sum(x != 0 )))\n\n\npheno &lt;- pheno[na.omit(match(rownames(pred_height_humans), pheno$sample)),]\n\ntempo &lt;- pred_height_humans[na.omit(match(pheno$sample, rownames(pred_height_humans))), ]\n\nheight_df &lt;- data.frame(estimate = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  height_df[i,1] &lt;- cor.test(pheno$height, tempo[,i])$estimate\n  height_df[i,2] &lt;- cor.test(pheno$height, tempo[,i])$p.value\n  height_df[i,3] &lt;- paste(\"model\", i, sep = \"_\")\n  height_df[i,4] &lt;- n_genes[i,1]\n  height_df[i,5] &lt;- cor.test(pheno$height, tempo[,i])$conf.int[1]\n  height_df[i,6] &lt;- cor.test(pheno$height, tempo[,i])$conf.int[2]\n}"
  },
  {
    "objectID": "posts/about.html",
    "href": "posts/about.html",
    "title": "About",
    "section": "",
    "text": "Describe your project.\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/GTEx_n_genes_rat_comparison.html",
    "href": "posts/GTEx_n_genes_rat_comparison.html",
    "title": "GTEx_comparison_rat_n_genes",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndir &lt;- \"/gpfs/data/im-lab/nas40t2/Data/GTEx/V8/GTEx_Analysis_v8_eQTL_expression_matrices/\"\ngeno.dir &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/\""
  },
  {
    "objectID": "posts/GTEx_n_genes_rat_comparison.html#compare-number-of-genes-predicted-between-rat-and-gtex-prediction-models",
    "href": "posts/GTEx_n_genes_rat_comparison.html#compare-number-of-genes-predicted-between-rat-and-gtex-prediction-models",
    "title": "GTEx_comparison_rat_n_genes",
    "section": "Compare number of genes predicted between Rat and GTEx prediction models",
    "text": "Compare number of genes predicted between Rat and GTEx prediction models"
  },
  {
    "objectID": "posts/generate_sparsity_figs.html",
    "href": "posts/generate_sparsity_figs.html",
    "title": "Generate Sparsity Figures",
    "section": "",
    "text": "we will use this for comparison later\n\noverlap &lt;- read_tsv(data.dir %&% \"Box_files/overlap_rat_genes_GTEx.txt\", col_names = TRUE)  # genes that are present in both rat expression data and in GTEx\n\nexpr_Ac &lt;- readRDS(data.dir %&% \"expression/Ac_expression_transformed.RDS\")\nexpr_Ac &lt;- expr_Ac[, intersect(colnames(expr_Ac), overlap$rat_gene)]\nsaveRDS(expr_Ac, data.dir %&% \"expression/Ac_expression_intesrect_GTEx.RDS\")"
  },
  {
    "objectID": "posts/generate_sparsity_figs.html#subset-genes-used-in-prediction-to-those-that-have-an-analog-in-gtex-tissues",
    "href": "posts/generate_sparsity_figs.html#subset-genes-used-in-prediction-to-those-that-have-an-analog-in-gtex-tissues",
    "title": "Generate Sparsity Figures",
    "section": "",
    "text": "we will use this for comparison later\n\noverlap &lt;- read_tsv(data.dir %&% \"Box_files/overlap_rat_genes_GTEx.txt\", col_names = TRUE)  # genes that are present in both rat expression data and in GTEx\n\nexpr_Ac &lt;- readRDS(data.dir %&% \"expression/Ac_expression_transformed.RDS\")\nexpr_Ac &lt;- expr_Ac[, intersect(colnames(expr_Ac), overlap$rat_gene)]\nsaveRDS(expr_Ac, data.dir %&% \"expression/Ac_expression_intesrect_GTEx.RDS\")"
  },
  {
    "objectID": "posts/generate_sparsity_figs.html#generate-r2-predictions-for-all-elastic-net-parameters-between-0-and-1",
    "href": "posts/generate_sparsity_figs.html#generate-r2-predictions-for-all-elastic-net-parameters-between-0-and-1",
    "title": "Generate Sparsity Figures",
    "section": "Generate R2 predictions for all elastic net parameters between 0 and 1",
    "text": "Generate R2 predictions for all elastic net parameters between 0 and 1\nWe run the same Prediction Model Pipeline only for Ac tissue. However this time, I didn’t break it down into chromosome. This takes longer but means you have less files, a file for each alpha parameter.\n\nfor i in $(seq 0 0.1 1.0)\ndo\nqsub -v alpha=$i sparsity_rats_pipeline.pbs\ndone\n\nNow we have predictability for all parameters of alpha. We can now iterate through all alphas and create the long data format. We also only select for genes that have an average cor &gt; 0.3 and subsample 20 genes.\n\nldf &lt;- list() # creates a list\nlisttsv &lt;- list.files(path = dir, pattern = \"working_TW_Ac_exp_10-foldCV_elasticNet_alpha\", full.names = TRUE) # creates the list of all the tsv files in the directory\ntempo &lt;- read_tsv(listtsv[1], col_names = TRUE) \ntempo &lt;- tempo %&gt;% select(c(gene, cor))\ncolnames(tempo)[2] = \"0\"\n\nfor (k in 2:length(listtsv)){\n ldf[[k]] &lt;- read_tsv(listtsv[k], col_names = TRUE)\n alpha &lt;- substr(listtsv[k], 107, str_length(listtsv[k]) - 13)\n fila &lt;- as.data.frame(ldf[[k]]) \n fila &lt;- fila %&gt;% select(c(gene, cor)) \n colnames(fila)[2] = alpha\n tempo &lt;- inner_join(tempo, fila, by = \"gene\")\n}\n\nPlot results of r for all parameers of alpha\n\ntempo &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/rat_elastic_net_all_parameters_GTEx_only_genes.txt\", col_names = TRUE)\n\ndata_long &lt;- tempo  %&gt;%   pivot_longer(!gene, names_to = \"value\", values_to = \"count\")\n   \np1 &lt;-  ggplot(data_long, aes(x = as.numeric(value), y = count)) + geom_smooth(show_guide = FALSE, se=T, size = .5, col = \"dodgerblue2\")  +  xlab(expression(paste(\"Elastic net mixing parameter (\",alpha, \")\"))) + ylab(expression(paste(\"10-fold cross-validated R\")))\n\np2 = ggplot(tempo, aes(x = `0`, y = `0.5`)) + geom_hex(bins = 50)   +\n      geom_abline(slope = 1, intercept = 0, color = \"darkgrey\", size = 0.8) +\n      ylab(\"cor for mixing paramter = 0.5\" ) +\n      xlab(\"cor for mixing paramter = 0\") + theme_bw(base_size = 16)\n\np1"
  },
  {
    "objectID": "posts/01.Heritability_Sparsity.html#calculate-cis-heritability-within-1mb",
    "href": "posts/01.Heritability_Sparsity.html#calculate-cis-heritability-within-1mb",
    "title": "01.Heritability_Sparsity",
    "section": "Calculate Cis Heritability within 1MB",
    "text": "Calculate Cis Heritability within 1MB\nFirst we create bimbam formats for genotypes from the original genotype file. The bimbam format is the input for gemma, which we will use for both heritability and sparisty estiamtes.\n\nlibrary(tidyverse)\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd &lt;- \"/Users/natashasanthanam/Github/rat-genomic-analysis/data/\"\n\ngeno_Ac = geno[,match(rownames(gexAc_transpose), colnames(geno))]\ngeno_Il = geno[,match(rownames(gexIl_transpose), colnames(geno))]\ngeno_Lh = geno[,match(rownames(gexLh_transpose), colnames(geno))]\ngeno_Pl = geno[,match(rownames(gexPl_transpose), colnames(geno))]\ngeno_Vo = geno[,match(rownames(gexVo_transpose), colnames(geno))]\n\nAc_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Ac), phyMap$refAllele, phyMap$effectAllele, geno_Ac)\nIl_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Il),phyMap$refAllele, phyMap$effectAllele,  geno_Il)\nLh_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Lh),phyMap$refAllele, phyMap$effectAllele,  geno_Lh)\nPl_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Pl),phyMap$refAllele, phyMap$effectAllele,  geno_Pl)\nVo_bimbam &lt;- cbind(phyMap$chr, phyMap$pos, rownames(geno_Vo),phyMap$refAllele, phyMap$effectAllele,  geno_Vo)\n\nwrite.table(Ac_bimbam, file = wd %&% \"Ac_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Il_bimbam, file = wd %&% \"Il_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Lh_bimbam, file = wd %&% \"Lh_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Pl_bimbam, file = wd %&%\"Pl_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Vo_bimbam, file = wd %&%\"Vo_bimbam\",quote=F,col.names=F,row.names=F)\n\nCollect list of individuals from the expression files\n\ngtf &lt;- read_tsv(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gtf.txt\", col_names=TRUE)\ngexAc_transpose &lt;- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexAc_transpose.txt\")\ngexIl_transpose &lt;- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexIl_transpose.txt\")\ngexLh_transpose &lt;- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexLh_transpose.txt\")\ngexPl_transpose &lt;- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexPl_transpose.txt\")\ngexVo_transpose &lt;- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexVo_transpose.txt\")\n\nensidlist &lt;- colnames(gexAc_transpose)\nensidlist_Il &lt;- colnames(gexIl_transpose)\nensidlist_Lh &lt;- colnames(gexLh_transpose)\nensidlist_Pl &lt;- colnames(gexPl_transpose)\nensidlist_Vo &lt;- colnames(gexVo_transpose)"
  },
  {
    "objectID": "posts/01.Heritability_Sparsity.html#sparsity-analysis",
    "href": "posts/01.Heritability_Sparsity.html#sparsity-analysis",
    "title": "01.Heritability_Sparsity",
    "section": "Sparsity Analysis",
    "text": "Sparsity Analysis\nAll the code above generates the local GRM for each phenotype (gene). With the GRM we then run gemma again to calculate both PVE (heritability) and PGE (sparsity). I used a badger template to calculate h2 and sparsity for each tissue. This steps takes a lot of computing power, so we use Badger. It takes approximatley 2-3 days to run.\nThe code to run badger is here\n\nsource(\"./Rat_Genomics_Paper_Pipeline/analysis/Sparsity_Badger_Template.Rmd\")\n\nGEMMA then generates a .hyp file for each phenotype or in our case gene of interest. The hyp file contains the posterior samples for the hyper-parameters (h, PVE, rho, PGE, pi and gamma) for every 10th iteration. For our purposes, we are interested in the PGE and PVE parameters.\nTo then calculate the point estimate and credible set for Proportion of Variance Explained (PVE) and Proportion of genetic variance explained by the sparse effects terms (PGE), we calculate the posterior probability for each gene for each tissue.\nI generated a function that calculates the beta of the posterior distribution and can be found here"
  },
  {
    "objectID": "other_code.html",
    "href": "other_code.html",
    "title": "other code under posts",
    "section": "",
    "text": ":::{#quarto-listing-pipeline .hidden} \\(e = mC^2\\)\n:::{.hidden render-id=“pipeline-listing-listing”}\n:::{.list .quarto-listing-default}\n\n\n  \n\n\n\n\n01.Heritability_Sparsity\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n  \n\n\n\n\n01.Heritability_Sparsity Sabrina\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam , Sabrina\n\n\n\n\n\n\n  \n\n\n\n\n\nPrediction_Model_Pipeline\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nTyson Miller\n\n\n\n\n\n\n  \n\n\n\n\n03.PrediXcan_MultiXcan\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n04.GEMMA_LMM_analysis\n\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n06.PTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n07 SPTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n08.Compare_all_PTRS\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n09.PRS_Rats\n\n\n\n\n\n\n\n\n\n\n\n\nMay 4, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n10.PTRS_simulation_weights\n\n\n\n\n\n\n\n\n\n\n\n\nJun 26, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nCoregulation_across_Tissues_Species\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGTEx_comparison_rat_n_genes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGenerate Sparsity Figures\n\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGenerate_plink_format_genotypes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nHuman_PTRS_Performance_Comparison\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 24, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nPhenomeXcan Query\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nRat QC and Comparison Check\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nRat_Predictability_comp_Humans\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nSparsity_Badger_Template\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n  \n\n\n\n\nconvert_genotypes_old\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\nrat_compare_genotypes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n:::\n\n\nNo matching items\n\n:::\n:::"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RatXcan Paper Code",
    "section": "",
    "text": "to Github repo\n\n\n\n\n\n\n\n\n  \n\n\n\n\nCoregulation_across_Tissues_Species\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGenerate Sparsity Figures\n\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nHeritability_Sparsity Sabrina\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam , Sabrina\n\n\n\n\n\n\n  \n\n\n\n\nRatXcan Tutorial\n\n\n\n\n\n\n\n\n\n\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRatXcan analysis Figure 3 to 4\n\n\n\n\n\ntutorial for running ratxcan given genotype, phenotype, and prediction weights as input\n\n\n\n\n\n\nNov 27, 2023\n\n\nHaky Im\n\n\n\n\n\n\n  \n\n\n\n\nTrain brain region predictors with larger genotype file\n\n\n\n\n\n\n\nratxcan\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\nHaky Im\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\n:::{#quarto-listing-pipeline .hidden} \\(e = mC^2\\)\n:::{.hidden render-id=“pipeline-listing-listing”}\n:::{.list .quarto-listing-default}\n\n\n  \n\n\n\n\n01.Heritability_Sparsity\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n  \n\n\n\n\n01.Heritability_Sparsity Sabrina\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam , Sabrina\n\n\n\n\n\n\n  \n\n\n\n\n\nPrediction_Model_Pipeline\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nTyson Miller\n\n\n\n\n\n\n  \n\n\n\n\n03.PrediXcan_MultiXcan\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n04.GEMMA_LMM_analysis\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n06.PTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n07 SPTRS_Creation\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n08.Compare_all_PTRS\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n09.PRS_Rats\n\n\n\n\n\n\n\n\n\n\n\nMay 4, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\n10.PTRS_simulation_weights\n\n\n\n\n\n\n\n\n\n\n\nJun 26, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nCoregulation_across_Tissues_Species\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGTEx_comparison_rat_n_genes\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGenerate Sparsity Figures\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nGenerate_plink_format_genotypes\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nHuman_PTRS_Performance_Comparison\n\n\n\n\n\n\n\n\n\n\n\nFeb 24, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nPhenomeXcan Query\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nRat QC and Comparison Check\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nRat_Predictability_comp_Humans\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n\n\n  \n\n\n\n\nSparsity_Badger_Template\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2022\n\n\nnatasha.santhanam\n\n\n\n\n\n\n  \n\n\n\n\nconvert_genotypes_old\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\nrat_compare_genotypes\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2022\n\n\nNatasha Santhanam\n\n\n\n\n:::\n\nNo matching items\n\n:::\n:::"
  },
  {
    "objectID": "ratxcan-paper-code/train-brain-region-predictors.html",
    "href": "ratxcan-paper-code/train-brain-region-predictors.html",
    "title": "Train brain region predictors with larger genotype file",
    "section": "",
    "text": "preliminary definitions\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(glue))\nsuppressMessages(library(data.table))\nsuppressMessages(library(R.utils))\nsuppressMessages(library(stringr))\nsuppressMessages(library(RSQLite))\nsuppressMessages(library(vroom))\nsuppressMessages(library(glmnet))\n\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nheadleft &lt;-function(x,nc=4,...) head(x[,1:nc],...)\n\n#USER=\"haky\"\n#USER=\"haekyungim\"\n#PRE = glue(\"/Users/{USER}/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\")\n\n# PIPELINE=glue(\"/Users/{USER}/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline\")\n# \n# FROMHENG=glue(\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/rat-genomic-analysis/heng_rat_brain_data/from_heng\")\n# \nAPURVA=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/rat-genomic-analysis/Data-From-Abe-Palmer-Lab\"\n\nWEBDATA = \"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n\nWORK=glue(\"{WEBDATA}/2022-10-16-debug-rat-ptrs-with-larger-brain-transcriptome\")\n\n# PRE0=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n# PRE1=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2023-11-27-ratxcan-tutorial\"\n# \n# PLINK=\"/Users/haekyungim/bin/plink_mac_20231211/plink\"\n# GCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\"\n# \nINPUT &lt;- glue(\"{WEBDATA}/ratxcan-tutorial\") ## this has the input data \n# OUTPUT &lt;- glue(\"{PRE1}/scratch\") ## this has the output data, intermediate results\ngene_annotation &lt;- readRDS(glue(\"{INPUT}/data/expression/gene_annotation.RDS\"))\n## glue(\"{INPUT}/data/expression/gene_annotation.RDS\") is the same as {WORK}..."
  },
  {
    "objectID": "ratxcan-paper-code/train-brain-region-predictors.html#train-prediction-models-using-nat-training-rats-and-ac-expression",
    "href": "ratxcan-paper-code/train-brain-region-predictors.html#train-prediction-models-using-nat-training-rats-and-ac-expression",
    "title": "Train brain region predictors with larger genotype file",
    "section": "train prediction models using nat training rats and Ac expression",
    "text": "train prediction models using nat training rats and Ac expression\n\nsplit genotypes by chromosome\nwrite genotype by chr with header\nTODO update path in this block\n\n\ngeno_file &lt;- glue(\"{WORK}/data/genotype/nat/train_genotype_nat.txt\")\ntrain_rat_id_file &lt;- glue(\"{WORK}/data/genotype/nat/train_rat_ids_nat.txt\")\n\ntrain_genotype &lt;- vroom(geno_file,col_names=TRUE)\nrat_id_vec &lt;- vroom(train_rat_id_file,col_names=FALSE)[[2]]\n##colnames(train_genotype) = c(\"chr\",\"snp\", \"pos\", \"refAllele\", \"effectAllele\", \"maf\", rat_id_vec)\n## check point\nidentical(c(\"chr\",\"snp\", \"pos\", \"refAllele\", \"effectAllele\", \"maf\", rat_id_vec),colnames(train_genotype))\n## check point rat ids and genotype colnames\nlength(rat_id_vec)+6 == ncol(train_genotype)\n## check point snp annot\nchrom=1\ntempo &lt;- readRDS(glue(\"{WORK}/data/genotype/snp_annot/snp_annot.chr.{chrom}.RDS\"))\nidentical(tempo$snp,train_genotype%&gt;% filter(chr==1) %&gt;% .[[\"snp\"]] )\n## create and write genotype by chr\nif(F){\n  genochr_dir &lt;- glue(\"{WORK}/data/genotype/nat/geno_by_chr\")\n  if(!file.exists(genochr_dir)) system(glue(\"mkdir {genochr_dir}\"))\n  for(chrom in 1:20)\n  write_tsv(train_genotype %&gt;% filter(chr==chrom), glue(\"{genochr_dir}/train_genotype_chr{chrom}.txt\"))\n}\n## number of snps per chr\ntrain_genotype %&gt;% count(chr)  %&gt;% arrange(as.numeric(chr)) %&gt;% knitr::kable()\n\n\ncheck snp_annot is the same\nTODO update path in this block\n\n\n## check point snp annot\nfor(chrom in 1:20)\n{  tempo &lt;- readRDS(glue(\"{WORK}/data/genotype/snp_annot/snp_annot.chr.{chrom}.RDS\"))\n  if(identical(tempo$snp,train_genotype%&gt;% filter(chr==chrom) %&gt;% .[[\"snp\"]] )) print(glue(\"OK: chr {chrom} snp annot match\"))\n}\n\n\nread gene expression files\n\n\nACname = \"fpkmEnsemblGene_AcbcOnly.2018-09-14.txt\"\nILname = \"fpkmEnsemblGene_ILOnly.2018-09-14.txt\"\nLHname = \"fpkmEnsemblGene_LHBOnly.2018-09-14.txt\"\nPLname = \"fpkmEnsemblGene_PLOnly.2018-09-14.txt\"\nVOname = \"fpkmEnsemblGene_VoLoOnly.2018-09-14.txt\"\n\nexpr2mat = function(region_expr)\n{\n  kk=as.matrix(region_expr %&gt;% select(-EnsemblGeneID))\n  kk=t(kk)\n  colnames(kk) = region_expr$EnsemblGeneID\n  kk\n}\n\nAC_expr=suppressMessages(vroom::vroom(glue(\"{WEBDATA}/ratxcan-tutorial/data/expression/{ACname}\")))\nAC_expr = expr2mat(AC_expr)\ndim(AC_expr)\n\nIL_expr=suppressMessages(vroom::vroom(glue(\"{WEBDATA}/ratxcan-tutorial/data/expression/{ILname}\")))\nIL_expr = expr2mat(IL_expr)\ndim(IL_expr)\n\nLH_expr=suppressMessages(vroom::vroom(glue(\"{WEBDATA}/ratxcan-tutorial/data/expression/{LHname}\")))\nLH_expr = expr2mat(LH_expr)\ndim(LH_expr)\n\nPL_expr=suppressMessages(vroom::vroom(glue(\"{WEBDATA}/ratxcan-tutorial/data/expression/{PLname}\")))\nPL_expr = expr2mat(PL_expr)\ndim(PL_expr)\n\nVO_expr=suppressMessages(vroom::vroom(glue(\"{WEBDATA}/ratxcan-tutorial/data/expression/{VOname}\"),delim=\"\\t\"))\nVO_expr = expr2mat(VO_expr)\ndim(VO_expr)\n\n\nread covariates file\n\n\ncova_df = read_tsv(file = glue(\"{INPUT}/data/phenotype/covariates.txt\"))\n#load(glue(\"{APURVA}/Final_P50_traits/P50_raw_trait_values.RData\")) ## this will load raw_traits\n#cova_df=raw_traits\n#sort(names(cova_df))\n#cova_df %&gt;% filter(cova_df$rfid %in% rownames(gexmat)) %&gt;% dim()\n#write_tsv(cova_df %&gt;% select(IID=rfid,sex,batchnumber,center) ,file = glue(\"{INPUT}/data/phenotype/covariates.txt\"))\n## \"Sample_Name\" column is the rat ID in the expression file rownames gexmat\n## sex\n## Nat used sex, batch number, batch center and 7 PEER\n\n\nQC and process expression data\n\n\nQC_process_gexmat = function(gexmat,titulo=\"\",plotpcs=FALSE,mPCs=7)\n{\n  genelist &lt;- colnames(gexmat)\n  #gexmat &lt;- expr_df %&gt;% select(-EnsemblGeneID) %&gt;% as.matrix %&gt;% t()\n  #colnames(gexmat) &lt;- genelist\n  \n  ## remove genes with no variation\n  ind = gexmat %&gt;% apply(2,var) %&gt;% (function(x) x!=0)\n  #if(!identical(names(ind),colnames(gexmat))) stop(\"gene names don't match\")\n  gexmat &lt;- gexmat[,ind]\n  \n  ## inverse normalize first, then check whether it passes shapiro test\n  ## def inverse normalization\n  invnorm = function(x) {\n    if(is.null(dim(x))) res = invnorm.vector(x) else\n      res=apply(x,2,invnorm.vector)\n    res\n  }\n  invnorm.vector = function(x) {yy = rank(x)/(length(x)+1); qnorm(yy)}\n  \n  #tempomat = gexmat\n  for(cc in 1:ncol(gexmat)) gexmat[,cc] &lt;- invnorm(gexmat[,cc])\n  \n  ## genes that don't pass shapiro test of normality (these were forced to be normally distributed, if that doesn't happen, then they probably need to be excluded. could be low expression or other reasons for high number of ties)\n  res &lt;- rep(NA,ncol(gexmat))\n  names(res) &lt;- colnames(gexmat)\n  for(cc in 1:ncol(gexmat)) res[cc] &lt;- shapiro.test(gexmat[,cc])$p.value\n  \n  cat(\"keeping\",sum(res&gt;0.8),\"genes with shapiro p&gt;0.8\\n\")\n  gexmat &lt;- gexmat[,res &gt; 0.8]\n  \n  ## adjust for PCs\n  prfit &lt;- prcomp(t(gexmat))\n  if(plotpcs)\n  {\n    plot(cumsum(prfit$sdev^2)/sum(prfit$sdev^2),main=glue(\"{titulo}\"))\n    pairs(prfit$rotation[,1:7],main=glue(\"{titulo}\"))\n    }\n\n  ## check point: do gexmat and pc matrices have = rownames (IID)\n  if(!identical(rownames(gexmat),rownames(prfit$rotation))) stop(\"gene expr and pc ids don't match\")\n\n  cova_df_ext &lt;- cova_df[match(rownames(gexmat),cova_df$IID), ]\n  cova_df_ext &lt;- cbind(cova_df_ext,prfit$rotation[cova_df_ext$IID,1:mPCs])\n  \n  res_expr_mat = matrix(NA,nrow(gexmat),ncol(gexmat))\n  rownames(res_expr_mat) = rownames(gexmat)\n  colnames(res_expr_mat) = colnames(gexmat)\n\n  # ## adjust for cova\n  # ## mPCs &lt;- 7\n  # cova_mat &lt;- \n  #   cova_df[match(rownames(gexmat),cova_df$IID), ] %&gt;% \n  #   mutate(nsex= as.numeric(sex==\"F\"))\n  # cova_mat &lt;- cova_mat %&gt;% select(nsex) %&gt;% as.matrix()\n  # rownames(cova_mat) &lt;- cova_mat$IID \n  # ## 1 is female\n  # \n  # cova_mat &lt;- cbind(cova_mat,prfit$rotation[,1:mPCs])\n  # \n  # \n  # res_expr_mat = matrix(NA,nrow(gexmat),ncol(gexmat))\n  # rownames(res_expr_mat) = rownames(gexmat)\n  # colnames(res_expr_mat) = colnames(gexmat)\n\n  ## Nat used sex, batch number, batch center and 7 PEER\n  ## center is unique so remove\n  regformula = glue(\"gex ~ sex + batchnumber\")\n  for(ii in 1:mPCs) regformula = glue(\"{regformula} + PC{ii}\")\n  for(gg in 1:ncol(gexmat))\n  {\n    gex &lt;- gexmat[,gg]\n    cova_df_ext$gex = gex\n    res_expr_mat[,gg] &lt;- resid(lm(as.formula(regformula), data=cova_df_ext))\n  }\n\n  res_expr_mat\n\n}\n\nAC_res_expr = QC_process_gexmat(AC_expr)\nIL_res_expr = QC_process_gexmat(IL_expr)\nLH_res_expr = QC_process_gexmat(LH_expr)\nPL_res_expr = QC_process_gexmat(PL_expr)\nVO_res_expr = QC_process_gexmat(VO_expr)\n\n\nload expression_RDS\n\n\nrecalculate=FALSE\ntissuelist = c(\"AC\",\"IL\",\"LH\",\"PL\",\"VO\")\ntissue=\"AC\"\nexpression_RDS &lt;- glue(\"{INPUT}/data/expression/{tissue}_res_expr.RDS\")\nif(recalculate) \n{\nsaveRDS(AC_res_expr,glue(\"{INPUT}/data/expression/AC_res_expr.RDS\"))\nsaveRDS(IL_res_expr,glue(\"{INPUT}/data/expression/IL_res_expr.RDS\"))\nsaveRDS(LH_res_expr,glue(\"{INPUT}/data/expression/LH_res_expr.RDS\"))\nsaveRDS(PL_res_expr,glue(\"{INPUT}/data/expression/PL_res_expr.RDS\"))\nsaveRDS(VO_res_expr,glue(\"{INPUT}/data/expression/VO_res_expr.RDS\"))\n} else \n{\nAC_res_expr &lt;- readRDS(glue(\"{INPUT}/data/expression/AC_res_expr.RDS\"))\nIL_res_expr &lt;- readRDS(glue(\"{INPUT}/data/expression/IL_res_expr.RDS\"))\nLH_res_expr &lt;- readRDS(glue(\"{INPUT}/data/expression/LH_res_expr.RDS\"))\nPL_res_expr &lt;- readRDS(glue(\"{INPUT}/data/expression/PL_res_expr.RDS\"))\nVO_res_expr &lt;- readRDS(glue(\"{INPUT}/data/expression/VO_res_expr.RDS\"))\n}\ndim(AC_res_expr)\n#[1]    78 14908\ndim(IL_res_expr)\n#[1]    83 15118\ndim(LH_res_expr)\n#[1]    83 15082\ndim(PL_res_expr)\n#[1]    81 15130\ndim(VO_res_expr)\n\n\nrun training with dopar\n\n\nCODE=glue(\"/Users/haekyungim/Github/web-internal-notes-quarto/post/2022-10-24-train-rat-brain-expression-predictors/\")\nsource(glue(\"{CODE}/scripts/modified-GTEx_Tissue_Wide_CV_elasticNet.R\"))\n# options(error=recover)\n# ##debug(fit_model)\n# fit_model(expression_RDS, geno_file_chr, gene_annot_RDS, snp_annot_RDS, n_k_folds, alpha, out_dir, tis, chrom, snpset, window)\n\nif(F){\n  suppressMessages(library(foreach))\n  suppressMessages(library(parallel))\n  \n  parallel::detectCores()\n  n.cores &lt;- parallel::detectCores() - 1\n  #create the cluster\n  my.cluster &lt;- parallel::makeCluster(\n    n.cores, \n    type = \"FORK\"\n    )\n  print(my.cluster)\n  doParallel::registerDoParallel(cl = my.cluster)\n  #check if it is registered (optional)\n  foreach::getDoParRegistered()\n  #how many workers are available? (optional)\n  foreach::getDoParWorkers()\n  \n  ##tis &lt;- \"IL\"\n  ##c(\"AC\",\"IL\",\"LH\",\"PL\",\"VO\")\n  for(tis in c(\"LH\",\"PL\",\"VO\"))\n  {      \n  foreach(chrom=1:20) %dopar% {\n    \n    alpha &lt;- 0.5\n    window &lt;- 1e6\n    ## DEFINED ABOVE expression_RDS &lt;- glue(\"{WORK}/data/expression/resid_expr_mat_nat.Rdata\")\n##glue(\"{WORK}/data/expression/resid_expr_mat.Rdata\")\n    ##geno_file &lt;- glue(\"./data/geno_by_chr/genotype.chr\" %&% chrom %&% \".txt\")\n    geno_file_chr &lt;- glue(\"{WORK}/data/genotype/nat/geno_by_chr/train_genotype_chr{chrom}.txt\")\n    train_rat_id_file &lt;- glue(\"{WORK}/data/genotype/nat/train_rat_ids_nat.txt\")\n    \n    gene_annot_RDS &lt;- glue(\"{WORK}/data/expression/gene_annotation.RDS\")\n    snp_annot_header = glue(\"{WORK}/data/genotype/snp_annot/snp_annot.chr.\")\n    snp_annot_tail &lt;- glue(\".RDS\")##\"./data/snp_annot/snp_annot.chr\" %&% chrom %&% \".RDS\"\n    ##snp_annot_tail &lt;- glue(\"{WORK}/data/snp_annot/snp_annot.chr.{chrom}.RDS\")##\"./data/snp_annot/snp_annot.chr\" %&% chrom %&% \".RDS\"\n    snp_annot_RDS = glue(\"{snp_annot_header}{chrom}{snp_annot_tail}\")\n    n_k_folds &lt;- 10\n    out_dir &lt;- glue(\"{INPUT}/results/output/\")\n    snpset &lt;- \"place_holder_1KG_snps\"\n\n    fit_model(expression_RDS, geno_file_chr, gene_annot_RDS, snp_annot_RDS, n_k_folds, alpha, out_dir, tis, chrom, snpset, window)\n  }\n    \n  }\n\n\n\n  \n  ##Finally, it is always recommendable to stop the cluster when we are done working with it.\n  parallel::stopCluster(cl = my.cluster)\n\n} else print('Not running training in this knit')\n\n\nconcatenate and make db’s\n\n\n##WORK=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2022-10-16-debug-rat-ptrs-with-larger-brain-transcriptome\"\n\nWORK=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/ratxcan-tutorial\"\n\nalpha=0.5 #$3\nsnpset=\"place_holder_1KG_snps\" #$4\nOUTPUT=$WORK/results/output #$5\n\nCODE=\"/Users/haekyungim/Github/web-internal-notes-quarto/post/2022-10-24-train-rat-brain-expression-predictors/\"\nCURDIR=$(pwd)\ncd $CODE\n\n##c(\"AC\",\"IL\",\"LH\",\"PL\",\"VO\")\n\ntissue='VO' #$1\n\n\nallResults=$WORK/results/all_results_$tissue #$2\nallBetas=$WORK/results/all_betas_$tissue\nallLogs=$WORK/results/all_logs_$tissue\nallCovariances=$WORK/results/all_covariances_$tissue\nallMetadata=$WORK/results/allMetaData_$tissue\n\n\ni=0\nfor resultsfile in $(ls ${OUTPUT}/working_TW_${tissue}_exp_10-foldCV_elasticNet_alpha${alpha}_${snpset}_chr*); do\n  echo \"$resultsfile\"\n        if [ $i -eq 0 ] ; then\n                head -n 1 $resultsfile &gt; $allResults\n                i=1\n        fi\n        tail -n +2 $resultsfile &gt;&gt; $allResults\ndone\necho \"finished collecting $allResults\"\n\ni=0\nfor betafile in $(ls ${OUTPUT}/TW_${tissue}_elasticNet_alpha${alpha}_${snpset}_weights_chr*); do\n  echo \"$betafile\"\n    if [ $i -eq 0 ] ; then\n        head -n 1 $betafile &gt; $allBetas\n        i=1\n    fi\n    tail -n +2 $betafile &gt;&gt; $allBetas\ndone\necho \"Finished collecting $allBetas\"\n\necho \"GENE RSID1 RSID2 VALUE\" &gt; $allCovariances\ni=0\nfor i in {1..20}; do\n    for covfile in $(ls ${OUTPUT}/${tissue}_chr${i}_snpset_${snpset}_alpha_${alpha}_covariances.txt); do\n        echo $covfile\n        cat $covfile &gt;&gt; $allCovariances\n    done\ndone\ngzip $allCovariances\n\n\ni=0\nfor logfile in $(ls ${OUTPUT}/${tissue}_chr*_elasticNet_model_log.txt); do\n  echo $logfile\n        if [ $i -eq 0 ] ; then\n                head -n 1 $logfile &gt; $allLogs\n                i=1\n        fi\n        tail -n +2 $logfile &gt;&gt; $allLogs\ndone\n\n## create meta data, just enough data for the pipeline to work\n##python scripts/create_meta_data.py --geno \"{WORK}/data/genotype.txt\" --expr \"Ac_expression_transformed.tsv\" --alpha 1 --snpset $snpset --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/Ac\"\n\necho -e 'n_samples\\tn_folds_cv\\tsnpset\\trsid_db_snp_label\\talpha\\twindow' &gt; $allMetadata\necho -e '9999\\t10\\t'${snpset}'\\t1\\t0.5\\t1Mb' &gt;&gt; $allMetadata ## not using real sample size\n\n# Putting these into sqlite databases\n## make directory $WORK/results/sql if not existent\nmkdir -p \"$WORK/results/sql\"\n## source ~/Virtualenvs/bioinfo/bin/activate\npython scripts/make_sqlite_db.py --output $WORK/results/sql/$tissue.db --results $WORK/results/all_results_$tissue --construction $WORK/results/all_logs_$tissue --betas $WORK/results/all_betas_$tissue --meta $WORK/results/allMetadata_$tissue\n\n\n\n\ncd $CURDIR\n\n\nfilter out low R2\n\n\nfor(tis in tissuelist)\n{\n  ## read {tis}.db {WEBDATA}/ratxcan-tutorial/results/sql/AC.db\n  db_con = dbConnect(sqlite,glue(\"{INPUT}/results/sql/{tis}.db\"))\n  extra = dbGetQuery(db_con,\"select * from extra\") %&gt;% filter(R2 &gt; 0.01)\n  weights = dbGetQuery(db_con,\"select * from weights\") %&gt;% filter(gene %in% extra$gene)\n  construction = dbGetQuery(db_con, \"select * from construction\")\n  dbDisconnect(db_con)\n  ## sample info was wrong, so dropping here HKI\n  ## create filtered db\n  extra = extra %&gt;% rename(n.snps.in.model=n.snps, pred.perf.R2=R2, pred.perf.pval=pval)\n  extra$pred.perf.qval = NA\n  new_db_con &lt;- dbConnect(sqlite, glue(\"{INPUT}/models/{tis}-filtered.db\"))\n  dbWriteTable(new_db_con, \"extra\", extra)\n  dbWriteTable(new_db_con, \"weights\", weights)\n  dbWriteTable(new_db_con, \"construction\", construction)\n  dbDisconnect(new_db_con)\n}\n\n\ncompare prediction performance\n\n\nsqlite &lt;- dbDriver(\"SQLite\")\n\n##br_hki_file &lt;- glue(\"{INPUT}/models/br-hki.db\")\nbr_db = dbConnect(sqlite,glue(\"{INPUT}/models/Br-hki.db\"))\nperf_br = dbGetQuery(br_db,\"select * from extra\") %&gt;% rename(R2=pred.perf.R2,pval=pred.perf.pval) %&gt;% select(-pred.perf.qval)\ndbDisconnect(br_db)\n\nAC_2024_db = dbConnect(sqlite,glue(\"{INPUT}/results/sql/AC.db\"))\nperf_AC_2024 = dbGetQuery(AC_2024_db,\"select * from extra\")\ndbDisconnect(AC_2024_db)\n\nexplore_db = function(dbname,tis)\n{\n  db_con = dbConnect(sqlite,dbname)\n  perfdf = dbGetQuery(db_con,\"select * from extra\")\n  cat(\"dist of R2\")\n  print(summary(perfdf$R2))\n  R2_filtered = perfdf$R2[perfdf$R2&gt;0.01]\n  print(summary(R2_filtered))\n  hist(perfdf$R2,main=glue(\"{tis} R2\"))\n  cat(nrow(perfdf),\"gene predicted \\n\")\n  cat(nrow(perfdf %&gt;% filter(perfdf$R2&gt;0.01)),\"genes predicted with R2&gt;0.01\\n\")\n  cat(nrow(perfdf %&gt;% filter(perfdf$R2&gt;0.05)),\"genes predicted with pval&lt;0.05\",\"\\n\")\n  hist(perfdf$pval,main=glue(\"{tis} pval\"))\n  print(summary(perfdf$pval))  \n  hist(perfdf$n.snps,main=glue(\"{tis} n snps per gene\"))\n  print(summary(perfdf$n.snps))\n  \n  dbDisconnect(db_con)\n  \n  data.frame(tissue=tis, n_genes_after_R2_filter=length(R2_filtered), meanR2 = mean(R2_filtered))\n\n}\n\ntempo = data.frame()\ntissuelist = c(\"AC\",\"IL\",\"LH\",\"PL\",\"VO\")\nfor(tis in tissuelist)\n{\n  cat(\"\\n---\",tis,\"---\\n\")\n  tempo = rbind(tempo,explore_db(glue(\"{INPUT}/results/sql/{tis}.db\"),tis))\n  cat(\"\\n\")\n  }\n\ntempo"
  },
  {
    "objectID": "ratxcan-paper-code/Heritability_Sparsity_SM.html",
    "href": "ratxcan-paper-code/Heritability_Sparsity_SM.html",
    "title": "Heritability_Sparsity Sabrina",
    "section": "",
    "text": "ge.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\n\n\n\n\nFor each gene, we calculate heritability from its local GRM. Start with creating list of genes for each of the gene expression file:\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\nensidlist &lt;- gexAc$EnsemblGeneID\nensidlist_Il &lt;- gexIl$EnsemblGeneID\nensidlist_Lh &lt;- gexLh$EnsemblGeneID\nensidlist_Pl &lt;- gexPl$EnsemblGeneID\nensidlist_Vo &lt;- gexVo$EnsemblGeneID\n\n\n# Read in bim files for each tissue\nbimfile &lt;- ge.dir %&% \"rat_genome_Ac.bim\" ###get SNP position information###\nbimfile_Lh &lt;- ge.dir %&% \"rat_genome_Lh.bim\"\nbimfile_Il &lt;- ge.dir %&% \"rat_genome_Il.bim\"\nbimfile_Pl &lt;- ge.dir %&% \"rat_genome_Pl.bim\"\nbimfile_Vo &lt;- ge.dir %&% \"rat_genome_Vo.bim\"\n\nbim &lt;- read.table(bimfile)\nbim_Lh &lt;- read.table(bimfile_Lh)\nbim_Il &lt;- read.table(bimfile_Il)\nbim_Pl &lt;- read.table(bimfile_Pl)\nbim_Vo &lt;- read.table(bimfile_Vo)\n\nrownames(bim) &lt;- bim$V2\nrownames(bim_Lh) &lt;- bim_Lh$V2\nrownames(bim_Il) &lt;- bim_Il$V2\nrownames(bim_Pl) &lt;- bim_Pl$V2\nrownames(bim_Vo) &lt;- bim_Vo$V2\n\nWe run gcta Ac plink files and gene annotation to generate local GRMs, then h2 calculations.\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Ac/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene &lt;- ensidlist[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim,bim[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Ac.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Ac --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Ac.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist)){\n    cat(i,\"of\",length(ensidlist),\"\\n\")\n    ensid &lt;- ensidlist[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexAc)[c(-1)]\n  expression &lt;- as.character(gexAc[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nRepeat for Il:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Il/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"/\",length(ensidlist_Il),\"\\n\")\n    gene &lt;- ensidlist_Il[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Il,bim_Il[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Il.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Il --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Il.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"of\",length(ensidlist_Il),\"\\n\")\n    ensid &lt;- ensidlist_Il[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexIl)[c(-1)]\n  expression &lt;- as.character(gexIl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nLh:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Lh/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"/\",length(ensidlist_Lh),\"\\n\")\n    gene &lt;- ensidlist_Lh[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Lh,bim_Lh[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Lh.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Lh --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Lh.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"of\",length(ensidlist_Lh),\"\\n\")\n    ensid &lt;- ensidlist_Lh[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexLh)[c(-1)]\n  expression &lt;- as.character(gexLh[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nPl:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Pl/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"/\",length(ensidlist_Pl),\"\\n\")\n    gene &lt;- ensidlist_Pl[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Pl,bim_Pl[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Pl.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Pl --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Pl.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"of\",length(ensidlist_Pl),\"\\n\")\n    ensid &lt;- ensidlist_Pl[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexPl)[c(-1)]\n  expression &lt;- as.character(gexPl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nVo\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Vo/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"/\",length(ensidlist_Vo),\"\\n\")\n    gene &lt;- ensidlist_Vo[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Vo,bim_Vo[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Vo.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Vo --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Vo.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"of\",length(ensidlist_Vo),\"\\n\")\n    ensid &lt;- ensidlist_Vo[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexVo)[c(-1)]\n  expression &lt;- as.character(gexVo[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}"
  },
  {
    "objectID": "ratxcan-paper-code/Heritability_Sparsity_SM.html#definitions",
    "href": "ratxcan-paper-code/Heritability_Sparsity_SM.html#definitions",
    "title": "Heritability_Sparsity Sabrina",
    "section": "",
    "text": "ge.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")"
  },
  {
    "objectID": "ratxcan-paper-code/Heritability_Sparsity_SM.html#calculate-cis-heritability-within-1mb",
    "href": "ratxcan-paper-code/Heritability_Sparsity_SM.html#calculate-cis-heritability-within-1mb",
    "title": "Heritability_Sparsity Sabrina",
    "section": "",
    "text": "For each gene, we calculate heritability from its local GRM. Start with creating list of genes for each of the gene expression file:\n\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\nensidlist &lt;- gexAc$EnsemblGeneID\nensidlist_Il &lt;- gexIl$EnsemblGeneID\nensidlist_Lh &lt;- gexLh$EnsemblGeneID\nensidlist_Pl &lt;- gexPl$EnsemblGeneID\nensidlist_Vo &lt;- gexVo$EnsemblGeneID\n\n\n# Read in bim files for each tissue\nbimfile &lt;- ge.dir %&% \"rat_genome_Ac.bim\" ###get SNP position information###\nbimfile_Lh &lt;- ge.dir %&% \"rat_genome_Lh.bim\"\nbimfile_Il &lt;- ge.dir %&% \"rat_genome_Il.bim\"\nbimfile_Pl &lt;- ge.dir %&% \"rat_genome_Pl.bim\"\nbimfile_Vo &lt;- ge.dir %&% \"rat_genome_Vo.bim\"\n\nbim &lt;- read.table(bimfile)\nbim_Lh &lt;- read.table(bimfile_Lh)\nbim_Il &lt;- read.table(bimfile_Il)\nbim_Pl &lt;- read.table(bimfile_Pl)\nbim_Vo &lt;- read.table(bimfile_Vo)\n\nrownames(bim) &lt;- bim$V2\nrownames(bim_Lh) &lt;- bim_Lh$V2\nrownames(bim_Il) &lt;- bim_Il$V2\nrownames(bim_Pl) &lt;- bim_Pl$V2\nrownames(bim_Vo) &lt;- bim_Vo$V2\n\nWe run gcta Ac plink files and gene annotation to generate local GRMs, then h2 calculations.\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Ac/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene &lt;- ensidlist[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim,bim[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Ac.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Ac --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Ac.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist)){\n    cat(i,\"of\",length(ensidlist),\"\\n\")\n    ensid &lt;- ensidlist[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexAc)[c(-1)]\n  expression &lt;- as.character(gexAc[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nRepeat for Il:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Il/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"/\",length(ensidlist_Il),\"\\n\")\n    gene &lt;- ensidlist_Il[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Il,bim_Il[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Il.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Il --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Il.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Il)){\n    cat(i,\"of\",length(ensidlist_Il),\"\\n\")\n    ensid &lt;- ensidlist_Il[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexIl)[c(-1)]\n  expression &lt;- as.character(gexIl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nLh:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Lh/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"/\",length(ensidlist_Lh),\"\\n\")\n    gene &lt;- ensidlist_Lh[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Lh,bim_Lh[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Lh.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Lh --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Lh.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Lh)){\n    cat(i,\"of\",length(ensidlist_Lh),\"\\n\")\n    ensid &lt;- ensidlist_Lh[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexLh)[c(-1)]\n  expression &lt;- as.character(gexLh[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nPl:\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Pl/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"/\",length(ensidlist_Pl),\"\\n\")\n    gene &lt;- ensidlist_Pl[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Pl,bim_Pl[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Pl.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Pl --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Pl.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Pl)){\n    cat(i,\"of\",length(ensidlist_Pl),\"\\n\")\n    ensid &lt;- ensidlist_Pl[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexPl)[c(-1)]\n  expression &lt;- as.character(gexPl[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}\n\nVo\n\ngt.dir &lt;- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/Vo/\"\npheno.dir &lt;- gt.dir %&% \"phenotype_files/\"\ngrm.dir &lt;- gt.dir %&% \"GRMs/\"\nh2.dir &lt;- gt.dir %&% \"h2_output/\"\n\n#Make local GRMs for each gene\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"/\",length(ensidlist_Vo),\"\\n\")\n    gene &lt;- ensidlist_Vo[i]\n    geneinfo &lt;- gtf[match(gene, gtf$Gene),]\n    chr &lt;-geneinfo[1]\n    c &lt;- chr$Chr\n    start &lt;- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end &lt;- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps &lt;- subset(bim_Vo,bim_Vo[,1]==c) ### pull snps on same chr\n    cissnps &lt;- subset(chrsnps,chrsnps[,4]&gt;=start & chrsnps[,4]&lt;=end) ### pull cis-SNP info\n    snplist &lt;- cissnps[,2]    \n    write.table(snplist, file= gt.dir %&% \"tmp.Vo.SNPlist\",quote=FALSE,col.names=FALSE,row.names=FALSE)\n    runGCTAgrm &lt;- \"gcta --bfile \" %&%  ge.dir %&% \"rat_genome_Vo --make-grm-bin --extract \" %&% gt.dir %&% \"tmp.Vo.SNPlist\" %&% \" --out \" %&% grm.dir %&%  gene\n    system(runGCTAgrm)\n}\n\n#Calculate h2\nfor(i in 1:length(ensidlist_Vo)){\n    cat(i,\"of\",length(ensidlist_Vo),\"\\n\")\n    ensid &lt;- ensidlist_Vo[i]\n    gene &lt;- as.character(gtf[match(ensid, gtf$Gene),10])\n    chr &lt;- as.character(gtf[match(ensid, gtf$Gene),1])\n  individuals &lt;- colnames(gexVo)[c(-1)]\n  expression &lt;- as.character(gexVo[i,c(-1)])\n    #output expression pheno for gcta\n    geneexp &lt;- data.frame(\n      famid = individuals,\n      id = individuals,\n      expr = expression\n    )\n    write.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% ensid, col.names=FALSE, row.names = FALSE, quote=FALSE) #output pheno for gcta\n    ## Y ~ localGRM\n    runLOC &lt;- \"gcta --grm \" %&% grm.dir %&% ensid %&% \" --reml --pheno \" %&% pheno.dir %&% \"tmp.pheno.\" %&% ensid %&% \" --out \" %&% h2.dir %&% \"tmp.\" %&% ensid\n    system(runLOC)\n}"
  },
  {
    "objectID": "ratxcan-paper-code/index.html",
    "href": "ratxcan-paper-code/index.html",
    "title": "RatXcan Tutorial",
    "section": "",
    "text": "genotype (plink bed/bim/fam format)\nphenotype (TSV with columns FID, IID, phenotypes)\nprediction weights (*.db examples on https://predictdb.org)\n\nAll of the data and prediction models used in the tutorial can be downloaded from Box: https://uchicago.box.com/v/ratxcan-tutorial."
  },
  {
    "objectID": "ratxcan-paper-code/index.html#data-requirements",
    "href": "ratxcan-paper-code/index.html#data-requirements",
    "title": "RatXcan Tutorial",
    "section": "",
    "text": "genotype (plink bed/bim/fam format)\nphenotype (TSV with columns FID, IID, phenotypes)\nprediction weights (*.db examples on https://predictdb.org)\n\nAll of the data and prediction models used in the tutorial can be downloaded from Box: https://uchicago.box.com/v/ratxcan-tutorial."
  },
  {
    "objectID": "ratxcan-paper-code/index.html#software-requirements",
    "href": "ratxcan-paper-code/index.html#software-requirements",
    "title": "RatXcan Tutorial",
    "section": "Software Requirements",
    "text": "Software Requirements\n\nplink\ngcta\nmetaxcan (included in Box folder)\n\nset up conda environment\n\n\nconda env create -f /Users/sabrinami/ratxcan-tutorial/MetaXcan/software/conda_env.yaml\nconda activate imlabtools\nAlso check that the folders containing compiled plink and gcta binary files are in your $PATH variable."
  },
  {
    "objectID": "ratxcan-paper-code/index.html#setup",
    "href": "ratxcan-paper-code/index.html#setup",
    "title": "RatXcan Tutorial",
    "section": "Setup",
    "text": "Setup\nIn this section, we generate all results needed for the mixed effects modeling (predicted gene expression, genetic relatedness, and heritability)\n\nDefine Paths\nPRE=\"/Users/sabrinami/ratxcan-tutorial\" ## Replace with path to downloaded ratxcan-tutorial folder\n\nOUTPUT=\"$PRE/output\"\n\nMETAXCAN=\"$PRE/MetaXcan\"\nMODEL=\"$PRE/models\"\n\nGENO_PREFIX=\"$PRE/data/genotype/rat6k\"\nPrediXcan requires input genotypes in VCF format:\nplink --bfile $GENO_PREFIX --recode vcf --out $GENO_PREFIX\ngzip ${GENO_PREFIX}.vcf\n\n\nPredict Expression\nThe models folder contains PrediXcan prediction models trained on 5 tissues:\n\nnucleus accumbens (AC-filtered.db)\ninfralimbic cortex (IL-filtered.db)\nlateral habenula (LH-filtered.db)\nprelimbic cortex (PL-filtered.db)\norbitofrontal cortex (VO-filtered.db)\n\nFor the tutorial, we’ll use the AC model.\nconda activate imlabtools\npython ${METAXCAN}/software/Predict.py \\\n--model_db_path ${MODEL}/AC-filtered.db \\\n--model_db_snp_key rsid \\\n--vcf_genotypes ${GENO_PREFIX}.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}\" \\\n--prediction_output $OUTPUT/AC-filtered-rat6k__predict.txt  \\\n--prediction_summary_output $OUTPUT/AC-filtered-rat6k__summary.txt \\\n--throw\n\n\nCompute Genetic Relatedness and Heritability\nGCTA outputs a genetic relatedness matrix (GRM), then computes heritability (h2) for a given phenotype data. The following example uses bodylength data.\n## Compute GRM\ngcta --bfile $GENO/rat6k --make-grm-bin --out $OUTPUT/rat6k\n## Compute h2\n## argument --mpheno specifies fam column to be used as phenotype, 1 for bodylength and 2 for bmi\ngcta --grm $OUTPUT/rat6k --reml --pheno $PRE/data/phenotype/pheno.fam --mpheno 1 --out $OUTPUT/bodylen_h2\nHeritability is estimated as V(G)/Vp Variance. In this case, we extract h2_bodylen = 0.390288 from the gcta results summary:\nSummary result of REML analysis:\nSource  Variance    SE\nV(G)    0.395810    0.027842\nV(e)    0.618337    0.014383\nVp  1.014147    0.027031\nV(G)/Vp 0.390288    0.019209"
  },
  {
    "objectID": "ratxcan-paper-code/index.html#prepare-inputs-for-mixed-effect-model",
    "href": "ratxcan-paper-code/index.html#prepare-inputs-for-mixed-effect-model",
    "title": "RatXcan Tutorial",
    "section": "Prepare Inputs for Mixed Effect Model",
    "text": "Prepare Inputs for Mixed Effect Model\n\nSetup\nLoad Libraries and Gist Functions:\nReplace with your path to downloaded ratxcan-tutorial folder:\n\n\nRead in GRM, h2, phenotypes, and predicted gene expression\n\n\nRows: 5628 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): X1, X2\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 10 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Source\ndbl (2): Variance, SE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 5401 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): X1, X2\ndbl (2): X3, X4\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 5628 Columns: 5881\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (2): FID, IID\ndbl (5879): ENSRNOG00000015552, ENSRNOG00000016054, ENSRNOG00000049505, ENSR...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nSummarize median predicted expression for all genes:\n\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-4742.218    -0.442     0.000    -0.646     0.368  1998.544 \n\n\nPlot distribution of median gene expression with outliers removed:\n\n\n\n\n\nFinal check that IIDs between phenotype and genotype matrices align:\n\n\nConvert to Matrices"
  },
  {
    "objectID": "ratxcan-paper-code/index.html#ratxcan-association",
    "href": "ratxcan-paper-code/index.html#ratxcan-association",
    "title": "RatXcan Tutorial",
    "section": "RatXcan Association",
    "text": "RatXcan Association\nThe end goal is to compute gene-level associations under the mixed effect model \\(Y = T b + u + \\epsilon\\), where\n\n\\(Y\\) is the phenotype\n\\(T\\) is predicted gene expression\n\\(u\\) is the random effect with covariance given by the genetic relatedness matrix (\\(GRM\\))\n\\(\\epsilon\\) is uncorrelated noise\n\nThe difference between RatXcan and PrediXcan is the \\(u\\) term accounting for correlated effects due to relatedness. The \\(GRM\\) and \\(h2\\) estimates are needed to decorrelate the error term \\(u+\\epsilon\\), so that traditional linear regression can replace mixed modeling fitting.\n\nRun regression\nlmmGRM performs the decorrelation and linear regression. It takes phenotype, GRM, h2, and predicted expression as input, and computes gene-level correlation and p-value with and without correction accounting for relatedness.\n\n\n5401 samples, 5879 genes used in association test\n\n\n\n\nPlot P-values\nThe following QQ-plot shows the distribution of p-values of gene-trait associations: blue dots are the p-values with mixed effects correction and black dots are the inflated p-values.\n\n\n\n\n\nThe following Manhattan plot was generated with Natasha Santhanam’s function:\n\nWe used biomaRt to annotate genes:\n\n\nRows: 10933 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): gene_name, hugo_gene, trait, gene, gene_id\ndbl (12): p_acat_6, chr, start, qval, p_human, BR, AC, IL, LH, PL, VO, p_acat_5\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThe full RatXcan results includes tissue-specific p-values (AC, IL, LH, PL, VO) and a combination p-value (ACAT), as well as PhenomeXcan results for corresponding human phenotypes and genes. The datasets are included in the data subdirectory and accessible on https://imlab.shinyapps.io/RatXcan/."
  },
  {
    "objectID": "ratxcan-paper-code/Coregualtion_across_Tissues_Species.html",
    "href": "ratxcan-paper-code/Coregualtion_across_Tissues_Species.html",
    "title": "Coregulation_across_Tissues_Species",
    "section": "",
    "text": "library(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(Hmisc)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndir &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/\"\nset.seed(777)\n\n\nCorrelation between genes within each tissue and then calculate correlation of the correlation between genes across tissues\n\n\nfilelist &lt;- list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/metabolic_traits\", pattern = \"predict.txt\", full.names = TRUE)\north.rats &lt;- read_tsv(dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n\nGenerate Correlation Matrices for 100 rats - compare predicted Expression across tissues\n\nnames &lt;- read_tsv(filelist[1]) %&gt;% select(c(FID))\n\nfor(i in 1:100) {\n  id = sample(names$FID, size = 1)\n  tempo &lt;- data.frame(gene = as.character())\n  for(fila in filelist) {\n    name &lt;- substr(fila, 89,90)\n    tis &lt;- fread(fila) %&gt;% filter(FID == id) %&gt;% pivot_longer(!c(FID, IID), names_to = \"gene\", values_to = name) %&gt;% select(-c(FID, IID))\n    tempo &lt;- full_join(tempo, tis,  by = \"gene\")\n  } \n  tempo &lt;- tempo %&gt;% mutate(var = apply(tempo[,-1], 1, var)) %&gt;% na.omit()\n  saveRDS(tempo, dir %&% \"prediXcan/GREx_comp/cor_tis_per_ind/\" %&% id %&% \".GREx.mat.RDS\")\n}\n\nCheck heatmap of some individuals\n\ni1 &lt;- readRDS(\"/Users/natashasanthanam/Downloads/00077E6712.cor.mat.RDS\")\ni2 &lt;- readRDS(\"/Users/natashasanthanam/Downloads/00077E7788.cor.mat.RDS\")\n\nmelted_i1 &lt;- melt(i1, na.rm = TRUE)\nmelted_i2 &lt;- melt(i2, na.rm = TRUE)\n\np1= ggplot(data = melted_i1, aes(x=Var1, y=Var2, fill=value)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(),) + ggtitle(\"00077E6712\") + theme(aspect.ratio = 1)\np2= ggplot(data = melted_i2, aes(x=Var1, y=Var2, fill=value)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(),) + ggtitle(\"00077E7788\") + theme(aspect.ratio = 1)\n\nggarrange(p1, p2, ncol=2)\n\nLook at all genes across tissues in one individual Evidence of shared regulation across tissues\n\ni3 = readRDS(\"/Users/natashasanthanam/Downloads/00077E83E3.GREx.mat.RDS\") %&gt;% dplyr::select(-c(gene, var))\npairs(i3)\n\n\nCo-regulation Shared Across Species\n\n\ngene_ids &lt;- data.frame(id = fread(filelist[1]) %&gt;% select(-c(FID, IID)) %&gt;%  colnames()\nfor(fila in filelist[2:length(filelist)]) {\n  df &lt;- data.frame(id = fread(fila) %&gt;% select(-c(FID, IID)) %&gt;%  colnames())\n  gene_ids &lt;- inner_join(gene_ids, df, by = \"id\")\n}\n\n\ngtf &lt;- fread(dir %&% \"Box_files/gtf.txt\", header = TRUE)\ngtf &lt;-  gtf[match(tempo$id, gtf$Gene),]\n \nfor(i in 1:20) {\n  tempo &lt;- gtf %&gt;% filter(Chr == i) %&gt;% select(c(Gene))\n  if(nrow(tempo) == 0 ) {\n  i = i+1  \n  }\n  else {\n  df &lt;- data.frame(row = as.character(), column = as.character())\n  for(fila in filelist) {\n    tis &lt;- substr(fila, 58,59)\n    expr &lt;- as.data.frame(fread(fila) %&gt;% select(-c(FID, IID)))\n    expr &lt;- expr[,intersect(tempo$Gene, colnames(expr))]\n    res2&lt;-rcorr(as.matrix(expr[,]))\n  d2 &lt;- flattenCorrMatrix(res2$r, res2$P)\n    colnames(d2)[3] = tis\n    colnames(d2)[4] = paste(\"p\", tis, sep = \"_\")\n    df &lt;- full_join(df, d2, by = c(\"row\", \"column\"))\n  }\n  saveRDS(df, dir %&% \"prediXcan/GREx_comp/cor_genes_per_chr/chr\" %&% i %&% \".RDS\" )\n  }\n}\n\nSave correlation of coregulation across tissues\n\ncoreg.dir &lt;- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/cor_genes_per_chr\"\nfilelist &lt;- list.files(coreg.dir, pattern = \".RDS\", full.names = TRUE)\n\nfor(fila in filelist) {\n  tempo &lt;- readRDS(fila) %&gt;% select(c(row, column, Ac, Il, Pl, Lh, Vo)) %&gt;%\n  i &lt;- substr(fila, 89, str_length(fila)- 4)\n  cor.mat &lt;-  cor(tempo[,3:7])\n  saveRDS(cor.mat, dir %&% \"prediXcan/GREx_comp/cor_genes_per_chr/cor_coreg_chr\" %&% i %&% \".RDS\")\n}\n\nGraph of Correlation of Coregulation across tissues\n\ndata.dir &lt;- \"/Users/natashasanthanam/CRI/\"\nfilelist &lt;- list.files(data.dir, pattern=\"cor_coreg\", full.names = TRUE)\ncorr_coreg &lt;- list()\n\nfor(fila in filelist) {\n  i &lt;- match(fila, filelist)\n  corr_coreg[[i]] &lt;- readRDS(fila)\n}\n\nGenerate Coregulation in Humans (GTEx)\nFirst generate predicted expression in G1000 using GTEx models\n\nconda activate imlabtools\nexport METAXCAN=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/MetaXcan/software\nexport GENO=/gpfs/data/im-lab/nas40t2/Data/dbGaP/Transcriptome/G1000/imputed_hrc1.1\nexport MODEL=/gpfs/data/im-lab/nas40t2/Data/PredictDB/GTEx_v8/models_v1/eqtl/ctimp\nexport RESULTS=/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/PTRS_weights/PGP\nexport DATA=/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/predixcan\n\nprintf \"Predict expression\\n\\n\"\n\npython3 $METAXCAN/Predict.py \\\n--model_db_path $MODEL/ctimp_$TISSUE.db \\\n--model_db_snp_key varID \\\n--vcf_genotypes $GENO/chr*.dose.vcf.gz  \\\n--vcf_mode genotyped \\\n--liftover $DATA/hg19ToHg38.over.chain.gz  \\\n--on_the_fly_mapping METADATA \"chr{}_{}_{}_{}_b38\" \\\n--prediction_output $RESULTS/G1000__$TISSUE.predict.txt \\\n--prediction_summary_output $RESULTS/G1000__$TISSUE.summary.txt \\\n--verbosity 9 \\\n--throw\n\nTISSUE=Brain_Cerebellum\n\n\nflattenCorrMatrix &lt;- function(cormat, pmat) {\n  ut &lt;- upper.tri(cormat)\n  data.frame(\n    row = rownames(cormat)[row(cormat)[ut]],\n    column = rownames(cormat)[col(cormat)[ut]],\n    cor  =(cormat)[ut],\n    p = pmat[ut]\n    )\n}\n\nCalculate Coregulation between genes in GTEx\n\ngtf &lt;- fread(\"/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/annotations_gencode_v26.tsv\", header = TRUE)\n\n for(i in 1:20) {\n  tempo &lt;- gtf %&gt;% filter(chromosome == paste(\"chr\", i, sep=\"\")) %&gt;% select(c(gene_id))\n  expr &lt;- as.data.frame( fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/G1000_less_mem__Brain_Cerebellum.predict.txt\")) %&gt;% select(-c(FID, IID)) \n colnames(expr) = sapply(strsplit(colnames(expr), \"\\\\.\"), `[`, 1)\n    expr &lt;- expr[, intersect(tempo$gene_id, colnames(expr))]\n   res2&lt;-rcorr(as.matrix(expr[,]))\n  d2 &lt;- flattenCorrMatrix(res2$r, res2$P)\nsaveRDS(d2, dir %&% \"prediXcan/GREx_comp/cor_GTEx_genes_per_chr/GTEx_chr\" %&% i %&% \".RDS\" )\n }\n\n#Can also calculate correlation between genes in GTEx for all genes\nexpr &lt;- as.data.frame( fread(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/prediXcan/GREx_comp/G1000_less_mem__Brain_Cerebellum.predict.txt\")) %&gt;% select(-c(FID, IID)) \n colnames(expr) = sapply(strsplit(colnames(expr), \"\\\\.\"), `[`, 1)\n res2&lt;-rcorr(as.matrix(expr[,]))\n  d2 &lt;- flattenCorrMatrix(res2$r, res2$P)\n\nCheck if Coregualtion is preserved across species\nPlot Coregulation across species\n\np.dir &lt;- \"/Users/natashasanthanam/CRI/\"\nfilelist &lt;- list.files(p.dir, pattern = \"all\", full.names = TRUE)\n\nfor(fila in filelist) {\n  df &lt;- readRDS(fila)\n  pairs(df)\n}\n\nHeatmap ordered with TSS\n\nonly_GTEx &lt;- readRDS(\"/Users/natashasanthanam/Downloads/cor_pred_expr_GTEx_all_genes.RDS\") %&gt;% select(-c(p)) %&gt;% mutate(start = gtf[match(only_GTEx$row, gtf$gene_id), 5]$start) %&gt;% distinct(row, column, .keep_all = TRUE)\n\nGTEx_ordered &lt;- only_GTEx[sort(only_GTEx$start),]\n\nGTEx_chr2_genes &lt;- only_GTEx[na.omit(match(gtf$gene_id, only_GTEx$row)), ]\n\np3= ggplot(data = GTEx_ordered, aes(x=row, y=column, fill=cor)) + \n  geom_tile() + theme(\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank(), axis.text = element_text(size = 2)) + ggtitle(\"Heatmap for predicted expression in GTEx Cerebellum\")\np3\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#input-data",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#input-data",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "input data",
    "text": "input data\n\ngenotype\nphenotype\nprediction weights"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#load-libraries-and-functions",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#load-libraries-and-functions",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "load libraries and functions",
    "text": "load libraries and functions\n\n#options(error=recover)\n#options(error=browser)\noptions(error=NULL)\n\n## compare observed correlation with null correlation\nsuppressMessages(devtools::source_gist(\"a925fea01b365a8c605e\")) ## load qqR fn https://gist.github.com/hakyim/a925fea01b365a8c605e\nsuppressMessages(devtools::source_gist(\"38431b74c6c0bf90c12f\")) ## qqunif https://gist.github.com/hakyim/38431b74c6c0bf90c12f\nsuppressMessages(devtools::source_gist(\"115403f16bec0a0e871f3616d552ce9b\")) ## source ratxcan functions https://gist.github.com/hakyim/115403f16bec0a0e871f3616d552ce9b \n\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(glue))\nsuppressMessages(library(RSQLite))\n#suppressMessages(library(expm))\n#suppressMessages(library(readxl))\n# install.packages(\"devtools\")\n# library(\"devtools\")\n# install_github(\"jdstorey/qvalue\")\nsuppressMessages(library(qvalue))\n# if (!require(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# \n# BiocManager::install(\"biomaRt\")\n##suppressMessages(library(biomaRt))\n##install.packages(\"ggrepel\")\nsuppressMessages(library(ggrepel))\n\n\ntraitlist = c(\"bodylen\",\"bmi\")\ntissuelist = c(\"AC\", \"IL\", \"LH\", \"PL\", \"VO\")\nphenolist = c(\"Standing height\",\"Body mass index (BMI) (21001_raw)\")\nnames(phenolist) = c(\"bodylen\",\"bmi\")"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#download-data-for-the-tutorial",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#download-data-for-the-tutorial",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "download data for the tutorial",
    "text": "download data for the tutorial\n\ndownload files from here The folder structure should look like the list below\n\n\n(base) MBP-HKI-22 ratxcan-tutorial $ tree -L 3\n.\n├── data\n│  ├── expression\n│   │   └── gene_annotation.RDS\n│   ├── genotype\n│   │   ├── DELETE\n│   │   ├── rat6k_autosome.bed\n│   │   ├── rat6k_autosome.bim\n│   │   └── rat6k_autosome.fam\n│   ├── phenomexcan\n│   │   └── phenomexcan_results.RDS\n│   └── phenotype\n│       └── pheno.fam\n├── models\n│   ├── Ac_best_prediXcan_db.db\n│   ├── Br-hki.db\n│   ├── Il_best_prediXcan_db.db\n│   ├── Lh_best_prediXcan_db.db\n│   ├── Pl_best_prediXcan_db.db\n│   └── Vo_best_prediXcan_db.db\n└── software\n    └── MetaXcan\n        ├── CODE_OF_CONDUCT.md\n        ├── DevNotes.Rmd\n        ├── LICENSE\n        ├── README.md\n        ├── codemap\n        ├── papers\n        └── software"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-data-and-software-paths-for-r",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-data-and-software-paths-for-r",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "define data and software paths for R",
    "text": "define data and software paths for R\n\nWEBDATA=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n\nPLINK=\"/Users/haekyungim/bin/plink_mac_20231211/plink\"\nGCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\"\n\nINPUT &lt;- glue(\"{WEBDATA}/ratxcan-tutorial\") ## this has the input data \nOUTPUT &lt;- glue(\"{WEBDATA}/2023-11-27-ratxcan-tutorial/scratch\") ## this has the output data, intermediate results"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-data-and-software-for-the-terminal",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-data-and-software-for-the-terminal",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "define data and software for the terminal",
    "text": "define data and software for the terminal\n\nWEBDATA=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n\nPLINK=\"/Users/haekyungim/bin/plink_mac_20231211/plink\"\nGCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\"\n  \nINPUT=$WEBDATA/ratxcan-tutorial\nOUTPUT=$WEBDATA/2023-11-27-ratxcan-tutorial/scratch"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#set-up-conda-environment-to-run-predict-expression",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#set-up-conda-environment-to-run-predict-expression",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "set up conda environment to run predict expression",
    "text": "set up conda environment to run predict expression\n\nconda create -n rat311 python=3.11\nconda activate rat311\nconda install pandas scipy numpy statsmodels\nconda install h5py\n## missing modules probably due to M2 processor\n## NOT NEEDED conda install bgen_reader\npip install pyliftover\npip install cyvcf2  ## pip intall worked on my macbook M2"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#predict-expression",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#predict-expression",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "predict expression",
    "text": "predict expression\n\n#WEBDATA=\"/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data\"\n#PLINK=\"/Users/haekyungim/bin/plink_mac_20231211/plink\"\n#GCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\"\n#INPUT=$WEBDATA/ratxcan-tutorial\n#OUTPUT=$WEBDATA/2023-11-27-ratxcan-tutorial/scratch\n\n## convert plink file to vcf\n#$PLINK --bfile $GENO_HEADER --recode vcf --out $GENO_HEADER\n#gzip $GENO_HEADER.vcf ## to keep file small\n\nconda activate rat311\n\nMETAXCAN=$INPUT/software/MetaXcan\nGENO=$INPUT/data/genotype\nGENO_HEADER=$GENO/rat6k_autosome\nMODEL=$INPUT/models\n\n## predict Ac\nMODLEFT=\"VO-filtered\"\nMODEL_DB=\"$MODLEFT.db\"\npython $METAXCAN/software/Predict.py \\\n--model_db_path $MODEL/$MODEL_DB \\\n--model_db_snp_key rsid \\\n--vcf_genotypes ${GENO_HEADER}.vcf.gz \\\n--vcf_mode genotyped \\\n--on_the_fly_mapping METADATA \"{}_{}_{}_{}\" \\\n--prediction_output $OUTPUT/${MODLEFT}__predict.txt  \\\n--prediction_summary_output $OUTPUT/${MODLEFT}__summary.txt \\\n--throw"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#compare-with-previous-prediction-of-ac",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#compare-with-previous-prediction-of-ac",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "compare with previous prediction of Ac",
    "text": "compare with previous prediction of Ac\n\noldexpr &lt;- vroom::vroom(glue(\"{OUTPUT}/Ac-hki-large_geno__predict.txt\")) %&gt;% \n  select(-FID) %&gt;%  # Remove the FID column\n  mutate(IID = str_split(IID, \"_\", simplify = TRUE)[, 1])  # Keep the first part of IID\n\nfor(tis in tissuelist)\n{\n  new_pred_expr &lt;- vroom::vroom(glue(\"{OUTPUT}/{tis}-filtered__predict.txt\")) %&gt;% \n  select(-FID) %&gt;%  # Remove the FID column\n  mutate(IID = str_split(IID, \"_\", simplify = TRUE)[, 1])  # Keep the first part of IID\n\n  kk=calc_cor_matched_cols(oldexpr,new_pred_expr)\n  hist(kk$cor,main=paste(tis, \"vs. old Ac-hki-large_geno\") )\n  mtext(paste(sum(kk$cor&lt;0), \"genes with negative cor\") )\n\n}"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-phenotype-and-check-that-ids-are-included-in-genotype-fam-file",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-phenotype-and-check-that-ids-are-included-in-genotype-fam-file",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "read phenotype and check that ids are included in genotype fam file",
    "text": "read phenotype and check that ids are included in genotype fam file\n\n## DO EVAL #| eval: FALSE\n## check whether ids in the phenotype file are in the genotype file\npheno = read_tsv(glue(\"{INPUT}/data/phenotype/pheno.fam\"),col_names = FALSE)\nfam = read_table(glue(\"{INPUT}/data/genotype/rat6k_autosome.fam\"),col_names = FALSE)\nif( pheno %&gt;% filter(X1 %in% fam$X1) %&gt;% nrow != nrow(pheno) ) message(\"WARNING: missing pheno ids with missing genotypes\") \nnames(pheno) = c(\"FID\",\"IID\",\"bodylen\",\"bmi\")"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-gene-annotation",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-gene-annotation",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "read gene annotation",
    "text": "read gene annotation\n\ngene_annotation &lt;- readRDS(glue(\"{INPUT}/data/expression/gene_annotation.RDS\"))"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#calculate-grm",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#calculate-grm",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "calculate GRM",
    "text": "calculate GRM\n\n## - [ ] calculate GRM from genotype\n## GCTA=\"/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64\" ## defined at the top\n$GCTA --bfile $GENO0/rat6k_autosome --make-grm-bin --out $OUTPUT/rat6k_autosome\n#Analysis finished at 00:31:49 CST on Fri Dec 01 2023\n#Overall computational time: 1 minute 15 sec"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#calculate-h2",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#calculate-h2",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "calculate h2",
    "text": "calculate h2\n\n## 1 after --mpheno will use bodylen as phenotype\n$GCTA --grm $OUTPUT/rat6k_autosome --reml --pheno $INPUT/data/phenotype/pheno.fam --mpheno 1 --out $OUTPUT/bodylen_h2\n## 2 after --mpheno will use bmi as phenotype\n$GCTA --grm $OUTPUT/rat6k_autosome --reml --pheno $INPUT/data/phenotype/pheno.fam --mpheno 2 --out $OUTPUT/bmi_h2"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-h2",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-h2",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "read h2",
    "text": "read h2\n\ntempo = read_tsv(glue(\"{OUTPUT}/bodylen_h2.hsq\")) %&gt;% filter(Source==\"V(G)/Vp\") \nbodylen_h2 = tempo %&gt;% pull(Variance)\nbodylen_se = tempo %&gt;% pull(SE)\ntempo = read_tsv(glue(\"{OUTPUT}/bmi_h2.hsq\")) %&gt;% filter(Source==\"V(G)/Vp\") \nbmi_h2 = tempo %&gt;% pull(Variance)\nbmi_se = tempo %&gt;% pull(SE)"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-grm-matrix",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-grm-matrix",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "read grm matrix",
    "text": "read grm matrix\n\ngrm_mat &lt;- read_GRMBin(glue(\"{OUTPUT}/rat6k_autosome.grm\"))"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-predicted-expression",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#read-predicted-expression",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "read predicted expression",
    "text": "read predicted expression\n\nread_pred_expr = function(filename)\n{\n  ##usage: Br_pred_expr = read_pred_expr(glue(\"{OUTPUT}/Br-hki-rat6k__predict.txt\"))\n  pred_expr &lt;- vroom::vroom(filename) %&gt;% \n  select(-FID) %&gt;%  # Remove the FID column\n  mutate(IID = str_split(IID, \"_\", simplify = TRUE)[, 1])  # Keep the first part of IID\n  pred_expr\n}"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#show-calibration-of-type-i-error-remove-from-tutorial",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#show-calibration-of-type-i-error-remove-from-tutorial",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "show calibration of type I error REMOVE FROM TUTORIAL",
    "text": "show calibration of type I error REMOVE FROM TUTORIAL\n\nsimulate genetic effect sizes for nsnp\n\n## on the terminal generate\n## $PLINK --bfile $INPUT/data/genotype/rat6k_autosome --freq --out rat6k_autosome \n## simulate unrelated Y\nnsim = 100 \n## to get nsip, read bim file\n#tempo = read_tsv(glue(\"{INPUT}/data/genotype/rat6k_autosome.bim\"),col_names = FALSE)\n\ntempo = read_table(glue(\"{INPUT}/data/genotype/rat6k_autosome.frq\"),col_names = TRUE)\ntempo = tempo %&gt;% select(SNP,A1,A2,MAF)\nnsnp = nrow(df_freq)\n##set.seed(29444)\nsemilla = 32240\n##semilla = round(runif(1)*1e5)\nset.seed(semilla)\nscoremat = matrix(rnorm(nsnp*nsim),nsnp,nsim)\n## divide by maf\nscoremat = sweep(scoremat,1, sqrt(2*tempo$MAF*(1-tempo$MAF)), \"/\" )\ntempo = cbind(tempo, scoremat)\nwrite_tsv(tempo, file = glue(\"{OUTPUT}/sim/sim_weights-{semilla}.txt\"), col_names = FALSE) \n\n\n\nuse plink to calculate the sim phenotype $y_ = _k X_k $\n\nAn alternative way to simulate Y with related individuals would be to simulate unrelated normal rv. for each rat, then pre-multiply by the correlation matrix \\(\\Sigma^{0.5}\\). This approach would make it more obvious that premultiplying by \\(\\Sigma^{-0.5}\\) would yield a an uncorrelated trait across rats.\n\n\n# Calculate PRS using plink\n# https://www.cog-genomics.org/plink/1.9/score\n# --score my.scores 3 2 1\n# reads variant IDs from column 3, allele codes from column 2, and scores from column 1.\n# &gt; head(tempo)\n# A tibble: 6 × 6\n#     X1 X2               X3      X4 X5    X6   \n#  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n#1     1 1_1643610_C_T     0 1643610 T     C    \n#2     1 1_1646409_T_G     0 1646409 T     G    \n\n\n## BEFORE 1/30/2024 --score $OUTPUT/sim/$WEIGHTS 2 6 $((6+SIMID)) \\\n## new column order\n#&gt; headleft(tempo,6) tempo has df with snp info and weights N(0,1)/sqrt(2 p (1-p))\n#            SNP A1 A2    MAF           1          2\n#1 1_1643610_C_T  T  C 0.4521  0.01446167 -0.1048587\n#2 1_1646409_T_G  T  G 0.1253  0.88769963 -0.7607204\n#3 1_1658435_A_G  G  A 0.4511  2.66557665 -0.7946988\n\n# Define the range of SIMID values\nNSIM=100  # Replace with your actual value\nSEMILLA=32240\nWEIGHTS=\"sim_weights-$SEMILLA.txt\"\ntime (\n  for ((SIMID=1; SIMID&lt;=$NSIM; SIMID++)); do\n    $PLINK --bfile $INPUT/data/genotype/rat6k_autosome \\\n          --score $OUTPUT/sim/$WEIGHTS 1 3 $((4+SIMID)) \\\n          --out $OUTPUT/sim/tempo/PRS_output_$SIMID-$SEMILLA\n    \n    # Print SIMID every 10 iterations\n    if ((SIMID % 10 == 0)); then\n      echo \"Processed $SIMID simulations\"\n    fi\n  done\n)\n\n#Processed 100 simulations\n#real    2m1.887s\n#user    1m45.025s\n#sys     0m13.337s\n\n\n\nformat simulated scores into matrix\n\n# semilla = 20\n# set.seed(semilla) \nh2 = bodylen_h2\ntailo=\"-32240\"\n\nif(F)\n{\n  simy = suppressMessages(read_table(glue(\"{OUTPUT}/sim/tempo/PRS_output_1{tailo}.profile\")))\n  nsim = 100\n  phenomat = matrix(NA,nrow(simy),nsim)\n  rownames(phenomat) = simy$IID\n  phenomat[,1] = simy$SCORE\n  for(simid in 2:nsim)\n  {\n    simy = suppressMessages(read_table(glue(\"{OUTPUT}/sim/tempo/PRS_output_{simid}{tailo}.profile\")))\n    phenomat[,simid] = simy$SCORE\n  }\n  \n  ## scale phenomat\n  phenomat = scale(phenomat)\n  ## add noise\n  #nx = nrow(phenomat)\n  #phenomat = sqrt(h2) * phenomat + sqrt(1 - h2) * scale(matrix(rnorm(nx*nsim),nx, nsim))\n  \n  simpheno = cbind(simy[,1:2], as.data.frame(phenomat))\n  ## CHECK WHAT NAME TO USE\n  #saveRDS(simpheno,file=glue(\"{OUTPUT}/sim/tempo/simpheno_{h2}-{tailo}.RDS\"))\n  saveRDS(simpheno,file=glue(\"{OUTPUT}/sim/tempo/simpheno.RDS\")) ## no error component\n} else \n{\n  simpheno = readRDS(file=glue(\"{OUTPUT}/sim/tempo/simpheno.RDS\")) ## no error component\n  #simpheno=readRDS(file=glue(\"{OUTPUT}/sim/tempo/simpheno_{h2}-{tailo}.RDS\"))\n  nsim = ncol(simpheno) - 2 ## subtract FID, and IID columns\n}\n\n\n\nvisualize raw and corrected pvalues\n\nmyplot &lt;- function(tempres, post_titulo=\"\",semilla=\"\") {\n  # Create a data frame with specific columns\n  df &lt;- data.frame(\n    p0.01_yes = apply(tempres$pmat_correct, 2, function(x) mean(x &lt; 0.01)),\n    p0.01_no = apply(tempres$pmat_raw, 2, function(x) mean(x &lt; 0.01)),\n    p0.05_yes = apply(tempres$pmat_correct, 2, function(x) mean(x &lt; 0.05)),\n    p0.05_no = apply(tempres$pmat_raw, 2, function(x) mean(x &lt; 0.05)),\n    p0.10_yes = apply(tempres$pmat_correct, 2, function(x) mean(x &lt; 0.10)), \n    p0.10_no = apply(tempres$pmat_raw, 2, function(x) mean(x &lt; 0.10))\n    # ... [rest of your code for creating df] ...\n  )\n\n# Pivot the data frame to long format, specifying the columns to keep\ndf_long &lt;- pivot_longer(df, cols = starts_with(\"p\"))\n\ndf_long &lt;- df_long %&gt;% separate(name,into = c(\"threshold\",\"corrected\"),sep=\"_\") %&gt;% rename(proportion=value)\n\n# Rename the name column to replace p0.xx with p&lt;0.xx\ndf_long &lt;- df_long %&gt;%\n  mutate(threshold = gsub(\"p0\\\\.\", \"p&lt;0.\", threshold))\n\n  # Create boxplots with mean\n  pp &lt;- ggplot(df_long, aes(x = threshold, y = proportion, fill = corrected)) +\n    geom_boxplot(alpha = 0.6) +\n    stat_summary(fun = mean, geom = \"point\", shape = 3, size = 2, stroke = 2, color = \"blue\",                  #position = position_dodge(width = 0.8)) +\n                 position = position_dodge(width = -0.1)) +\n    #stat_summary(fun = mean, geom = \"crossbar\",  size = .5, color = \"blue\") +\n    #stat_summary(fun = mean, geom = \"crossbar\",  size = .5, color = \"darkgray\") +\n    geom_hline(yintercept = c(0.01, 0.05, 0.10), linetype = \"dashed\", color = \"gray\") +\n    theme_minimal(base_size = 15) +\n    #ggtitle(glue(\"Type I Error Calibration {semilla} {post_titulo}\")) +\n    xlab(\"significance\") + ylab(\"false positive rate\")\n\n  pp\n}\n#myplot(tempres_sim,post_titulo = glue(\"nsam:\", {nsam},\"\\n\"),semilla)"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-function-lmm-with-grm",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-function-lmm-with-grm",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "define function lmm with GRM",
    "text": "define function lmm with GRM\n\n## HERE WE USE THE FULL GRM MATRIX AND CALCULATE THE INVERSE OF THE SIGMA MATRIX\n## define lmm association function \nlmmGRM = function(pheno, grm_mat, h2, pred_expr,pheno_id_col=1,pheno_value_cols=6:6,out=NULL)\n{\n  ## input pheno is a data frame with id column pheno_id_col=1 by default\n  ## phenotype values are in pheno_value_cols, 6:6 by default (SCORE column location in plink output), it can have more than one phenotype\n  ## but h2 has to be the same, this is useful when running simulations with different h2\n  ## call lmmXcan(pheno %&gt;% select(IID,SCORE))\n  \n  ## format pheno to matrix form\n  phenomat &lt;- as.matrix(pheno[,pheno_value_cols])\n  rownames(phenomat) &lt;- pheno[[pheno_id_col]]\n  \n  ## turn pred_expr into matrix with rownames =IID, keep only IIDs in ymat\n  exp_mat = as.matrix(pred_expr %&gt;% select(-IID))\n  rownames(exp_mat) = pred_expr$IID\n\n  ## align pheno and expr matrices\n  idlist = intersect(rownames(phenomat), rownames(exp_mat))\n  \n  nsam = length(idlist)\n  \n  ## CALCULATE SIGMA\n  ID_mat = diag(rep(1,nsam))\n  \n  #testing_scale_grm = TRUE\n  #if(testing_scale_grm) grm_mat = sweep( sweep(grm_mat,2, 1/sqrt(diag(grm_mat)),\"*\"), 1, 1/sqrt(diag(grm_mat)),\"*\")    \n  \n  Sigma = grm_mat[idlist,idlist] * h2 + (1 - h2) * ID_mat\n  \n  Sig_eigen = eigen(Sigma)\n  rownames(Sig_eigen$vectors) = rownames(Sigma)\n  \n  isighalf = Sig_eigen$vectors %*% diag( 1 / sqrt(  Sig_eigen$values  ) ) %*% t(Sig_eigen$vectors)\n  \n  ## perform raw association\n  cormat_raw = matrix_lm(phenomat[idlist,, drop = FALSE], exp_mat[idlist,])\n  pmat_raw = cor2pval(cormat_raw,nsam)\n  colnames(pmat_raw) &lt;- gsub(\"cor_\", \"pval_\", colnames(pmat_raw))\n  \n  ## perform corrected association\n  cormat_correct = matrix_lm(isighalf%*% phenomat[idlist,, drop = FALSE], isighalf %*% exp_mat[idlist,])\n  pmat_correct = cor2pval(cormat_correct,nsam)\n  colnames(pmat_correct) &lt;- gsub(\"cor_\", \"pval_\", colnames(pmat_correct))\n  \n  if(!is.null(out))\n  {\n    saveRDS(cormat_correct,file = glue(\"{out}_cormat_correct.RDS\"))\n    saveRDS(pmat_correct,  file = glue(\"{out}_pmat_correct.RDS\"))\n    saveRDS(cormat_raw,    file = glue(\"{out}_cormat_raw.RDS\"))\n    saveRDS(pmat_raw,      file = glue(\"{out}_pmat_raw.RDS\"))\n  }\n  res = list(\n    cormat_correct=cormat_correct, \n    pmat_correct=pmat_correct, \n    cormat_raw=cormat_raw, \n    pmat_raw=pmat_raw)\n  res\n  \n}\n\n\nrun ratxcan null regression\n\n##pred_expr = read_pred_expr(glue(\"{OUTPUT}/Br-hki-rat6k__predict.txt\"))\n\nadd_noise = function(simpheno,h2)\n{\n  phenomat = as.matrix(simpheno %&gt;% select(-IID,-FID))\n  phenomat = scale(phenomat)\n  ## add noise\n  nx = nrow(phenomat)\n  nsim=ncol(phenomat)\n  phenomat = sqrt(h2) * phenomat + sqrt(1 - h2) * scale(matrix(rnorm(nx*nsim),nx, nsim))\n  cbind(simpheno[,1:2], as.data.frame(phenomat))\n}\n\nrecalculate=FALSE\nfor(h2 in c(0.1,0.2,0.4,0.6,0.8))\n{\n  cat(\"---\",h2,\"---\\n\")\n  if(recalculate)\n  { \n    tic=Sys.time()\n    tempres &lt;- lmmGRM(add_noise(simpheno,h2),\n                      grm_mat, h2,pred_expr,pheno_id_col=1, \n                      pheno_value_cols=2+(1:nsim))\n    toc=Sys.time()\n    print(toc - tic)\n    saveRDS(tempres,file=glue(\"{OUTPUT}/tempres-null-h2-{h2}.RDS\"))\n  } else tempres = readRDS(glue(\"{OUTPUT}/tempres-null-h2-{h2}.RDS\"))\n  myplot(tempres_sim)\n  ggsave(glue(\"{OUTPUT}/calib-figure-h2-{h2}.png\"),width=6,height=5)\n  png(glue(\"{OUTPUT}/hist-p-corrected-{h2}.png\"))\n  hist(tempres$pmat_correct,main=glue(\"corrected p-values - {h2}\"))\n  dev.off()\n  png(glue(\"{OUTPUT}/hist-p-raw-{h2}.png\"))\n  hist(tempres$pmat_raw,main=glue(\"raw p-values - {h2}\"))\n  dev.off()\n  png(glue(\"{OUTPUT}/qqunif-compare-raw-corrected-{h2}.png\"))\n  qqunif.compare(tempres$pmat_raw,tempres$pmat_correct,BF=FALSE,BF2=FALSE,main=\"qqunif {h2}\")\n  dev.off()\n}\n##%HERE\n\n\n\nsimulate \\(Y = Sigma^{1/2}\\epsilon\\) and run assoc with expr_mat\n\nnsam=nrow(grm_mat)\nind=1:nsam\n#ind=1:1000\ntest_mat = grm_mat[ind,ind]\nnsam=nrow(test_mat)\nSigma = test_mat * h2 + (1 - h2) * diag(rep(1,nsam))\nSig_eigen = eigen(Sigma)\nrownames(Sig_eigen$vectors) = rownames(Sigma)\n##sighalf = Sig_eigen$vectors %*% diag( sqrt(  Sig_eigen$values  ) ) %*% t(Sig_eigen$vectors)\n## make this multiplication more efficient using sweep\nsighalf = Sig_eigen$vectors %*% sweep(t(Sig_eigen$vectors),1,sqrt(  Sig_eigen$values ),\"*\")\n\nfor(ii in 1:10)\n{\nsim_sigma_pheno = sighalf %*% matrix(rnorm(nsam * nsim), nsam, nsim) \nsim_sigma_pheno=cbind(FID=rownames(sim_sigma_pheno),IID=rownames(sim_sigma_pheno),as.data.frame(sim_sigma_pheno))\n\n\ntic=Sys.time()\ntempres_sigma_pheno &lt;- lmmGRM(sim_sigma_pheno,grm_mat, h2,pred_expr,pheno_id_col=1, pheno_value_cols=2+(1:nsim))\ntoc=Sys.time()\ntoc - tic\npp&lt;-myplot(tempres_sigma_pheno,post_titulo = glue(\"sigma_pheno n= {nsam} - ii={ii}\"))\ncat(ii,\"\\n\")\nprint(pp)\nggsave(glue(\"{OUTPUT}/calib-sim-sigma-n{nsam}-ii{ii}.png\"))\n}\n\n\n\nsimulate \\(Y = GRM^{1/2} h2 + (1 - h2) \\epsilon\\) and run assoc with expr_mat\n\nnsam=nrow(grm_mat)\nind=1:nsam\n#ind=1:1000\ntest_mat = grm_mat[ind,ind]\nnsam=nrow(test_mat)\n\ntest_eigen = eigen(test_mat)\nrownames(test_eigen$vectors) = rownames(test_mat)\n## show smallest eigenvalues of GRM\ncat(sort(test_eigen$values) %&gt;% head, \"these numbers should be non negative \\n\")\n## force eigenvalues to be nonnegative\ntest_eigen$values = pmax(test_eigen$values,0)\ngrmhalf = test_eigen$vectors %*% sweep(t(test_eigen$vectors), 1, sqrt(test_eigen$values),\"*\")\n\nfor(ii in 1:10)\n{\n  ## simulate phenomat as rv with h2*grm as cov + indep noise term (1-h2)\nsim_grm_pheno = sqrt(h2) * grmhalf %*% matrix(rnorm(nsam * nsim), nsam, nsim) + sqrt(1-h2) * matrix(rnorm(nsam * nsim), nsam, nsim)\nsim_grm_pheno=cbind(FID=rownames(sim_grm_pheno),IID=rownames(sim_grm_pheno),as.data.frame(sim_grm_pheno))\n\ntic=Sys.time()\ntempres_grm_pheno &lt;- lmmGRM(sim_grm_pheno,grm_mat, h2,pred_expr,pheno_id_col=1, pheno_value_cols=2+(1:nsim))\ntoc=Sys.time()\ntoc - tic\npp&lt;-myplot(tempres_grm_pheno,post_titulo = glue(\"sigma_pheno n= {nsam} - ii={ii}\"))\ncat(ii,\"\\n\")\nprint(pp)\nggsave(glue(\"{OUTPUT}/calib-sim-grm-n{nsam}-ii{ii}.png\"))\n}\n\n\n\nrun bodylen regression with BR expr lmmGRM\n\npred_expr = read_pred_expr(glue(\"{OUTPUT}/Br-hki-rat6k__predict.txt\"))\n\nrecalculate = FALSE\n\ntrait = \"bodylen\"\nh2 = bodylen_h2\nh2se = bodylen_h2+bodylen_se\n##pheno, grm_mat, h2, pred_expr,pheno_id_col=1,pheno_value_cols=6:6,out=NULL\nif(recalculate)\n{\n  tic=Sys.time()\n  tempres_h2 &lt;- lmmGRM(pheno,grm_mat, h2, pred_expr,pheno_id_col=1, pheno_value_cols=which(colnames(pheno)==trait))\n  toc=Sys.time()\n  toc - tic\n  saveRDS(tempres_h2,glue(\"{OUTPUT}/{trait}-BR-tempres_h2.RDS\"))\n} else\ntempres_h2 &lt;- readRDS(glue(\"{OUTPUT}/{trait}-BR-tempres_h2.RDS\"))\n\npng(glue(\"{OUTPUT}/{trait}-BR-lmmGRM.png\"))\nqqunif.compare(tempres_h2$pmat_raw,tempres_h2$pmat_correct,main=glue(\"ratxcan {trait}\") )\ndev.off()\n\nif(recalculate)\n{\ntic=Sys.time()\ntempres_h2se &lt;- lmmGRM(pheno,grm_mat, h2se,pred_expr,pheno_id_col=1, pheno_value_cols=which(colnames(pheno)==trait))\ntoc=Sys.time()\ntoc - tic\nsaveRDS(tempres_h2se,glue(\"{OUTPUT}/{trait}-BR-tempres_h2se.RDS\"))\n} else\ntempres_h2se &lt;- readRDS(glue(\"{OUTPUT}/{trait}-BR-tempres_h2se.RDS\"))\n\n\n\nrun bmi regression with lmmGRM\n\nrecalculate = FALSE\n\nh2 &lt;- bmi_h2\nh2se = bmi_h2 + bmi_se\ntrait = \"bmi\"\n\npred_expr = read_pred_expr(glue(\"{OUTPUT}/Br-hki-rat6k__predict.txt\"))\n\nif(recalculate)\n{\ntic=Sys.time()\nh2 = bmi_h2 + bmi_se\ntempres_h2 &lt;- lmmGRM(pheno,grm_mat, h2, pred_expr, pheno_id_col=1, pheno_value_cols=which(colnames(pheno)==trait))\ntoc=Sys.time()\ntoc - tic\nsaveRDS(tempres_h2,glue(\"{OUTPUT}/{trait}-BR-tempres_h2.RDS\"))\n} else tempres_h2 = readRDS(glue(\"{OUTPUT}/{trait}-BR-tempres_h2.RDS\"))\n\npng(glue(\"{OUTPUT}/{trait}-BR-lmmGRM.png\"))\nqqunif.compare(tempres_h2$pmat_correct,tempres_h2$pmat_raw,main=glue(\"ratxcan {trait}\") )\ndev.off()\n\nif(recalculate)\n{\ntic=Sys.time()\ntempres_h2se &lt;- lmmGRM(pheno,grm_mat, h2se,pred_expr,pheno_id_col=1, pheno_value_cols=which(colnames(pheno)==trait))\ntoc=Sys.time()\ntoc - tic\nsaveRDS(tempres_h2se,glue(\"{OUTPUT}/{trait}-BR-tempres_h2se.RDS\"))\n} else tempres_h2se = readRDS(glue(\"{OUTPUT}/{trait}-BR-tempres_h2se.RDS\"))\n  \npng(glue(\"{OUTPUT}/{trait}-BR-lmmGRM_h2_plus_se.png\"))\nqqunif.compare(tempres_h2se$pmat_correct,tempres_h2se$pmat_raw,main=glue(\"ratxcan {trait}\") )\ndev.off()\n\n\n\nbodylen and bmi vs 5 brain region expr association\n\nrecalculate = FALSE\n#tissuelist = c(\"AC\", \"IL\", \"LH\", \"PL\", \"VO\")\n\nfor(trait in c(\"bodylen\",\"bmi\"))\n{\n  if(trait == \"bmi\") h2 = bmi_h2+bmi_se else\n  if(trait == \"bodylen\") h2 = bodylen_h2 + bodylen_se else stop(\"unknown trait\")\n  \n  print(trait)\n  for(tis in tissuelist)\n  {\n    print(tis)\n    if(recalculate)\n    {\n      pred_expr = read_pred_expr(glue(\"{OUTPUT}/{tis}-filtered__predict.txt\"))\n      \n      ## run lmmGRM\n      tic=Sys.time()\n      tempres_h2se &lt;- \n        lmmGRM(pheno,grm_mat,\n               h2,\n               pred_expr,\n               pheno_id_col=1,\n               pheno_value_cols=which(colnames(pheno)==trait) )\n      toc=Sys.time()\n      print(toc - tic)\n      \n      ## save results\n      saveRDS(tempres_h2se,glue(\"{OUTPUT}/{trait}-{tis}-tempres_h2se.RDS\"))\n      \n    } else\n      tempres_h2se = readRDS(glue(\"{OUTPUT}/{trait}-{tis}-tempres_h2se.RDS\"))\n    \n    png(glue(\"{OUTPUT}/{trait}-{tis}-lmmGRM_h2_plus_se.png\"))\n    qqunif.compare(tempres_h2se$pmat_raw,tempres_h2se$pmat_correct,main=glue(\"ratxcan {trait} {tis}\") )\n    dev.off()\n  }\n\n}\n\n\n\ndownload rat gene annotation and human phenomexcan\n\n#ensembl = biomaRt::useMart(\"ensembl\", dataset = \"rnorvegicus_gene_ensembl\")\n#annotation = biomaRt::getBM(attributes = c('ensembl_gene_id','external_gene_name', 'start_position', 'end_position', 'chromosome_name'),mart = ensembl)\nnew_ensembl_query=FALSE\nif(new_ensembl_query)\n{\n  human = biomaRt::useEnsembl(biomart='ensembl', dataset=\"hsapiens_gene_ensembl\", mirror = \"useast\")\n#attributes &lt;- listAttributes(human)\nattributes = c(\"ensembl_gene_id\", \"external_gene_name\", \"rnorvegicus_homolog_ensembl_gene\", \"rnorvegicus_homolog_associated_gene_name\")\north.rats = biomaRt::getBM(attributes, filters=\"with_rnorvegicus_homolog\",values=TRUE, mart = human, uniqueRows=TRUE)\nsaveRDS(orth.rats,file=glue(\"{INPUT}/data/expression/orth.rats.RDS\"))\n} else\n  orth.rats = readRDS(file=glue(\"{INPUT}/data/expression/orth.rats.RDS\"))\n\nphenomexcan_results = readRDS(glue(\"{INPUT}/data/phenomexcan/phenomexcan_results_signs.RDS\"))"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#create-ratxcan-association-table-to-save-as-csv-files",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#create-ratxcan-association-table-to-save-as-csv-files",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "create ratxcan association table to save as csv files",
    "text": "create ratxcan association table to save as csv files\n\ngenerate_results_table = function(tempres,out=NULL,phenoname)\n{\n  ## phenoname: \"Body mass index (BMI) (21001_raw)\" or \"Standing height\"\n  pmat = tempres$pmat_correct\n  df = data.frame(gene=rownames(pmat), p_correc=pmat, cor_correct=tempres$cormat_correct, p_raw=tempres$pmat_raw)\n  names(df) = c(\"gene\",\"p_correct\",\"cor_correct\",\"p_raw\")\n  rownames(df) = NULL\n  \n  ## annotate\n  df = df %&gt;% \n    left_join(gene_annotation %&gt;% \n                select(genename=gene_name,\n                       gene_id,\n                       chr,\n                       start), by=c(\"gene\"=\"gene_id\")) %&gt;%\n    arrange(p_correct)\n\n  ## write csv file\n  if(!is.null(out)) write_csv(df,file = out)\n  \n  df\n}\n\ndf_all = data.frame()\n\ntis=\"BR\"\ntrait=\"bodylen\"\n#tissuelist = c(\"AC\", \"IL\", \"LH\", \"PL\", \"VO\")\n\nfor(tis in c(\"BR\",tissuelist))\n{\n  RDSpath = glue(\"{OUTPUT}/{trait}-{tis}-tempres_h2se.RDS\")\n  tempres = readRDS(RDSpath)\n  df = generate_results_table(tempres, #out=glue(\"{OUTPUT}/{trait}-results.csv\"),\n                                    phenoname=\"Standing height\")\n  df$trait=trait\n  df$tissue = tis\n  df_all = rbind(df_all,df)\n}\n\ntrait=\"bmi\"\nfor(tis in c(\"BR\",tissuelist))\n{\n  RDSpath = glue(\"{OUTPUT}/{trait}-{tis}-tempres_h2se.RDS\")\n  tempres = readRDS(RDSpath)\n  df = generate_results_table(tempres, \n                                ##out=glue(\"{OUTPUT}/{trait}-results.csv\"),\n                                phenoname=\"Body mass index (BMI) (21001_raw)\")\n  df$trait=trait\n  df$tissue = tis\n  df_all = rbind(df_all,df)\n}\n\n#saveRDS(df_all,file = glue(\"{OUTPUT}/all-assoc-results.RDS\"))\n\n## pivot wider\ndf_wider &lt;- df_all %&gt;% select(gene,trait,tissue,p_correct)  %&gt;% pivot_wider(\n    names_from = tissue, \n    values_from = p_correct,\n    id_cols = c(gene, trait)\n  )\n\n\nacat = function(pvec) \n{\n  pvec = pvec[!is.na(pvec)]\n  TT = sum( tan( (0.5 - pvec) *pi ) )\n  .5 - atan(TT / length(pvec)) / pi\n}\n\ndf_wider$p_acat_5 = apply(df_wider %&gt;% select(all_of(tissuelist)) ,1,function(x) acat(x) ) \n \ndf_wider$p_acat_6 = apply(df_wider %&gt;% select(all_of(c(\"BR\",tissuelist)),) ,1,function(x) acat(x) ) \n\ndf_wider = df_wider %&gt;% left_join(gene_annotation %&gt;% select(gene_id,gene_name,chr,start),by=c(\"gene\"=\"gene_id\"))"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#collect-signs",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#collect-signs",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "collect signs",
    "text": "collect signs\n\n## pivot wider\ndf_wider_cor &lt;- df_all %&gt;% select(gene,trait,tissue,cor_correct)  %&gt;% pivot_wider(\n    names_from = tissue, \n    values_from = cor_correct,\n    id_cols = c(gene, trait)\n  )\n\ndf_wider_cor$max_value_original_sign = apply(df_wider_cor[, -c(1, 2)], 1, function(x) {\n    idx_max_magnitude = which.max(abs(x))\n    return(x[idx_max_magnitude])\n})\n\ndf_wider_cor$best_sign = sign(df_wider_cor$max_value_original_sign)\n\nfor(ctrait in traitlist)\n{tempo = df_wider_cor %&gt;% \n  filter(trait == ctrait) %&gt;% \n  inner_join(df_wider %&gt;% \n               select(gene,trait,p_acat_6), by=c(\"gene\"=\"gene\",\"trait\"=\"trait\"))  %&gt;%\n  left_join(phenomexcan_results %&gt;%\n              filter(phenotype==phenolist[ctrait]) %&gt;%\n              select(p_human=pvalue,\n                     hugo_gene=external_gene_name,\n                     gene_id,rnorvegicus_homolog_ensembl_gene,\n                     dir_effect_most_signif),\n            by=c(\"gene\"=\"rnorvegicus_homolog_ensembl_gene\"),relationship = \"many-to-many\")\n\nind=tempo$p_acat_6 &lt; 1e-4;\ncat(\"---\",ctrait,\"---\\n\")\nprint(fisher.test(tempo$best_sign[ind], tempo$dir_effect_most_signif[ind]))\n}\n\n no concordance of signs \n\ndf_wider$qval = NA\n\n## calculate qvalues\nfor(ctrait in traitlist)\n{\n  ind = df_wider$trait == ctrait\n  qq = qvalue(df_wider$p_acat_6[ind])\n  df_wider$qval[ind] = qq$qvalues\n}"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#enrichment-of-human-gene-analysis",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#enrichment-of-human-gene-analysis",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "enrichment of human gene analysis",
    "text": "enrichment of human gene analysis\n\n## annotate with human genes\n\n## add human pvalues\n#ctrait = \"bmi\"\nfor(ctrait in traitlist)\n{\n  tempo = df_wider %&gt;% filter(trait == ctrait) %&gt;%\n  left_join(phenomexcan_results %&gt;% \n              filter(phenotype==phenolist[ctrait]) %&gt;%\n              select(p_human=pvalue,hugo_gene=external_gene_name,\n                     gene_id,rnorvegicus_homolog_ensembl_gene, dir_effect_most_signif), \n            by=c(\"gene\"=\"rnorvegicus_homolog_ensembl_gene\"),\n            relationship = \"many-to-many\")\n  \n  mhuman = 17573\n  mrat = nrow(tempo)\n  \n  cat(\"fisher test\",ctrait,\"p_acat_6 \\n\")\n  for(thres in c(0.01,0.05,0.1))\n  {\n    cat('---',thres,'---\\n')\n    with(tempo, print(fisher.test(p_acat_6&lt;thres/mrat,p_human&lt;thres/mhuman)) )\n    with(tempo, print(table(p_acat_6&lt;thres/mrat,p_human&lt;thres/mhuman)) )\n  }\n  \n  cat(\"fisher test\",ctrait,\"p_acat_5 \\n\")\n  for(thres in c(0.01,0.05,0.1))\n  {\n    cat('---',thres,'---\\n')\n    if(thres==0.05) cat('---\\n--- UPDATE PAPER WITH THIS 0.05 ---\\n---\\n')\n    with(tempo, print(fisher.test(p_acat_5&lt;thres/mrat,p_human&lt;thres/mhuman)) )\n    with(tempo, print(table(p_acat_5&lt;thres/mrat,p_human&lt;thres/mhuman)) )\n  }\n\n  ind = tempo$p_acat_6 &lt; 0.05/mrat \n  # ind = tempo$p_acat_6 &lt; p_fdr05\n  print(ctrait)\n  qqunif.compare(tempo$p_human,tempo$p_human[ind],BH=FALSE,BF2=FALSE,main=glue(\"human gene assoc for rat {ctrait} genes\"),cex2=1.5)\n  png(glue(\"{OUTPUT}/qqunif-compare-{ctrait}.png\"),width = 640,height = 480)\n  qqunif.compare(tempo$p_human,tempo$p_human[ind],BH=FALSE,BF2=FALSE,col='maroon1',col2='dodgerblue',cex2=1.5)\n  dev.off()\n  cat(\"wilcoxon test\")\n  print(wilcox.test(tempo$p_human[!ind],tempo$p_human[ind]))\n  \n\n  ind = tempo$p_acat_5 &lt; 0.05/(tempo %&gt;% filter(!is.na(p_acat_5)) %&gt;% nrow()) & !is.na(tempo$p_acat_5)\n  # ind = tempo$p_acat_6 &lt; p_fdr05\n  print(ctrait)\n  qqunif.compare(tempo$p_human,tempo$p_human[ind],BH=FALSE,BF2=FALSE,main=glue(\"human gene assoc for rat {ctrait} genes\"),cex2=1.5)\n  png(glue(\"{OUTPUT}/qqunif-compare-{ctrait}-p_acat_05.png\"),width = 640,height = 480)\n  qqunif.compare(tempo$p_human,tempo$p_human[ind],BH=FALSE,BF2=FALSE,col='maroon1',col2='dodgerblue',cex2=1.5)\n  dev.off()\n  cat(\"wilcoxon test\")\n  print(wilcox.test(tempo$p_human[!ind],tempo$p_human[ind]))\n  \n  \n  \n    if(F) write_csv(tempo %&gt;% arrange(p_acat_6) %&gt;%\n              select(gene_name,p_acat_6,chr,start,p_human,hugo_gene,\n                     trait,gene,gene_id,BR,AC,IL,LH,PL,VO,p_acat_5,qval),\n            file = glue(\"{OUTPUT}/ratxcan-{ctrait}-results-qval.csv\"))\n  \n}"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#enrichment-of-crouses-consensus-genes",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#enrichment-of-crouses-consensus-genes",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "enrichment of Crouse’s consensus genes",
    "text": "enrichment of Crouse’s consensus genes\n\nconsensus_df &lt;- readxl::read_excel(glue(\"{INPUT}/data/expression/Table S10 Fat_consensus_alpha_0.01 PG.xlsx\"),skip=1)\n\ndim(consensus_df)\n\n## enrichment of consensus genes among bmi associated genes in rats\n\ntempo = df_wider %&gt;% filter(trait==\"bmi\") %&gt;% left_join(consensus_df %&gt;% select(ensembl_gene_id, description...3),by=c(\"gene\"=\"ensembl_gene_id\")) %&gt;% select(gene,p_acat_6,description...3) %&gt;% mutate(consensus = !is.na(description...3))\n\nqqunif.compare(tempo$p_acat_6,tempo$p_acat_6[tempo$consensus], main=\"no enrich. of consensus genes in rat bmi genes\")\n\n## enrichment of consensus genes among bmi associated genes in humans\n\ntempo = phenomexcan_results %&gt;% filter(phenotype==\"Body mass index (BMI) (21001_raw)\") %&gt;% left_join(consensus_df %&gt;% select(ensembl_gene_id, description...3),by=c(\"rnorvegicus_homolog_ensembl_gene\"=\"ensembl_gene_id\")) %&gt;% mutate(consensus = !is.na(description...3)) %&gt;% select(gene=rnorvegicus_homolog_ensembl_gene,p_human=pvalue,consensus) \n\nqqunif.compare(tempo$p_human,tempo$p_human[tempo$consensus], main=\"no enrich. of consensus genes in human bmi genes\")\n\n\nCrouse et al’s consensus genes are not enriched among human nor rat BMI genes"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#summarize-results-for-the-paper",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#summarize-results-for-the-paper",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "summarize results for the paper",
    "text": "summarize results for the paper\n\nBF_thres = 0.05/ (df_wider %&gt;% filter(trait==ctrait) %&gt;% filter(!is.na(p_acat_6)) %&gt;% nrow())\nfor(ctrait in traitlist)\n{\ncat(\"BF threshold \", signif(BF_thres,3),\"\\n\")\ncat(\"---\",ctrait,\"---\\n\")\nres = df_wider %&gt;% \n  filter(trait==ctrait) %&gt;% \n  filter(p_acat_6 &lt; BF_thres) %&gt;%\n  select(trait,p_acat_6,gene_name,chr,start,gene) %&gt;%\n   left_join(phenomexcan_results %&gt;% filter(phenotype==phenolist[ctrait]) %&gt;%              select(rnorvegicus_homolog_ensembl_gene,p_human=pvalue,hugo=gene_name) , by=c(\"gene\"=\"rnorvegicus_homolog_ensembl_gene\")) %&gt;% \n  arrange(p_acat_6)\nprint(res)\nres = res %&gt;% select(gene_name) %&gt;% unique() %&gt;% nrow()\ncat(\"---\\n\")\ncat(res,\" BF significant genes\\n\")\n}\n\nntests = (df_wider %&gt;% filter(trait==ctrait) %&gt;% filter(!is.na(p_acat_5)) %&gt;% nrow()) \nBF_thres = 0.05/ntests\nfor(ctrait in traitlist)\n{\ncat(\"BF threshold \", signif(BF_thres,3),\"\\n\")\ncat(\"---\",ctrait,\"--- p_acat_5 - UPDATE PAPER WITH THIS\\n\")\nres = df_wider %&gt;% \n  filter(trait==ctrait) %&gt;% \n  filter(p_acat_5 &lt; BF_thres) %&gt;%\n  select(trait,p_acat_5,gene_name,chr,start,gene) %&gt;%\n   left_join(phenomexcan_results %&gt;% filter(phenotype==phenolist[ctrait]) %&gt;%              select(rnorvegicus_homolog_ensembl_gene,p_human=pvalue,hugo=gene_name) , by=c(\"gene\"=\"rnorvegicus_homolog_ensembl_gene\")) %&gt;% \n  arrange(p_acat_5)\nprint(res)\nres = res %&gt;% select(gene_name) %&gt;% unique() %&gt;% nrow()\ncat(\"---\\n\")\ncat(res,\" BF significant genes  p_acat_5 - UPDATE PAPER WITH THIS\\n\")\n}\n\ncat(BF_thres,\" BF threshold for  p_acat_5 - UPDATE PAPER WITH THIS\\n\")\ncat(ntests,\" number of tests  p_acat_5 - UPDATE PAPER WITH THIS\\n\")"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#gene-set-enrichment",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#gene-set-enrichment",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "gene set enrichment",
    "text": "gene set enrichment\n\nctrait = \"bmi\"\nthres = 1e-2\n\ntop_genes_thres = df_wider %&gt;% filter(trait == ctrait) %&gt;% filter(p_acat_6 &lt; thres) %&gt;% pull(gene)\nwrite(top_genes_thres,file=\"~/Downloads/top_genes_thres.txt\")\n\ntop_genes_n = df_wider %&gt;% filter(trait == ctrait) %&gt;% arrange(p_acat_6) %&gt;% pull(gene) %&gt;% head(500)\nwrite(top_genes_n,file=\"~/Downloads/top_genes_n.txt\")\n\n#top_genes_hugo_thres = df_wider %&gt;% filter(trait == ctrait) %&gt;% filter(p_acat_6 &lt; thres) %&gt;% inner_join(orth.rats,by=c(\"gene\"=\"rnorvegicus_homolog_ensembl_gene\")) %&gt;% pull(external_gene_name)\n#write(top_genes_hugo,file=\"~/Downloads/top_genes_hugo_thres.txt\")\n\nsuppressMessages(library(gprofiler2))\ngostres &lt;- gost(query = top_genes_thres,organism=\"rnorvegicus\")\n#gostres &lt;- gost(query = top_genes_thres,organism=\"hsapiens\")\ngostplot(gostres)"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-ggplot-based-manhattan-plotting-function",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#define-ggplot-based-manhattan-plotting-function",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "define ggplot based manhattan plotting function",
    "text": "define ggplot based manhattan plotting function\nfrom Natasha\n\n## here\n## qq_manhattan(tempo %&gt;% rename(pvalue=p_acat_6))\n\ngg_manhattan &lt;- function(df, titulo=\"\",significance_threshold = 0.05) {\n  ## USAGE: gg_manhattan(df,0.05)\n  ## df has columns: pvalue, chr (numeric), and start (position)\n  ## significance threshold gets divided by the number of tests\n  ## \n  # Calculate cumulative base pair positions\n  data_cum &lt;- df %&gt;%\n    group_by(chr) %&gt;%\n    summarise(max_bp = as.numeric(max(start)), .groups = 'drop') %&gt;%\n    mutate(bp_add = lag(cumsum(max_bp), default = 0))\n\n  gwas_data &lt;- df %&gt;%\n    inner_join(data_cum, by = \"chr\") %&gt;%\n    mutate(bp_cum = start + bp_add)\n\n  # Calculate axis labels\n  axis_set &lt;- gwas_data %&gt;%\n    group_by(chr) %&gt;%\n    summarize(center = mean(bp_cum), .groups = 'drop')\n\n  # Determine the ylim based on the most significant p-value\n  ylim &lt;- gwas_data %&gt;%\n    filter(pvalue == min(pvalue)) %&gt;%\n    summarise(ylim = abs(floor(log10(pvalue))) + 2) %&gt;%\n    pull(ylim)\n\n  # Calculate the genome-wide significance level\n  sig &lt;- significance_threshold / nrow(df)\n\n  # Construct the Manhattan plot\n  manhattan_plot &lt;- ggplot(gwas_data, aes(x = bp_cum, y = -log10(pvalue), color = as.factor(chr), size = -log10(pvalue))) +\n    geom_hline(yintercept = -log10(sig), color = \"grey40\", linetype = \"dashed\") +\n    geom_hline(yintercept = -log10(0.0001), color = \"red\", linetype = \"dashed\") +\n    geom_point(alpha = 0.75, shape = 19) + # Simplified shape decision for clarity\n    geom_label_repel(aes(label = ifelse(pvalue &lt;= sig, gene_name, \"\")), size = 3) +\n    ylim(c(0, ylim)) +\n    scale_x_continuous(labels = axis_set$chr, breaks = axis_set$center) +\n    scale_color_manual(values = rep(c(\"dodgerblue4\", \"midnightblue\"), length(unique(axis_set$chr)))) +\n    scale_size_continuous(range = c(0.5, 3)) +\n    labs(x = NULL, y = expression(-log[10](italic(p)))) +\n    theme_minimal() +\n    theme(legend.position = \"none\",\n          panel.border = element_blank(),\n          panel.grid.major.x = element_blank(),\n          panel.grid.minor.x = element_blank(),\n          axis.text.x = element_text(angle = 90, size = 12),\n          axis.text.y = element_text(size = 12, vjust = 0),\n          axis.title = element_text(size = 20))\n\n  if(titulo !=\"\") manhattan_plot = manhattan_plot + ggtitle(titulo)\n  return(manhattan_plot)\n}"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#plot-manhattan-plots-of-bmi-and-body-length",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#plot-manhattan-plots-of-bmi-and-body-length",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "plot manhattan plots of bmi and body length",
    "text": "plot manhattan plots of bmi and body length\n\nfor(ctrait in traitlist)\n{\n  tempo = df_wider %&gt;% filter(trait==ctrait) %&gt;% mutate(chr=as.numeric(chr))\n  gg = gg_manhattan(tempo %&gt;% rename(pvalue=p_acat_6), titulo=ctrait)\n  print(gg)\n  ggsave(glue(\"{OUTPUT}/{ctrait}-manhattan-p_acat_6.png\"))\n}\n\nfor(ctrait in traitlist)\n{\n  tempo = df_wider %&gt;% filter(trait==ctrait) %&gt;% mutate(chr=as.numeric(chr))\n  gg = gg_manhattan(tempo %&gt;% rename(pvalue=p_acat_5) %&gt;% filter(!is.na(pvalue)), titulo=ctrait)\n  print(gg)\n  ggsave(glue(\"{OUTPUT}/{ctrait}-manhattan-p_acat_5.png\"))\n}"
  },
  {
    "objectID": "ratxcan-paper-code/ratxcan-figures-3-4.html#double-checking-that-the-saved-qvalues-are-correct",
    "href": "ratxcan-paper-code/ratxcan-figures-3-4.html#double-checking-that-the-saved-qvalues-are-correct",
    "title": "RatXcan analysis Figure 3 to 4",
    "section": "double checking that the saved qvalues are correct",
    "text": "double checking that the saved qvalues are correct\n\nkk5 = read_tsv(\"/Users/haekyungim/Downloads/ratxcan-bmi-results - ratxcan-bmi-results(1).tsv\")\nkk6 = read_tsv(\"/Users/haekyungim/Downloads/ratxcan-bodylen-results - ratxcan-bodylen-results(1).tsv\")\nall.equal(qvalue(kk5$p_acat_6)$qvalues,kk5$qval)\nall.equal(qvalue(kk6$p_acat_6)$qvalues,kk6$qval)\nplot(qvalue(kk5$p_acat_6)$qvalues,kk5$qval); abline(0,1)\nplot(qvalue(kk6$p_acat_6)$qvalues,kk6$qval); abline(0,1)\n\n# kk1 = read_tsv(\"/Users/haekyungim/Downloads/ratxcan-bmi-results - ratxcan-bmi-results.tsv\")\n# kk2 = read_tsv(\"/Users/haekyungim/Downloads/with-qval-ratxcan-bmi-results - ratxcan-bmi-results.tsv\")\n# kk3 = read_tsv(\"/Users/haekyungim/Downloads/ratxcan-bodylen-results - ratxcan-bodylen-results.tsv\")\n# kk4 = read_tsv(\"/Users/haekyungim/Downloads/with-qval-ratxcan-bodylen-results - ratxcan-bodylen-results.tsv\")\n\n# all.equal(kk1$p_acat_6,kk2$p_acat_6)\n# all.equal(kk3$p_acat_6,kk4$p_acat_6)\n# \n# all.equal(qvalue(kk1$p_acat_6)$qvalues,kk2$qval)\n# all.equal(qvalue(kk3$p_acat_6)$qvalues,kk4$qval)\n\n## small difference between qvalues were calculated before joining with human data\nplot(qvalue(kk1$p_acat_6)$qvalues,kk2$qval); abline(0,1)\nplot(qvalue(kk3$p_acat_6)$qvalues,kk4$qval); abline(0,1)"
  },
  {
    "objectID": "ratxcan-paper-code/generate_sparsity_figs.html",
    "href": "ratxcan-paper-code/generate_sparsity_figs.html",
    "title": "Generate Sparsity Figures",
    "section": "",
    "text": "we will use this for comparison later\n\noverlap &lt;- read_tsv(data.dir %&% \"Box_files/overlap_rat_genes_GTEx.txt\", col_names = TRUE)  # genes that are present in both rat expression data and in GTEx\n\nexpr_Ac &lt;- readRDS(data.dir %&% \"expression/Ac_expression_transformed.RDS\")\nexpr_Ac &lt;- expr_Ac[, intersect(colnames(expr_Ac), overlap$rat_gene)]\nsaveRDS(expr_Ac, data.dir %&% \"expression/Ac_expression_intesrect_GTEx.RDS\")"
  },
  {
    "objectID": "ratxcan-paper-code/generate_sparsity_figs.html#subset-genes-used-in-prediction-to-those-that-have-an-analog-in-gtex-tissues",
    "href": "ratxcan-paper-code/generate_sparsity_figs.html#subset-genes-used-in-prediction-to-those-that-have-an-analog-in-gtex-tissues",
    "title": "Generate Sparsity Figures",
    "section": "",
    "text": "we will use this for comparison later\n\noverlap &lt;- read_tsv(data.dir %&% \"Box_files/overlap_rat_genes_GTEx.txt\", col_names = TRUE)  # genes that are present in both rat expression data and in GTEx\n\nexpr_Ac &lt;- readRDS(data.dir %&% \"expression/Ac_expression_transformed.RDS\")\nexpr_Ac &lt;- expr_Ac[, intersect(colnames(expr_Ac), overlap$rat_gene)]\nsaveRDS(expr_Ac, data.dir %&% \"expression/Ac_expression_intesrect_GTEx.RDS\")"
  },
  {
    "objectID": "ratxcan-paper-code/generate_sparsity_figs.html#generate-r2-predictions-for-all-elastic-net-parameters-between-0-and-1",
    "href": "ratxcan-paper-code/generate_sparsity_figs.html#generate-r2-predictions-for-all-elastic-net-parameters-between-0-and-1",
    "title": "Generate Sparsity Figures",
    "section": "Generate R2 predictions for all elastic net parameters between 0 and 1",
    "text": "Generate R2 predictions for all elastic net parameters between 0 and 1\nWe run the same Prediction Model Pipeline only for Ac tissue. However this time, I didn’t break it down into chromosome. This takes longer but means you have less files, a file for each alpha parameter.\n\nfor i in $(seq 0 0.1 1.0)\ndo\nqsub -v alpha=$i sparsity_rats_pipeline.pbs\ndone\n\nNow we have predictability for all parameters of alpha. We can now iterate through all alphas and create the long data format. We also only select for genes that have an average cor &gt; 0.3 and subsample 20 genes.\n\nldf &lt;- list() # creates a list\nlisttsv &lt;- list.files(path = dir, pattern = \"working_TW_Ac_exp_10-foldCV_elasticNet_alpha\", full.names = TRUE) # creates the list of all the tsv files in the directory\ntempo &lt;- read_tsv(listtsv[1], col_names = TRUE) \ntempo &lt;- tempo %&gt;% select(c(gene, cor))\ncolnames(tempo)[2] = \"0\"\n\nfor (k in 2:length(listtsv)){\n ldf[[k]] &lt;- read_tsv(listtsv[k], col_names = TRUE)\n alpha &lt;- substr(listtsv[k], 107, str_length(listtsv[k]) - 13)\n fila &lt;- as.data.frame(ldf[[k]]) \n fila &lt;- fila %&gt;% select(c(gene, cor)) \n colnames(fila)[2] = alpha\n tempo &lt;- inner_join(tempo, fila, by = \"gene\")\n}\n\nPlot results of r for all parameers of alpha\n\ntempo &lt;- read_tsv(\"/Users/natashasanthanam/Downloads/rat_elastic_net_all_parameters_GTEx_only_genes.txt\", col_names = TRUE)\n\ndata_long &lt;- tempo  %&gt;%   pivot_longer(!gene, names_to = \"value\", values_to = \"count\")\n   \np1 &lt;-  ggplot(data_long, aes(x = as.numeric(value), y = count)) + geom_smooth(show_guide = FALSE, se=T, size = .5, col = \"dodgerblue2\")  +  xlab(expression(paste(\"Elastic net mixing parameter (\",alpha, \")\"))) + ylab(expression(paste(\"10-fold cross-validated R\")))\n\np2 = ggplot(tempo, aes(x = `0`, y = `0.5`)) + geom_hex(bins = 50)   +\n      geom_abline(slope = 1, intercept = 0, color = \"darkgrey\", size = 0.8) +\n      ylab(\"cor for mixing paramter = 0.5\" ) +\n      xlab(\"cor for mixing paramter = 0\") + theme_bw(base_size = 16)\n\np1"
  }
]