---
title: figures for revision ratxcan
date: 2024-09-16
author: Haky Im
editor_options: 
  chunk_output_type: console
---


## load libraries and functions

```{r load libraries and functions}
#options(error=recover)
#options(error=browser)
options(error=NULL)

## compare observed correlation with null correlation
suppressMessages(devtools::source_gist("a925fea01b365a8c605e")) ## load qqR fn https://gist.github.com/hakyim/a925fea01b365a8c605e
suppressMessages(devtools::source_gist("38431b74c6c0bf90c12f")) ## qqunif https://gist.github.com/hakyim/38431b74c6c0bf90c12f
suppressMessages(devtools::source_gist("115403f16bec0a0e871f3616d552ce9b")) ## source ratxcan functions https://gist.github.com/hakyim/115403f16bec0a0e871f3616d552ce9b 

suppressMessages(library(tidyverse))
suppressMessages(library(glue))
suppressMessages(library(RSQLite))
#suppressMessages(library(expm))
#suppressMessages(library(readxl))
# install.packages("devtools")
# library("devtools")
# install_github("jdstorey/qvalue")
suppressMessages(library(qvalue))
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("biomaRt")
##suppressMessages(library(biomaRt))
##install.packages("ggrepel")
suppressMessages(library(ggrepel))


recalc=FALSE

```

## define data and software paths for R

```{r define data and software paths}
WEBDATA="/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data"

PLINK="/Users/haekyungim/bin/plink_mac_20231211/plink"
GCTA="/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64"

INPUT <- glue("{WEBDATA}/ratxcan-tutorial") ## this has the input data 
OUTPUT <- glue("{WEBDATA}/2023-11-27-ratxcan-tutorial/scratch") ## this has the output data, intermediate results
GENO = glue("{WEBDATA}/2023-11-27-ratxcan-tutorial/data/genotype/")

OUT_TEMPO_09_16=glue("{OUTPUT}/testing-2024-09-16")

OUT_TEMPO = glue("{OUTPUT}/testing-2024-08-29")
```

## define data and software for the terminal

```{bash define data and software paths bash}
#| eval: FALSE
WEBDATA="/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data"

PLINK="/Users/haekyungim/bin/plink_mac_20231211/plink"
GCTA="/Users/haekyungim/bin/gcta-1.94.2-MacOS-ARM-x86_64/gcta64"
  
INPUT=$WEBDATA/ratxcan-tutorial
OUTPUT=$WEBDATA/2023-11-27-ratxcan-tutorial/scratch
GENO=$WEBDATA/2023-11-27-ratxcan-tutorial/data/genotype/

OUT_TEMPO_09_16=$OUTPUT/testing-2024-09-16
```


## read grm matrix
```{r read GRM mat}
grm_mat <- read_GRMBin(glue("{OUTPUT}/rat6k_autosome.grm"))

```

## plot histogram of off diag grm for eqtl rats and the rest
```{r compare GRM off diag eqtl study vs rest}

## read id's from eQTL study rats

SLUGT="debug-rat-ptrs-with-larger-brain-transcriptome" ## copy the slug from the header
bDATET='2022-10-16' ## copy the date from the blog's header here
WORKT = glue("{WEBDATA}/{bDATET}-{SLUGT}")

train_rat_id_file <- glue("{WORKT}/data/genotype/nat/train_rat_ids_nat.txt")
train_rat_id_list = read_tsv(train_rat_id_file,col_names = FALSE)
identical(train_rat_id_list$X1,train_rat_id_list$X2)
nat_ids = train_rat_id_list$X1

# ## 
# rat6kfam = read_table("/Users/haekyungim/Library/CloudStorage/Box-Box/LargeFiles/imlab-data/data-Github/web-data/2022-10-16-debug-rat-ptrs-with-larger-brain-transcriptome/data/genotype/rat6k.fam",col_names = FALSE)
# 
# ##
# identical(rat6kfam$X1,rat6kfam$X2) ## col X1 and X2 
# intersect(rat6kfam$X2,train_rat_id_list) ## 0 intersection
# ## rat6kfam has all the ids in grm_mat 

finalplinkfam = read_table(glue("{WEBDATA}/2022-10-16-debug-rat-ptrs-with-larger-brain-transcriptome/data/genotype/by_chr/final_plink.fam"),col_names = FALSE)
## finalplinkfam has 88 rats from natasha's train list


## make chr1 genotype files
glue("{PLINK} --bfile {WORKT}/data/genotype/by_chr/final_plink --chr 1 --make-bed --out /Users/haekyungim/Downloads/final_plink_01")

## make grm of chr 1
glue("{PLINK} --bfile /Users/haekyungim/Downloads/final_plink_01  --make-rel square --out /Users/haekyungim/Downloads/final_plink_01")
##"plink --bfile {WORKT}/data/genotype/nat/train_rat_subset --make-rel square --out {WORKT}/data/genotype/nat/train_rat_grm"

## calc grm using chr1 only, it takes way too long otherwise
glue("{PLINK} --bfile {WORKT}/data/genotype/nat/train_rat --chr 1 --make-bed --out /Users/haekyungim/Downloads/final_plink_01")

## read relatedness matrix 
final_plink_grm = read_table("/Users/haekyungim/Downloads/final_plink_01.rel",col_names = FALSE) 
final_plink_grm_id = read_table("/Users/haekyungim/Downloads/final_plink_01.rel.id",col_names = FALSE)
final_plink_grm_mat = as.matrix(final_plink_grm)

## are columns X1 and X2 identical
identical(final_plink_grm_id$X1,final_plink_grm_id$X2)

rownames(final_plink_grm_mat) = final_plink_grm_id$X1
colnames(final_plink_grm_mat) = final_plink_grm_id$X1

nat_grm_mat = final_plink_grm_mat[nat_ids,nat_ids] 

## function to

get_offdiag = function(mat)
  mat[upper.tri(mat)]

summary(get_offdiag(nat_grm_mat))

ind = which(!(rownames(final_plink_grm_mat) %in% nat_ids))
notnat_grm_mat = final_plink_grm_mat[ind,ind]
summary(get_offdiag(notnat_grm_mat))


nat_relatedness = get_offdiag(nat_grm_mat)
notnat_relatedness = get_offdiag(notnat_grm_mat)
par(mfrow=c(2,1))
hist(nat_relatedness,xlim=c(-0.5,0.5))
hist(notnat_relatedness,xlim=c(-0.5,0.5))
par(mfrow=c(1,1))
```

:::{.callout-note}
## message
no obvious difference in relatedness between eqtl set and remaining 12K rats (based on chr1 GRM)
:::

```{r qqplot of nat vs nonnat rat GRM}

qqplot(abs(nat_relatedness), abs(notnat_relatedness),main="abs nat relatedness vs non nat" );abline(0,1)

qqplot(nat_relatedness, notnat_relatedness ,main=" nat relatedness vs non nat");abline(0,1)

## this takes forever: wilcox.test(nat_relatedness, notnat_relatedness) 


```

:::{.callout-note}
## message
maybe a tiny bit larger for nonat, with one outlier 1.5 for nat rats
:::

## define myplot2
```{r define myplot2}
myplot2 <- function(tempres, post_titulo="",semilla="") {
  # Create a data frame with specific columns
  df <- data.frame(
    p0.000001_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 1e-6)),
    p0.000001_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 1e-6)),
    p0.01_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 0.01)),
    p0.01_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 0.01)),
    p0.05_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 0.05)),
    p0.05_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 0.05)),
    p0.10_yes = apply(tempres$pmat_correct, 2, function(x) mean(x < 0.10)), 
    p0.10_no = apply(tempres$pmat_raw, 2, function(x) mean(x < 0.10))
    # ... [rest of your code for creating df] ...
  )

# Pivot the data frame to long format, specifying the columns to keep
df_long <- pivot_longer(df, cols = starts_with("p"))

df_long <- df_long %>% separate(name,into = c("threshold","corrected"),sep="_") %>% rename(proportion=value)

# Rename the name column to replace p0.xx with p<0.xx
df_long <- df_long %>%
  mutate(threshold = gsub("p0\\.", "p<0.", threshold))

  # Create boxplots with mean
  pp <- ggplot(df_long, aes(x = threshold, y = proportion, fill = corrected)) +
    geom_boxplot(alpha = 0.6) +
    stat_summary(fun = mean, geom = "point", shape = 3, size = 2, stroke = 2, color = "blue",                  #position = position_dodge(width = 0.8)) +
                 position = position_dodge(width = -0.1)) +
    #stat_summary(fun = mean, geom = "crossbar",  size = .5, color = "blue") +
    #stat_summary(fun = mean, geom = "crossbar",  size = .5, color = "darkgray") +
    geom_hline(yintercept = c(1e-6,0.01, 0.05, 0.10), linetype = "dashed", color = "gray") +
    theme_minimal(base_size = 17) +
    ggtitle(glue("Type I Error Calibration {semilla} {post_titulo}")) +
    xlab("significance") + ylab("false positive rate")

  pp
}
```

## define function lmm with GRM
```{r define lmmGRM function}
## HERE WE USE THE FULL GRM MATRIX AND CALCULATE THE INVERSE OF THE SIGMA MATRIX
## define lmm association function 
lmmGRM = function(pheno, grm_mat, h2, pred_expr,pheno_id_col=1,pheno_value_cols=6:6,out=NULL)
{
  ## input pheno is a data frame with id column pheno_id_col=1 by default
  ## phenotype values are in pheno_value_cols, 6:6 by default (SCORE column location in plink output), it can have more than one phenotype
  ## but h2 has to be the same, this is useful when running simulations with different h2
  ## call lmmXcan(pheno %>% select(IID,SCORE))
  
  ## format pheno to matrix form
  phenomat <- as.matrix(pheno[,pheno_value_cols])
  rownames(phenomat) <- pheno[[pheno_id_col]]
  
  ## turn pred_expr into matrix with rownames =IID, keep only IIDs in ymat
  exp_mat = as.matrix(pred_expr %>% select(-IID))
  rownames(exp_mat) = pred_expr$IID

  ## align pheno and expr matrices
  idlist = intersect(rownames(phenomat), rownames(exp_mat))
  
  nsam = length(idlist)
  
  ## CALCULATE SIGMA
  ID_mat = diag(rep(1,nsam))
  
  #testing_scale_grm = TRUE
  #if(testing_scale_grm) grm_mat = sweep( sweep(grm_mat,2, 1/sqrt(diag(grm_mat)),"*"), 1, 1/sqrt(diag(grm_mat)),"*")    
  
  Sigma = grm_mat[idlist,idlist] * h2 + (1 - h2) * ID_mat
  
  Sig_eigen = eigen(Sigma)
  rownames(Sig_eigen$vectors) = rownames(Sigma)
  
  isighalf = Sig_eigen$vectors %*% diag( 1 / sqrt(  Sig_eigen$values  ) ) %*% t(Sig_eigen$vectors)
  
  ## perform raw association
  cormat_raw = matrix_lm(phenomat[idlist,, drop = FALSE], exp_mat[idlist,])
  pmat_raw = cor2pval(cormat_raw,nsam)
  colnames(pmat_raw) <- gsub("cor_", "pval_", colnames(pmat_raw))
  
  ## perform corrected association
  cormat_correct = matrix_lm(isighalf%*% phenomat[idlist,, drop = FALSE], isighalf %*% exp_mat[idlist,])
  pmat_correct = cor2pval(cormat_correct,nsam)
  colnames(pmat_correct) <- gsub("cor_", "pval_", colnames(pmat_correct))
  
  if(!is.null(out))
  {
    saveRDS(cormat_correct,file = glue("{out}_cormat_correct.RDS"))
    saveRDS(pmat_correct,  file = glue("{out}_pmat_correct.RDS"))
    saveRDS(cormat_raw,    file = glue("{out}_cormat_raw.RDS"))
    saveRDS(pmat_raw,      file = glue("{out}_pmat_raw.RDS"))
  }
  res = list(
    cormat_correct=cormat_correct, 
    pmat_correct=pmat_correct, 
    cormat_raw=cormat_raw, 
    pmat_raw=pmat_raw)
  res
  
}
```

## read sim PRS for Y and compute phenotype with h2
```{r read sim prs for Y and create phenotype}

simpheno = readRDS(file=glue("{OUTPUT}/sim/tempo/simpheno.RDS")) ## no error component
nsim = ncol(simpheno) - 2 

identical(simpheno$FID,rownames(grm_mat)) 

```

## read predicted expression
```{r read predicted expression}
read_pred_expr = function(filename)
{
  ##usage: Br_pred_expr = read_pred_expr(glue("{OUTPUT}/Br-hki-rat6k__predict.txt"))
  pred_expr <- vroom::vroom(filename) %>% 
  select(-FID) %>%  # Remove the FID column
  mutate(IID = str_split(IID, "_", simplify = TRUE)[, 1])  # Keep the first part of IID
  pred_expr
}

pred_expr = read_pred_expr(glue("{OUTPUT}/AC-filtered__predict.txt"))

```

## prune SNPs and calc GRM
```{bash prune SNPs and calc GRM}
#| eval: false

## get pruned set of snps
HEADA=rat6k_LD_pruned_r2p95
$PLINK --bfile $GENO/rat6k_autosome --indep-pairwise 500 5 0.95 --out $OUT_TEMPO_09_16/$HEADA

## create new bed file
## $PLINK --bfile $GENO/rat6k_autosome --extract $OUT_TEMPO_09_16/rat6k_LD_pruned.prune.in --make-bed --out $OUT_TEMPO_09_16/rat6k_LD_pruned

## calculate pruned grm
$GCTA --bfile $GENO/rat6k_autosome --extract $OUT_TEMPO_09_16/${HEADA}.prune.in --make-grm --out $OUT_TEMPO_09_16/${HEADA}


```

## run ratXcan=lmmGRM for 100 sims [updated Fig 3]
```{r fit lmmGRM}


add_noise = function(simpheno,h2)
{
  phenomat = as.matrix(simpheno %>% select(-IID,-FID))
  phenomat = scale(phenomat)
  ## add noise
  nx = nrow(phenomat)
  nsim=ncol(phenomat)
  phenomat = sqrt(h2) * phenomat + sqrt(1 - h2) * scale(matrix(rnorm(nx*nsim),nx, nsim))
  res = cbind(simpheno[,1:2], as.data.frame(phenomat))
  rownames(res) = NULL
  res
}

recalculate=FALSE
for(h2 in c(0.1,0.2,0.4,0.6,0.8))
{
  cat("---",h2,"---\n")
  if(recalculate)
  { 
    tic=Sys.time()
    tempres <- lmmGRM(add_noise(simpheno,h2),
                      grm_mat, h2,pred_expr,pheno_id_col=1, 
                      pheno_value_cols=2+(1:nsim))
    toc=Sys.time()
    print(toc - tic)
    saveRDS(tempres,file=glue("{OUT_TEMPO_09_16}/tempres-null-h2-{h2}.RDS"))
  } else tempres = readRDS(glue("{OUT_TEMPO_09_16}/tempres-null-h2-{h2}.RDS"))
  #
  myplot2(tempres)
  ggsave(glue("{OUT_TEMPO_09_16}/calib-figure-h2-{h2}.png"),width=6,height=5)
  png(glue("{OUT_TEMPO_09_16}/hist-p-corrected-{h2}.png"))
  hist(tempres$pmat_correct,main=glue("corrected p-values - {h2}"))
  dev.off()
  png(glue("{OUT_TEMPO_09_16}/hist-p-raw-{h2}.png"))
  hist(tempres$pmat_raw,main=glue("raw p-values - {h2}"))
  dev.off()
  png(glue("{OUT_TEMPO_09_16}/qqunif-compare-raw-corrected-{h2}.png"))
  qqunif.compare(tempres$pmat_raw,tempres$pmat_correct,BH=FALSE,BF=FALSE,BF2=FALSE,main=glue("qqunif {h2}") )
  dev.off()
}

```

```
> nsim = ncol(simpheno) - 2 
>     tic=Sys.time()
>     tempres <- lmmGRM(add_noise(simpheno,h2),
+                       grm_mat, h2,pred_expr,pheno_id_col=1, 
+                       pheno_value_cols=2+(1:nsim))
>     toc=Sys.time()
>     print(toc - tic)
Time difference of 6.113828 mins
```

## run lmmGRM with LD pruning
```{r calc lmmGRM with ld pruned grm}

headalist = paste0("rat6k_LD_pruned_",c("r2p2","r2p5","r2p95"))
for(HEADA in headalist)
{
      ## read grm_mat_ld_pruned
    grm_mat_ld_pruned <- read_GRMBin(glue("{OUT_TEMPO_09_16}/{HEADA}.grm"))
    ## sample subset of off diag and compare to grm without ld pruning
    ind=sample(1:length(c(grm_mat)),10000)
    gg1=c(grm_mat)[ind]
    gg2=c(grm_mat_ld_pruned)[ind]
    
    plot(gg1,gg2,main=glue("off-diag of GRM all vs {gsub('rat6k_','',HEADA)}")); abline(0,1)
    cor.test(gg1,gg2)

}

headalist = paste0("rat6k_LD_pruned_",c("r2p95"))
h2=0.4

for(HEADA in headalist)
{
  HEADLD = gsub('rat6k_','',HEADA)
  if(recalculate)
  { 
    tic=Sys.time()
    ## read grm_mat_ld_pruned
    cat("---- ",HEADLD,"\n")
    grm_mat_ld_pruned <- read_GRMBin(glue("{OUT_TEMPO_09_16}/{HEADA}.grm"))
    tempres_ld <- lmmGRM(add_noise(simpheno,h2),
                      grm_mat_ld_pruned, h2,pred_expr,pheno_id_col=1, 
                      pheno_value_cols=2+(1:nsim))
    toc=Sys.time()
    print(toc - tic)
    saveRDS(tempres_ld,file=glue("{OUT_TEMPO_09_16}/tempres-{HEADLD}-null-h2-{h2}.RDS"))
  } else tempres_ld = readRDS(glue("{OUT_TEMPO_09_16}/tempres-{HEADLD}-null-h2-{h2}.RDS"))
  #qqunif(tempres_ld$pmat_correct[,1:10],main=glue("{HEADLD} correction"),BH=FALSE,CI=FALSE)  ## qqplot of subset of simulations
}

qqunif(tempres_ld$pmat_correct[,1:10],main=glue("RatXcan with LD pruned GRM"),BH=FALSE,CI=FALSE)  
mtext("LD pruned with plink --indep-pairwise 500 5 0.95")


```

## how to calc h2 of simulated phenotype - unfinished
```{r calc h2 of simulated phenotype - unfinished}
#| echo: false

## add noise to simpheno

phenodf = add_noise(simpheno,h2)
write_tsv(phenodf,file=glue("{OUT_TEMPO_09_16}/pheno.txt"))
read_tsv(glue("{OUT_TEMPO_09_16}/h2_estimation.hsq")) %>% filter(Source=="V(G)/Vp") %>% pull(Variance)

comando = glue("{GCTA} --grm etc")

## save as pheno file

## calculate h2 with GCTA



```

