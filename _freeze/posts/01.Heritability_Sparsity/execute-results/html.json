{
  "hash": "d3d946a5721da75a81d351de972a4a6f",
  "result": {
    "markdown": "---\ntitle: \"01.Heritability_Sparsity\"\nauthor: \"natasha.santhanam\"\ndate: \"2022-02-07\"\noutput: workflowr::wflow_html\neditor_options:\nchunk_output_type: console\n---\n\n\n## Generate Heritability and Sparsity Estimates for all 5 tissues\n\n## Calculate Cis Heritability within 1MB\n\nFirst we create bimbam formats for genotypes from the original genotype file. The bimbam format is the input for gemma, which we will use for both heritability and sparisty estiamtes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd <- \"/Users/natashasanthanam/Github/rat-genomic-analysis/data/\"\n\ngeno_Ac = geno[,match(rownames(gexAc_transpose), colnames(geno))]\ngeno_Il = geno[,match(rownames(gexIl_transpose), colnames(geno))]\ngeno_Lh = geno[,match(rownames(gexLh_transpose), colnames(geno))]\ngeno_Pl = geno[,match(rownames(gexPl_transpose), colnames(geno))]\ngeno_Vo = geno[,match(rownames(gexVo_transpose), colnames(geno))]\n\nAc_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Ac), phyMap$refAllele, phyMap$effectAllele, geno_Ac)\nIl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Il),phyMap$refAllele, phyMap$effectAllele,  geno_Il)\nLh_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Lh),phyMap$refAllele, phyMap$effectAllele,  geno_Lh)\nPl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Pl),phyMap$refAllele, phyMap$effectAllele,  geno_Pl)\nVo_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Vo),phyMap$refAllele, phyMap$effectAllele,  geno_Vo)\n\nwrite.table(Ac_bimbam, file = wd %&% \"Ac_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Il_bimbam, file = wd %&% \"Il_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Lh_bimbam, file = wd %&% \"Lh_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Pl_bimbam, file = wd %&%\"Pl_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Vo_bimbam, file = wd %&%\"Vo_bimbam\",quote=F,col.names=F,row.names=F)\n```\n:::\n\n\nCollect list of individuals from the expression files\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngtf <- read_tsv(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gtf.txt\", col_names=TRUE)\ngexAc_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexAc_transpose.txt\")\ngexIl_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexIl_transpose.txt\")\ngexLh_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexLh_transpose.txt\")\ngexPl_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexPl_transpose.txt\")\ngexVo_transpose <- read.table(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Box_files/gexVo_transpose.txt\")\n\nensidlist <- colnames(gexAc_transpose)\nensidlist_Il <- colnames(gexIl_transpose)\nensidlist_Lh <- colnames(gexLh_transpose)\nensidlist_Pl <- colnames(gexPl_transpose)\nensidlist_Vo <- colnames(gexVo_transpose)\n```\n:::\n\n\n# Ac\n\nset directory\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/phenotype_files/\"\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/genotype_files/\"\nbim.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/bim_bam/\"\n#Read in bimbam file \nbimbamfile <- bim.dir %&% \"Ac_bimbam\" ###get SNP position information###\nbimbam <- read.table(bimbamfile)\n```\n:::\n\n\nMake local GRMs for each gene\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/\")\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene <- ensidlist[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <- geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bimbam, bimbam[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,2]>=start & chrsnps[,2]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,3:ncol(cissnps)]\n    write.table(snplist, file= ge.dir %&% \"tmp.Ac.geno\" %&% gene, quote=F,col.names=F,row.names=F)\n    \n    geneexp <- cbind(gexAc_transpose[,i])\n\twrite.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% gene, col.names=F, row.names = F, quote=F) #output pheno for gemma\n    runGEMMAgrm <- \"gemma -g \" %&%  ge.dir %&% \"tmp.Ac.geno\" %&% gene %&% \" -p \" %&% pheno.dir %&% \"tmp.pheno.\" %&%  gene  %&%  \" -gk -o grm_Ac_\" %&% gene\n    system(runGEMMAgrm)\n}\n```\n:::\n\n\nNow we do the above process for the rest of tissues\n\n# Il\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/phenotype_files/\"\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/genotype_files/\"\nbim.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/bim_bam/\"\n#Read in bimbam file \nbimbamfile <- bim.dir %&% \"Il_bimbam\" ###get SNP position information###\nbimbam <- read.table(bimbamfile)\n```\n:::\n\n\nMake local GRMs for each gene\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/\")\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene <- ensidlist[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <- geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bimbam, bimbam[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,2]>=start & chrsnps[,2]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,3:ncol(cissnps)]    \n    write.table(snplist, file= ge.dir %&% \"tmp.Il.geno\" %&% gene, quote=F,col.names=F,row.names=F)\n    \n    geneexp <- cbind(gexIl_transpose[,i])\n\twrite.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% gene, col.names=F, row.names = F, quote=F) #output pheno for gemma\n    runGEMMAgrm <- \"gemma -g \" %&%  ge.dir %&% \"tmp.Il.geno\" %&% gene %&% \" -p \" %&% pheno.dir %&% \"tmp.pheno.\" %&%  gene  %&%  \" -gk -o grm_Il_\" %&% gene\n    system(runGEMMAgrm)\n}\n```\n:::\n\n\n# Lh\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/phenotype_files/\"\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/genotype_files/\"\nbim.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/bim_bam/\"\n#Read in bimbam file \nbimbamfile <- bim.dir %&% \"Lh_bimbam\" ###get SNP position information###\nbimbam <- read.table(bimbamfile)\n```\n:::\n\n\nMake local GRMs for each gene\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/\")\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene <- ensidlist[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <- geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bimbam, bimbam[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,2]>=start & chrsnps[,2]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,3:ncol(cissnps)]    \n    write.table(snplist, file= ge.dir %&% \"tmp.Lh.geno\" %&% gene, quote=F,col.names=F,row.names=F)\n    \n    geneexp <- cbind(gexLh_transpose[,i])\n\twrite.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% gene, col.names=F, row.names = F, quote=F) #output pheno for gemma\n    runGEMMAgrm <- \"gemma -g \" %&%  ge.dir %&% \"tmp.Lh.geno\" %&% gene %&% \" -p \" %&% pheno.dir %&% \"tmp.pheno.\" %&%  gene  %&%  \" -gk -o grm_Lh_\" %&% gene\n    system(runGEMMAgrm)\n}\n```\n:::\n\n\n# Pl\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/phenotype_files/\"\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/genotype_files/\"\nbim.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/bim_bam/\"\n#Read in bimbam file \nbimbamfile <- bim.dir %&% \"Pl_bimbam\" ###get SNP position information###\nbimbam <- read.table(bimbamfile)\n```\n:::\n\n\nMake local GRMs for each gene\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/\")\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene <- ensidlist[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <- geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bimbam, bimbam[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,2]>=start & chrsnps[,2]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,3:ncol(cissnps)]    \n    write.table(snplist, file= ge.dir %&% \"tmp.Pl.geno\" %&% gene, quote=F,col.names=F,row.names=F)\n    \n    geneexp <- cbind(gexPl_transpose[,i])\n\twrite.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% gene, col.names=F, row.names = F, quote=F) #output pheno for gemma\n    runGEMMAgrm <- \"gemma -g \" %&%  ge.dir %&% \"tmp.Pl.geno\" %&% gene %&% \" -p \" %&% pheno.dir %&% \"tmp.pheno.\" %&%  gene  %&%  \" -gk -o grm_Pl_\" %&% gene\n    system(runGEMMAgrm)\n}\n```\n:::\n\n\n#Vo\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/phenotype_files/\"\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/genotype_files/\"\nbim.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/bim_bam/\"\n#Read in bimbam file \nbimbamfile <- bim.dir %&% \"Vo_bimbam\" ###get SNP position information###\nbimbam <- read.table(bimbamfile)\n```\n:::\n\n\nMake local GRMs for each gene\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/\")\nfor(i in 1:length(ensidlist)){\n    cat(i,\"/\",length(ensidlist),\"\\n\")\n    gene <- ensidlist[i]\n    geneinfo <- gtf[match(gene, gtf$Gene),]\n    chr <- geneinfo[1]\n    c <- chr$Chr\n    start <- geneinfo$Start - 1e6 ### 1Mb lower bound for cis-eQTLS\n    end <- geneinfo$End + 1e6 ### 1Mb upper bound for cis-eQTLs\n    chrsnps <- subset(bimbam, bimbam[,1]==c) ### pull snps on same chr\n    cissnps <- subset(chrsnps,chrsnps[,2]>=start & chrsnps[,2]<=end) ### pull cis-SNP info\n    snplist <- cissnps[,3:ncol(cissnps)]    \n    write.table(snplist, file= ge.dir %&% \"tmp.Vo.geno\" %&% gene, quote=F,col.names=F,row.names=F)\n    \n    geneexp <- cbind(gexVo_transpose[,i])\n\twrite.table(geneexp, file= pheno.dir %&% \"tmp.pheno.\" %&% gene, col.names=F, row.names = F, quote=F) #output pheno for gemma\n    runGEMMAgrm <- \"gemma -g \" %&%  ge.dir %&% \"tmp.Vo.geno\" %&% gene %&% \" -p \" %&% pheno.dir %&% \"tmp.pheno.\" %&%  gene  %&%  \" -gk -o grm_Vo_\" %&% gene\n    system(runGEMMAgrm)\n}\n```\n:::\n\n\n## Sparsity Analysis\n\nAll the code above generates the local GRM for each phenotype (gene). With the GRM we then run gemma again to calculate both PVE (heritability) and PGE (sparsity). I used a badger template to calculate h2 and sparsity for each tissue. This steps takes a lot of computing power, so we use Badger. It takes approximatley 2-3 days to run.\n\nThe code to run badger is here\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"./Rat_Genomics_Paper_Pipeline/analysis/Sparsity_Badger_Template.Rmd\")\n```\n:::\n\n\nGEMMA then generates a .hyp file for each phenotype or in our case gene of interest. The hyp file contains the posterior samples for the hyper-parameters (h, PVE, rho, PGE, pi and gamma) for every 10th iteration. For our purposes, we are interested in the PGE and PVE parameters.\n\nTo then calculate the point estimate and credible set for Proportion of Variance Explained (PVE) and Proportion of genetic variance explained by the sparse effects terms (PGE), we calculate the posterior probability for each gene for each tissue.\n\nI generated a function that calculates the beta of the posterior distribution and can be found [here](https://gist.github.com/natashasanthanam/6eb539dcadecafe3a6dec448cedc7046)\n\n# Ac\n\nFind point estimate and 95% credible interval in CRI for PVE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/output\"\nfiles <- list.files(path = ge.dir, pattern = \".hyp.txt\", full.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPVE_df <- as.data.frame(matrix(NA, 0, 4)) \n\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pve, 0.1)\n  q2 <- quantile(df$pve, 0.9)\n  quantile1=list(p=.1 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PVE_df[i, 1] <- gene\n  PVE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PVE_df[i, 3] <- credible_set[1]\n  PVE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PVE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/PVE_estimates.txt\", col_names = FALSE )\n\nPGE_df <- as.data.frame(matrix(NA, 0, 4))\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pge, 0.5)\n  q2 <- quantile(df$pge, 0.9)\n  quantile1=list(p=.5 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PGE_df[i, 1] <- gene\n  PGE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PGE_df[i, 3] <- credible_set[1]\n  PGE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PGE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Ac/PGE_estimates.txt\", col_names = FALSE )\n```\n:::\n\n\n# Il\n\n\n::: {.cell}\n\n```{.r .cell-code}\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/output\"\nfiles <- list.files(path = ge.dir, pattern = \".hyp.txt\", full.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPVE_df <- as.data.frame(matrix(NA, 0, 4)) \n\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pve, 0.1)\n  q2 <- quantile(df$pve, 0.9)\n  quantile1=list(p=.1 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PVE_df[i, 1] <- gene\n  PVE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PVE_df[i, 3] <- credible_set[1]\n  PVE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PVE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/PVE_estimates.txt\", col_names = FALSE )\n\nPGE_df <- as.data.frame(matrix(NA, 0, 4))\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pge, 0.5)\n  q2 <- quantile(df$pge, 0.9)\n  quantile1=list(p=.5 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PGE_df[i, 1] <- gene\n  PGE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PGE_df[i, 3] <- credible_set[1]\n  PGE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PGE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Il/PGE_estimates.txt\", col_names = FALSE )\n```\n:::\n\n\n# Lh\n\n\n::: {.cell}\n\n```{.r .cell-code}\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/output\"\nfiles <- list.files(path = ge.dir, pattern = \".hyp.txt\", full.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPVE_df <- as.data.frame(matrix(NA, 0, 4)) \n\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pve, 0.1)\n  q2 <- quantile(df$pve, 0.9)\n  quantile1=list(p=.1 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PVE_df[i, 1] <- gene\n  PVE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PVE_df[i, 3] <- credible_set[1]\n  PVE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PVE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/PVE_estimates.txt\", col_names = FALSE )\n\nPGE_df <- as.data.frame(matrix(NA, 0, 4))\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pge, 0.5)\n  q2 <- quantile(df$pge, 0.9)\n  quantile1=list(p=.5 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PGE_df[i, 1] <- gene\n  PGE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PGE_df[i, 3] <- credible_set[1]\n  PGE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PGE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Lh/PGE_estimates.txt\", col_names = FALSE )\n```\n:::\n\n\n# Pl\n\n\n::: {.cell}\n\n```{.r .cell-code}\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/output\"\nfiles <- list.files(path = ge.dir, pattern = \".hyp.txt\", full.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPVE_df <- as.data.frame(matrix(NA, 0, 4)) \n\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pve, 0.1)\n  q2 <- quantile(df$pve, 0.9)\n  quantile1=list(p=.1 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PVE_df[i, 1] <- gene\n  PVE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PVE_df[i, 3] <- credible_set[1]\n  PVE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PVE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/PVE_estimates.txt\", col_names = FALSE )\n\nPGE_df <- as.data.frame(matrix(NA, 0, 4))\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pge, 0.5)\n  q2 <- quantile(df$pge, 0.9)\n  quantile1=list(p=.5 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PGE_df[i, 1] <- gene\n  PGE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PGE_df[i, 3] <- credible_set[1]\n  PGE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PGE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Pl/PGE_estimates.txt\", col_names = FALSE )\n```\n:::\n\n\n# Vo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nge.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/output\"\nfiles <- list.files(path = ge.dir, pattern = \".hyp.txt\", full.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPVE_df <- as.data.frame(matrix(NA, 0, 4)) \n\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pve, 0.1)\n  q2 <- quantile(df$pve, 0.9)\n  quantile1=list(p=.1 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PVE_df[i, 1] <- gene\n  PVE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PVE_df[i, 3] <- credible_set[1]\n  PVE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PVE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/PVE_estimates.txt\", col_names = FALSE )\n\nPGE_df <- as.data.frame(matrix(NA, 0, 4))\nfor(i in 1:length(files)){\n  gene <- substr(sapply(strsplit(files[i],\"/\"), `[`, 11), 8, 25)\n  df <- read_tsv(files[i])\n  \n  q1 <- quantile(df$pge, 0.5)\n  q2 <- quantile(df$pge, 0.9)\n  quantile1=list(p=.5 ,x=q1)\n  quantile2=list(p=.9, x=q2)\n  if(quantile1$x != quantile2$x) {\n  prior <- beta.select(quantile1, quantile2)\n  credible_set <- list(qbeta(0.025,prior[1],  prior[2]), qbeta(0.975,prior[1],  prior[2]))\n  \n  PGE_df[i, 1] <- gene\n  PGE_df[i, 2] <- qbeta(0.5, prior[1],  prior[2])\n  PGE_df[i, 3] <- credible_set[1]\n  PGE_df[i, 4] <- credible_set[2]\n  }\n  else \n    i = i+1\n}\n\nwrite_tsv(PGE_df, \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/GEMMA/Vo/PGE_estimates.txt\", col_names = FALSE )\n```\n:::\n\n\nNow we have PVE and PGE estimates for each tissue and can generate the fitted curve figure for Heritability.\n\n# Generate Fitted Heritability Curves with R2\n\nI'm showing the curve for Ac tissue but I generated the one for all other tissues as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw(base_size = 15))\nData <- \"/Users/natashasanthanam/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Rat-Genomics/Tyson-PalmerLab_PredictDB_Results/sql/\"\npoly_dir <- \"/Users/natashasanthanam/Github/rat-genomic-analysis/data/\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload_pve <- function(df){\n  df <- df[order(df$point_estimate),]\n  df$index <- 1:nrow(df)\n  return(df)\n}\n```\n:::\n\n\nFirst we get the R2 for the tissue from the model we generated\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename <- Data %&% \"Ac_output_db.db\"\nsqlite.driver <- dbDriver(\"SQLite\")\nconn <- dbConnect(RSQLite::SQLite(), filename)\n\nextra <- dbGetQuery(conn, 'select * from extra')\ndbDisconnect(conn)\n```\n:::\n\n\nNext we create the ordered plot for heritability for Ac. We use PVE as h2, the proportion of variance in phenotypes explained by typed genotypes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhuman_h2 <- read_csv(\"/Users/natashasanthanam/Github/rat-genomic-analysis/data/human_PVE.csv\") %>% rename(point_estimate = pve) \nPVE_Ac <- read_tsv(poly_dir %&% \"Ac_PVE_estimates.txt\", col_names = FALSE)\n\nhuman_h2$ensid = sapply(strsplit(human_h2$ensid, \"\\\\.\"), `[`, 1)\ncolnames(PVE_Ac) <- c(\"gene\", \"point_estimate\", \"credible_set_1\", \"credible_set_2\")\n\noverlap <- data.frame(rat_genes = PVE_Ac$gene, ensid = orth.rats[match(PVE_Ac$gene, orth.rats$rnorvegicus_homolog_ensembl_gene), 1]$ensembl_gene_id) \noverlap <- overlap[na.omit(match(human_h2$ensid, overlap$ensid)), ]\n\nPVE_Ac <- PVE_Ac %>% filter(gene %in% overlap$rat_genes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPVE_Ac <- inner_join(PVE_Ac, extra, by = \"gene\")\n\nA_df_Ac <- load_pve(PVE_Ac)\nplt_1 <- (ggplot(data = A_df_Ac, aes(x = index))\n          + geom_point(aes(x=index, y=R2), colour = \"dodgerblue2\", size = 0.2)\n          + geom_line(aes(y = point_estimate), lwd=1.5)\n          + geom_hline(yintercept = 0, linetype=2)\n          + geom_ribbon(aes(ymax = credible_set_2, ymin = credible_set_1),\n                         alpha = 0.25)\n          + labs(x = 'Genes Sorted by Proportion of Variance Explained (PVE)',\n                 y = 'PVE')\n           + ylim(c(0,1))\n           + annotate(\"text\", x = 1250, y = 0.9, label = \"Mean h2 =  0.098\", size = 6)\n           + annotate(\"text\", x = 1250, y = 0.8, label = \"Mean R2 =  0.085\", size = 6)) \nplt_1\n```\n:::\n\n\n# Generate Analagous Plot in Humans\n\nGet R2 and H2 from Heather's Models for Brain\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nsqlite3 genarch.db\n.headers on\n.mode csv\n.output human_PVE.csv\nselect gene, ensid, en_r2 ,pve,pve_CI from results where tissue = \"DGN-WB\";\n.quit\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhuman_h2$credible_set_1 = as.numeric(ifelse(substr(human_h2$pve_CI ,1,1) == \"-\", paste(\"-\", sapply(strsplit(human_h2$pve_CI, \"-\"), `[`, 2), sep = \"\"), sapply(strsplit(human_h2$pve_CI, \"-\"), `[`, 1)))\nhuman_h2$credible_set_2 = as.numeric(ifelse(substr(human_h2$pve_CI ,1,1) == \"-\", sapply(strsplit(human_h2$pve_CI, \"-\"), `[`, 3), sapply(strsplit(human_h2$pve_CI, \"-\"), `[`, 2)))\n\nhuman_h2 <- human_h2 %>% filter(ensid %in% overlap$ensid)\n\nhum_df <- load_pve(human_h2)\nplt_2  <- (ggplot(data = hum_df, aes(x = index))\n          + geom_point(aes(x=index, y=en_r2), colour = \"maroon1\", size = 0.2)\n          + geom_line(aes(y = point_estimate), lwd = 1.5)\n          + geom_hline(yintercept = 0, linetype=2)\n          + geom_ribbon(aes(ymax = credible_set_2, ymin = credible_set_1),\n                         alpha = 0.25)\n          + labs(x = 'Genes Sorted by Proportion of Variance Explained (PVE)',\n                 y = 'PVE')\n          + ylim(c(0,1))\n           + annotate(\"text\", x = 1690, y = 0.9, label = \"Mean h2 =  0.124\", size = 6)\n           + annotate(\"text\", x = 1710, y = 0.8, label = \"Mean R2 =  0.114\", size = 6))\nplt_2 \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall_h2 <- tibble(gene)\nfor(l in all) {\n  l <- l %>% select(c(gene, point_estimate))\n  all_h2 <- full_join(all_h2, l, by = \"gene\")\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}