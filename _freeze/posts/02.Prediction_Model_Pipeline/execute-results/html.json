{
  "hash": "c87cf153c4f846041ac1eaf72d6ee577",
  "result": {
    "markdown": "---\ntitle: \"02. Prediction_Model_Pipeline\"\nauthor: \"Tyson Miller\" \ndate: \"2/7/2022\" \noutput: html_document\n---\n\n\n# Definitions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\n```\n:::\n\n\nData from [here](https://uchicago.app.box.com/folder/102043737114) - genoGex.Rdata has everything we need in it There are 5 'gex' RDS files which are the gene expressions for the 5 different tissues, the 'gtf' is the gene annotation, 'phyMap' is the snp annotation, and 'geno' is the genotype matrix\n\nOur pipeline predicts expressions from the gene expression data and genotypes of the rats from the study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n```\n:::\n\n\n# Gene Expression Files\n\nFirst, we transpose each tissue's gene expression file to fit the format expected by the PrediXcan pipeline scripts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#transposing gene expression files for the 5 tissues \nn = gexAc$EnsemblGeneID\ngexAc_transpose <- as.data.frame(t(gexAc[,-1]))\ncolnames(gexAc_transpose) <- n\nn = gexIl$EnsemblGeneID\ngexIl_transpose <- as.data.frame(t(gexIl[,-1]))\ncolnames(gexIl_transpose) <- n\nn = gexLh$EnsemblGeneID\ngexLh_transpose <- as.data.frame(t(gexLh[,-1]))\ncolnames(gexLh_transpose) <- n\nn = gexPl$EnsemblGeneID\ngexPl_transpose <- as.data.frame(t(gexPl[,-1]))\ncolnames(gexPl_transpose) <- n\nn = gexVo$EnsemblGeneID\ngexVo_transpose <- as.data.frame(t(gexVo[,-1]))\ncolnames(gexVo_transpose) <- n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Running inverse normalization on each gene expression\ninvnorm = function(x) {\n  if(is.null(dim(x))) res = invnorm.vector(x) else\n  res=apply(x,2,invnorm.vector)\n  res\n}\ninvnorm.vector = function(x) {yy = rank(x)/(length(x)+1); qnorm(yy)}\ngexAc_transpose = invnorm(gexAc_transpose)\ngexIl_transpose = invnorm(gexIl_transpose)\ngexLh_transpose = invnorm(gexLh_transpose)\ngexPl_transpose = invnorm(gexPl_transpose)\ngexVo_transpose = invnorm(gexVo_transpose)\n```\n:::\n\n\nWrite to file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Writing the gene expression files to csv files to be used for PEER Factor analysis\nwrite.table(gexAc_transpose, file = '/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/gexAc.csv', sep = \",\", col.names = TRUE, row.names = FALSE)\nwrite.table(gexIl_transpose, file = '/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/gexIl.csv', sep = \",\", col.names = TRUE, row.names = FALSE)\nwrite.table(gexLh_transpose, file = '/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/gexLh.csv', sep = \",\", col.names = TRUE, row.names = FALSE)\nwrite.table(gexPl_transpose, file = '/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/gexPl.csv', sep = \",\", col.names = TRUE, row.names = FALSE)\nwrite.table(gexVo_transpose, file = '/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/gexVo.csv', sep = \",\", col.names = TRUE, row.names = FALSE)\n```\n:::\n\n\n## PEER analysis\n\nNow we are performing PEER factor analysis on each tissue, choosing 7 factors.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npeertool -f data/\"gexAc.csv\" -n 7 -o peer_Ac --has_header\npeertool -f data/\"gexIl.csv\" -n 7 -o peer_Il --has_header\npeertool -f data/\"gexLh.csv\" -n 7 -o peer_Lh --has_header\npeertool -f data/\"gexPl.csv\" -n 7 -o peer_Pl --has_header\npeertool -f data/\"gexVo.csv\" -n 7 -o peer_Vo --has_header\n```\n:::\n\n\nLater on, we examine these 7 factors, as well as other covariates, to interpret expression variability. \\# Gene, snp annotation files The prediction model pipeline also requires a gene annotation file as input. The code below generates it from the gene annotations provided by Palmer lab in 'gtf'. We also collect snp info.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngtf$gene_type = sub(\".*?gene_biotype(.*?);.*\", \"\\\\1\", gtf$Attr)\ngtf$gene_name = sub(\".*?gene_name(.*?);.*\", \"\\\\1\", gtf$Attr)\ngene_annotation = subset(gtf, select = -c(Source, Feature, Score, Strand, Attr, Frame) )\ngene_annotation = gene_annotation[, c(\"Chr\",\"Gene\", \"gene_name\", \"Start\", \"End\", \"gene_type\" )]\ncolnames(gene_annotation) = c(\"chr\", \"gene_id\", \"gene_name\", \"start\", \"end\")\nrownames(gene_annotation) = gene_annotation$gene_id\n```\n:::\n\n\nWe have all the information needed to generate the predictions models. We are left to reorganize it to fit the pipeline. The specifics of each step is commented at the top of each block.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Making the snp annotation in the correct format for the pipeline\nphyMap <- within(phyMap,  varID <- paste(Chr, Pos, Ref, Alt, sep=\"_\"))\nrownames(phyMap) = phyMap$varID\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", 'varID', \"rsid\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Splitting the snp annotation file by chromosome\ns <- setNames(split(phyMap, phyMap$chr), paste0(\"snp_annot.chr\", unique(phyMap$chr)))\nlist2env(s, globalenv())\n```\n:::\n\n\nThe new genotype file combines the provided `geno` file and combines information from the provided snp annotation file, `phyMap`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# writing the genotype file to a .txt file so that we can separate it by chromosome using our geneotype parse script.\nrownames(geno) = rownames(phyMap)\nwrite.table(geno, file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/genotype.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n```\n:::\n\n\nThis python script separates the genotype file by chromosome.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#Splitting the genotype file by chromosome - run this from the rat_genomic_alaysis directory\npython scripts/split_genotype_by_chr.py data/genotype.txt data/geno_by_chr/'genotype'\n```\n:::\n\n\n# Covariate Files\n\nWe analyze sex, batch number, and batch center, as possible covariates, along with the 7 PEER factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading the phenotype file in to create covariate files. For this we are selecting sex, batch number, and batch center as covariates as well as the 7 PEER factors we generate\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Final_P50_traits/P50_raw_trait_values.RData\")\ncovariatesAc = raw_traits[match(rownames(gexAc_transpose), raw_traits$rfid), ]\ncovariatesAc = subset(covariatesAc, select = c(rfid, sex, batchnumber, center))\ncovariatesIl = raw_traits[match(rownames(gexIl_transpose), raw_traits$rfid), ]\ncovariatesIl = subset(covariatesIl, select = c(rfid, sex, batchnumber, center))\ncovariatesLh = raw_traits[match(rownames(gexLh_transpose), raw_traits$rfid), ]\ncovariatesLh = subset(covariatesLh, select = c(rfid, sex, batchnumber, center))\ncovariatesPl = raw_traits[match(rownames(gexPl_transpose), raw_traits$rfid), ]\ncovariatesPl = subset(covariatesPl, select = c(rfid, sex, batchnumber, center))\ncovariatesVo = raw_traits[match(rownames(gexVo_transpose), raw_traits$rfid), ]\ncovariatesVo = subset(covariatesVo, select = c(rfid, sex, batchnumber, center))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading the PEER factor output files to be appended to the covariate file and eventually regressed out of the expression files\npeer_factorsAc = read.csv(file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/peer_Ac/X.csv\", header = FALSE)\npeer_factorsIl = read.csv(file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/peer_Il/X.csv\", header = FALSE)\npeer_factorsLh = read.csv(file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/peer_Lh/X.csv\", header = FALSE)\npeer_factorsPl = read.csv(file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/peer_Pl/X.csv\", header = FALSE)\npeer_factorsVo = read.csv(file = \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/peer_Vo/X.csv\", header = FALSE)\n```\n:::\n\n\nFor each tissue's PEER factor output, set individual IDs as rownames and enumerate the PEER factors in the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manipulating the PEER factor files so we can append to covariate file\n\ncolnames(peer_factorsAc) = c('PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7')\nrownames(peer_factorsAc) = rownames(gexAc_transpose)\n\ncolnames(peer_factorsIl) = c('PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7')\nrownames(peer_factorsIl) = rownames(gexIl_transpose)\n\ncolnames(peer_factorsLh) = c('PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7')\nrownames(peer_factorsLh) = rownames(gexLh_transpose)\n\ncolnames(peer_factorsPl) = c('PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7')\nrownames(peer_factorsPl) = rownames(gexPl_transpose)\n\ncolnames(peer_factorsVo) = c('PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7')\nrownames(peer_factorsVo) = rownames(gexVo_transpose)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#initializing matrices to be filled with t-stats, p_vals, and residuals of the regression of each gene vs. the covariates for each tissue. t-stat and p-val matrices are just for diagnostics\n\n#t_statsAc = matrix(nrow = 13, ncol = length(colnames(gexAc_transpose)))\n#p_valsAc = matrix(nrow = 13, ncol = length(colnames(gexAc_transpose)))\nexpressionAc = gexAc_transpose\n\n#t_statsIl = matrix(nrow = 13, ncol = length(colnames(gexIl_transpose)))\n#p_valsIl = matrix(nrow = 13, ncol = length(colnames(gexIl_transpose)))\nexpressionIl = gexIl_transpose\n\n#t_statsLh = matrix(nrow = 13, ncol = length(colnames(gexLh_transpose)))\n#p_valsLh = matrix(nrow = 13, ncol = length(colnames(gexLh_transpose)))\nexpressionLh = gexLh_transpose\n\n#t_statsPl = matrix(nrow = 13, ncol = length(colnames(gexPl_transpose)))\n#p_valsPl = matrix(nrow = 13, ncol = length(colnames(gexPl_transpose)))\nexpressionPl = gexPl_transpose\n\n#t_statsVo = matrix(nrow = 13, ncol = length(colnames(gexVo_transpose)))\n#p_valsVo = matrix(nrow = 13, ncol = length(colnames(gexVo_transpose)))\nexpressionVo = gexVo_transpose\n```\n:::\n\n\nIn the following code, we regress out the covariates and save the residuals as the new expression for each tissue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:length(colnames(gexAc_transpose))) {\n    fit = lm(gexAc_transpose[,i] ~ covariatesAc$sex + covariatesAc$batchnumber + peer_factorsAc$PF1 + peer_factorsAc$PF2 + peer_factorsAc$PF3 + peer_factorsAc$PF4 + peer_factorsAc$PF5 + peer_factorsAc$PF6 + peer_factorsAc$PF7)\n    expressionAc[,i] <- fit$residuals\n    #t_statsAc[,i] <- tidy(fit)$statistic\n    #p_valsAc[,i] <- tidy(fit)$p.value\n}\n\nfor (i in 1:length(colnames(gexIl_transpose))) {\n    fit = lm(gexIl_transpose[,i] ~ covariatesIl$sex + covariatesIl$batchnumber + peer_factorsIl$PF1 + peer_factorsIl$PF2 + peer_factorsIl$PF3 + peer_factorsIl$PF4 + peer_factorsIl$PF5 + peer_factorsIl$PF6 + peer_factorsIl$PF7)\n    expressionIl[,i] <- fit$residuals\n    #t_statsAc[,i] <- tidy(fit)$statistic\n    #p_valsAc[,i] <- tidy(fit)$p.value\n}\n\nfor (i in 1:length(colnames(gexLh_transpose))) {\n    fit = lm(gexLh_transpose[,i] ~ covariatesLh$sex + covariatesLh$batchnumber + peer_factorsLh$PF1 + peer_factorsLh$PF2 + peer_factorsLh$PF3 + peer_factorsLh$PF4 + peer_factorsLh$PF5 + peer_factorsLh$PF6 + peer_factorsLh$PF7)\n    expressionLh[,i] <- fit$residuals\n    #t_statsAc[,i] <- tidy(fit)$statistic\n    #p_valsAc[,i] <- tidy(fit)$p.value\n}\n\nfor (i in 1:length(colnames(gexPl_transpose))) {\n    fit = lm(gexPl_transpose[,i] ~ covariatesPl$sex + covariatesPl$batchnumber + peer_factorsPl$PF1 + peer_factorsPl$PF2 + peer_factorsPl$PF3 + peer_factorsPl$PF4 + peer_factorsPl$PF5 + peer_factorsPl$PF6 + peer_factorsPl$PF7)\n    expressionPl[,i] <- fit$residuals\n    #t_statsAc[,i] <- tidy(fit)$statistic\n    #p_valsAc[,i] <- tidy(fit)$p.value\n}\n\nfor (i in 1:length(colnames(gexVo_transpose))) {\n    fit = lm(gexVo_transpose[,i] ~ covariatesVo$sex + covariatesVo$batchnumber + peer_factorsVo$PF1 + peer_factorsVo$PF2 + peer_factorsVo$PF3 + peer_factorsVo$PF4 + peer_factorsVo$PF5 + peer_factorsVo$PF6 + peer_factorsVo$PF7)\n    expressionVo[,i] <- fit$residuals\n    #t_statsAc[,i] <- tidy(fit)$statistic\n    #p_valsAc[,i] <- tidy(fit)$p.value\n  }\n```\n:::\n\n\nWrite the processed expression data to file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save expression as tsv\nAc_expr <- as.data.frame(expressionAc) %>% mutate(ID = rownames(expressionAc), .before = colnames(expressionAc))\n\nIl_expr <- as.data.frame(expressionIl) %>% mutate(ID = rownames(expressionIl), .before = colnames(expressionIl))\n\nLh_expr <- as.data.frame(expressionLh) %>% mutate(ID = rownames(expressionLh), .before = colnames(expressionLh))\n\nPl_expr <- as.data.frame(expressionPl) %>% mutate(ID = rownames(expressionPl), .before = colnames(expressionPl))\n\nVo_expr <- as.data.frame(expressionVo) %>% mutate(ID = rownames(expressionVo), .before = colnames(expressionVo))\n\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nexprlist <- list(Ac_expr, Il_expr, Lh_expr, Pl_expr, Vo_expr)\ntis <- c(\"Ac\", \"Il\", \"Lh\", \"Pl\", \"Vo\")\ni = 1\nfor(l in exprlist) {\nwrite_tsv(l, \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/\"\n%&% tis[i] %&% \"_expression_transformed.tsv\", col_names = TRUE)\n  i <- i+1\n}\n```\n:::\n\n\nSave the expression RDS objects to be used as arguments in the script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(as.matrix(expressionAc), \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/Ac_expression_transformed.RDS\")\n\nsaveRDS(as.matrix(expressionIl), \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/Il_expression_transformed.RDS\")\n\nsaveRDS(as.matrix(expressionLh), \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/Lh_expression_transformed.RDS\")\n\nsaveRDS(as.matrix(expressionPl), \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/Pl_expression_transformed.RDS\")\n\nsaveRDS(as.matrix(expressionVo), \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/Vo_expression_transformed.RDS\")\n```\n:::\n\n\nSave the gene and SNP annotation as RDS objects to be used as arguments in the script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nsnp_files <- list(snp_annot.chr1, snp_annot.chr2, snp_annot.chr3, snp_annot.chr4, snp_annot.chr5, snp_annot.chr6, snp_annot.chr7, snp_annot.chr8, snp_annot.chr9, snp_annot.chr10, snp_annot.chr11, snp_annot.chr12, snp_annot.chr13, snp_annot.chr14, snp_annot.chr15, snp_annot.chr16, snp_annot.chr17, snp_annot.chr18, snp_annot.chr19, snp_annot.chr20)\ni = 1\nfor(l in snp_files) {\n  saveRDS(l, \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/snp_annot/\" %&% \"snp_annot.chr\" %&% i %&% \".RDS\")\n  i <- i+1\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Saving the gene annotation RDS object to be used as an argument in the script\nsaveRDS(gene_annotation, \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/gene_annotation.RDS\")\n```\n:::\n\n\n# Metadata Files\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Creating the meta data file for each tissue \npython scripts/create_meta_data.py --geno \"data/genotype.txt\" --expr \"Ac_expression_transformed.tsv\" --alpha 1 --snpset \"1KG\" --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/Ac\"\n\npython scripts/create_meta_data.py --geno \"data/genotype.txt\" --expr \"Il_expression_transformed.tsv\" --alpha 1 --snpset \"1KG\" --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/Il\"\n\npython scripts/create_meta_data.py --geno \"data/genotype.txt\" --expr \"Lh_expression_transformed.tsv\" --alpha 1 --snpset \"1KG\" --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/Lh\"\n\npython scripts/create_meta_data.py --geno \"data/genotype.txt\" --expr \"Pl_expression_transformed.tsv\" --alpha 1 --snpset \"1KG\" --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/Pl\"\n\npython scripts/create_meta_data.py --geno \"data/genotype.txt\" --expr \"Vo_expression_transformed.tsv\" --alpha 1 --snpset \"1KG\" --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/Vo\"\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Running the model training script for each tissue/chromosome pair\ncd /Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline\nfor i in {1..20}\ndo\n  Rscript scripts/create_model.R 'Ac' $i 0.5 1000000\n  Rscript scripts/create_model.R 'Il' $i 0.5 1000000\n  Rscript scripts/create_model.R 'Lh' $i 0.5 1000000\n  Rscript scripts/create_model.R 'Pl' $i 0.5 1000000\n  Rscript scripts/create_model.R 'Vo' $i 0.5 1000000\ndone\n  \n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Concatenating all of the results files for each tissue\nbash scripts/make_all_results.sh 'Ac' 'Results/all_results_Ac' 0.5 '1KG_snps'\nbash scripts/make_all_betas.sh 'Ac' 'Results/all_betas_Ac' 0.5 '1KG_snps'\nbash scripts/make_all_logs.sh 'Ac' 'Results/all_logs_Ac'\nbash scripts/make_all_covariances.sh 'Ac' 'Results/all_covariances_Ac' 0.5 '1KG_snps'\n\nbash scripts/make_all_results.sh 'Il' 'Results/all_results_Il' 0.5 '1KG_snps'\nbash scripts/make_all_betas.sh 'Il' 'Results/all_betas_Il' 0.5 '1KG_snps'\nbash scripts/make_all_logs.sh 'Il' 'Results/all_logs_Il'\nbash scripts/make_all_covariances.sh 'Il' 'Results/all_covariances_Il' 0.5 '1KG_snps' \n\nbash scripts/make_all_results.sh 'Lh' 'Results/all_results_Lh' 0.5 '1KG_snps'\nbash scripts/make_all_betas.sh 'Lh' 'Results/all_betas_Lh' 0.5 '1KG_snps'\nbash scripts/make_all_logs.sh 'Lh' 'Results/all_logs_Lh'\nbash scripts/make_all_covariances.sh 'Lh' 'Results/all_covariances_Lh' 0.5 '1KG_snps'\n\nbash scripts/make_all_results.sh 'Pl' 'Results/all_results_Pl' 0.5 '1KG_snps'\nbash scripts/make_all_betas.sh 'Pl' 'Results/all_betas_Pl' 0.5 '1KG_snps'\nbash scripts/make_all_logs.sh 'Pl' 'Results/all_logs_Pl'\nbash scripts/make_all_covariances.sh 'Pl' 'Results/all_covariances_Pl' 0.5 '1KG_snps'\n\nbash scripts/make_all_results.sh 'Vo' 'Results/all_results_Vo' 0.5 '1KG_snps'\nbash scripts/make_all_betas.sh 'Vo' 'Results/all_betas_Vo' 0.5 '1KG_snps'\nbash scripts/make_all_logs.sh 'Vo' 'Results/all_logs_Vo'\nbash scripts/make_all_covariances.sh 'Vo' 'Results/all_covariances_Vo' 0.5 '1KG_snps'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Putting these into sql lite databases\npython scripts/make_sqlite_db.py --output \"Results/sql/Ac_output_db.db\" --results \"Results/all_results_Ac\" --construction \"Results/all_logs_Ac\" --betas \"Results/all_betas_Ac\" --meta \"Results/allMetaData/Ac.allMetaData.txt\"\n\npython scripts/make_sqlite_db.py --output \"Results/sql/Il_output_db.db\" --results \"Results/all_results_Il\" --construction \"Results/all_logs_Il\" --betas \"Results/all_betas_Il\" --meta \"Results/allMetaData/Il.allMetaData.txt\"\n\npython scripts/make_sqlite_db.py --output \"Results/sql/Lh_output_db.db\" --results \"Results/all_results_Lh\" --construction \"Results/all_logs_Lh\" --betas \"Results/all_betas_Lh\" --meta \"Results/allMetaData/Lh.allMetaData.txt\"\n\npython scripts/make_sqlite_db.py --output \"Results/sql/Pl_output_db.db\" --results \"Results/all_results_Pl\" --construction \"Results/all_logs_Pl\" --betas \"Results/all_betas_Pl\" --meta \"Results/allMetaData/Pl.allMetaData.txt\"\n\npython scripts/make_sqlite_db.py --output \"Results/sql/Vo_output_db.db\" --results \"Results/all_results_Vo\" --construction \"Results/all_logs_Vo\" --betas \"Results/all_betas_Vo\" --meta \"Results/allMetaData/Vo.allMetaData.txt\"\n```\n:::\n",
    "supporting": [
      "02.Prediction_Model_Pipeline_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}