{
  "hash": "42c52526796eb80d4f2cda7280ba50bb",
  "result": {
    "markdown": "---\ntitle: \"Human_PTRS_Comparison\"\nauthor: \"Natasha Santhanam\"\ndate: \"2/24/2022\"\noutput: html_document\n---\n\n---\ntitle: \"Human_PTRS_Performance_Comparison\"\nauthor: \"Natasha Santhanam\"\ndate: \"2/23/2022\"\noutput: html_document\n---\n\n\n# Generate Predicted Traits for Rats\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\nlibrary(glmnet)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndevtools::source_gist(\"ee5f67abddd0b761ee24410ea71c41aa\")\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\ndevtools::source_gist(\"1e9053c8f35c30396429350a08f33ea7\")\n```\n:::\n\n\nYanyu's PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits <- c(\"height\", \"bmi\")\n# folder with PrediXcan results\nresults.dir <- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/PrediXcan/metabolic_traits/\"\n# folder with PTRS weights, predicted traits will output here\ndata.dir <- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\"\n```\n:::\n\n\n## Data Wrangling\n\nThe `orth.rats` file contains gives a dictionary between human genes and the corresponding gene in rats. \n\n::: {.cell}\n\n```{.r .cell-code}\north.rats <- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n```\n:::\n\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with PTRS weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_expr <- read_tsv(results.dir %&% \"rat_metabolic_Ac_best__predict.txt\") %>% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr <- pred_expr %>% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] <- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %>% .[[\"ensembl_gene_id\"]]\n```\n:::\n\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_weights = function(trait)\n{\n  weights <- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id <- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) <- weights$gene_id\n  weights <- weights %>% rename(gene_name = gene_id)\n  return(weights)\n}\n```\n:::\n\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats. \n\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(trait in traits) {\n  weights <- fn_weights(trait)\n  pred_trait <- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, data.dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}\n```\n:::\n\n\n# Evaluating Rat PTRS Performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights <- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.height.tsv.gz\") %>% rename(gene_name = gene_id)\n```\n:::\n\n\n##  Human PTRS Results\n\nThe Personal Genome Project is a public resource of individual data from informed volunteers. PGP [genetic data](https://uchicago.box.com/s/7b9k6ilrx3fg6fq2l00tnej1edmk91r5) is publicly available, and we have processed trait information in an [sqlite database](https://uchicago.box.com/s/351lx8irgiouks3tnl8uoqh4bw8wpt6n). In Yanyu Liang's development of PTRS, she generated PTRS weights using elastic net.\nWe want to use PGP data to test Yanyu's PTRS weights and compare to observed height. We previously generated predicted expression in Summary_PTRS_PGS.Rmd\n\n## Calculate Predicted Height in PGP using Individual PTRS Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_expr <- read_tsv(data.dir %&% \"PTRS_weights/PGP/PGP_Whole_Blood__predict.txt\") %>% select(-c(FID))\n```\n:::\n\n\nWe repeat the same method from before for predicting traits, but this time predicting height and BMI for PGP individuals.\n\n::: {.cell}\n\n```{.r .cell-code}\npred_height_humans <- fn_generate_trait(pred_expr, weights)\n```\n:::\n\n\n## Compare Performance to Observed Height in Personal Genomes\n\nFirst, we load PGP phenotype data, stored in an sqlite database.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- \"~/Box/imlab-data/data-Github/web-data/2021-04-21-personal-genomes-project-data/repgp-data.sqlite3\"\nsqlite.driver <- dbDriver(\"SQLite\")\nconn <- dbConnect(RSQLite::SQLite(), db)\ndbListTables(conn)\n\nusers <- dbGetQuery(conn, 'select * from users')\ndbDisconnect(conn)\n\npheno <- users  %>% select(c(sample, height)) %>% na.omit()\nn_genes = as.matrix(apply(weights[,2:ncol(weights)], 2, function(x) sum(x != 0 )))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npheno <- pheno[na.omit(match(rownames(pred_height_humans), pheno$sample)),]\n\ntempo <- pred_height_humans[na.omit(match(pheno$sample, rownames(pred_height_humans))), ]\n\nheight_df <- data.frame(estimate = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  height_df[i,1] <- cor.test(pheno$height, tempo[,i])$estimate\n  height_df[i,2] <- cor.test(pheno$height, tempo[,i])$p.value\n  height_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  height_df[i,4] <- n_genes[i,1]\n  height_df[i,5] <- cor.test(pheno$height, tempo[,i])$conf.int[1]\n  height_df[i,6] <- cor.test(pheno$height, tempo[,i])$conf.int[2]\n}\n```\n:::\n\n\n\n# Plot Performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_df <- readRDS(data.dir %&% \"corr_height_indiv_PTRS.RDS\")\np1 = ggplot(height_df, aes(n_genes_in_model, estimate)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray\") + geom_point(color = \"purple\", position=\"jitter\") + geom_line(color = \"purple\")   + xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") + ggtitle(\"Performance of PTRS for Height in Personal Genomes\") + theme_bw()\np1\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}