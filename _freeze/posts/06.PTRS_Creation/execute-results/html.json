{
  "hash": "f2fd0d0818553a5c05e727a225d1e5b2",
  "result": {
    "markdown": "---\ntitle: \"06.PTRS_Creation\"\nauthor: \"Natasha Santhanam\"\ndate: \"2/7/2022\"\noutput: html_document\n---\n\n\n\n\nThe `orth.rats` file contains gives a dictionary between human genes and the corresponding gene in rats. \n\n::: {.cell}\n\n```{.r .cell-code}\ndata.dir <- \"/Users/sabrinami/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/data/\"\north.rats <- read_tsv(data.dir %&% \"expression/ortholog_genes_rats_humans.tsv\", col_names = TRUE)\n```\n:::\n\n\n# Individual PTRS creation\n\nYanyu's PTRS weights estimate the effect of genes on a given trait, in this case we pick height and BMI. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits <- c(\"height\", \"bmi\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase.dir <- \"~/Box/imlab-data/data-Github/Rat_Genomics_Paper_Pipeline/Results/\"\n```\n:::\n\nWe first replace rat genes in the predicted expression results with their corresponding human genes, so that it could be compatible with Yanyu's PTRS weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_expr <- read_tsv(base.dir %&% \"prediXcan/metabolic_traits/rat_metabolic_Ac_best__predict.txt\") %>% select(-c(FID))\n\n#filter only for genes that have a human ortholog\npred_expr <- pred_expr %>% select(c(IID, intersect(colnames(pred_expr), orth.rats$rnorvegicus_homolog_ensembl_gene) ))\n\n#change name to human ensembl id in humans\ncolnames(pred_expr)[2:ncol(pred_expr)] <- orth.rats[match(colnames(pred_expr)[2:ncol(pred_expr)], orth.rats$rnorvegicus_homolog_ensembl_gene), 1] %>% .[[\"ensembl_gene_id\"]]\n```\n:::\n\n\nThen we reformat the PTRS weight files, removing the Ensembl version from gene names.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_weights = function(trait)\n{\n  weights <- read_tsv(data.dir %&% \"PTRS_weights/weight_files/elastic_net_alpha_0.1_British.export_model/weights.\" %&% trait %&% \".tsv.gz\")\n  weights$gene_id <- sapply(strsplit(weights$gene_id, \"\\\\.\"), `[`, 1)\n  rownames(weights) <- weights$gene_id\n  weights <- weights %>% rename(gene_name = gene_id)\n  return(weights)\n}\n```\n:::\n\n\nWe converted the predicted expression for rat genes to corresponding human gene names, matching the PTRS gene names. This lets us combine PTRS weights, trained from human transcriptomic data, with predicted transciptome of the rats using the fn_generate_trait function below. The output is the predicted height for individual rats. \n\nIn some ways, we can interpret generate_trait as the opposite of PrediXcan. Both start from the predicted transcriptome of a group of individuals, PrediXcan works backwards from values of their observed trait to compute association between genes and the trait, whereas fn_generate_trait assumes those associations to predict the trait for each individual. PTRS is particularly insightful in this case, because of its portability across different population groups. We hope this extends across species, motivating our final goal of comparing the performance of PTRS in humans and rats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir <- \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n\nfor(trait in traits) {\n  weights <- fn_weights(trait)\n  pred_trait <- fn_generate_trait(pred_expr, weights)\n  saveRDS(pred_trait, dir %&% \"rat_pred_\" %&% trait %&% \"_w_Human_best_PTRS.RDS\")\n}\n```\n:::\n\n\nCompare all values across different models to actual BMI and Height\n\n::: {.cell}\n\n```{.r .cell-code}\npred_height <- readRDS(dir %&% \"rat_pred_height_w_Human_best_PTRS.RDS\") \npred_BMI <- readRDS(dir %&% \"rat_pred_bmi_w_Human_best_PTRS.RDS\")\n\nall_rats <- read_tsv(dir %&% \"all_names.txt\", col_names = TRUE)\n\npheno <- read_csv(dir %&% \"processed_obesity_rat_Palmer_phenotypes.csv\")\npheno <- pheno %>% filter(!(rat_rfid  %in% all_rats$ID))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nweights_bmi <- fread(\"/Users/natashasanthanam/Downloads/weights.bmi.annot.tsv\") \nweights_height <-  fread(\"/Users/natashasanthanam/Downloads/weights.height.annot.tsv\")  \n\nn_genes_bmi = as.matrix(apply(weights_bmi[,2:ncol(weights_bmi)], 2, function(x) sum(x != 0 )))\nn_genes_height = as.matrix(apply(weights_height[,2:ncol(weights_height)], 2, function(x) sum(x != 0 )))\n```\n:::\n\n\n\n#Create Dataframes with the correlation coefficient between trait in rats and ones predicted using PTRS from Humans\n\nBMI with predicted BMI\n\n::: {.cell}\n\n```{.r .cell-code}\nbmi_with_tail <- pheno %>% dplyr::select(c(rat_rfid, bmi_bodylength_w_tail)) %>% na.omit()\ntempo <- pred_BMI[na.omit(match(bmi_with_tail$rat_rfid, rownames(pred_BMI))), ]\n\nbmi_w_tail_df <- data.frame(R2 = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  fit = lm(bmi_with_tail$bmi_bodylength_w_tail ~ tempo[,i])\n  bmi_w_tail_df[i,1] <- summary(fit)$r.squared\n  bmi_w_tail_df[i,2] <- glance(fit)$p.value\n  bmi_w_tail_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  bmi_w_tail_df[i,4] <- n_genes_bmi[i,1]\n  bmi_w_tail_df[i,5] <- confint(fit)[1] \n  bmi_w_tail_df[i,6] <- confint(fit)[2]\n}\n\nbmi_w_tail_cor <- data.frame(cor = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  bmi_w_tail_cor[i,1] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$estimate\n  bmi_w_tail_cor[i,2] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$p.value\n  bmi_w_tail_cor[i,3] <- paste(\"model\", i, sep = \"_\")\n  bmi_w_tail_cor[i,4] <- n_genes_bmi[i,1]\n  bmi_w_tail_cor[i,5] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$conf.int[1]\n  bmi_w_tail_cor[i,6] <- cor.test(bmi_with_tail$bmi_bodylength_w_tail, tempo[,i])$conf.int[2]\n}\n\ntotal_bmi_df <- inner_join(bmi_w_tail_cor, bmi_w_tail_df, by = \"model\")\ntotal_bmi_df <- total_bmi_df %>% select(c(model, n_genes_in_model.x, cor, R2, pvalue.x, conf.int.min.x, conf.int.max.x ))\n```\n:::\n\n\nBodylength with Predicted Height\n\n::: {.cell}\n\n```{.r .cell-code}\n#Bodylength wit Tail vs predicted Height from Human PTRS weights\nbodylength_w_tail <- pheno %>% dplyr::select(c(rat_rfid, bodylength_w_tail)) %>% na.omit()\ntempo <- pred_height[na.omit(match(bodylength_w_tail$rat_rfid, rownames(pred_height))), ]\n\nbodylength_w_tail_df <- data.frame(R2 = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  fit = lm(bodylength_w_tail$bodylength_w_tail ~ tempo[,i])\n  bodylength_w_tail_df[i,1] <- summary(fit)$r.squared\n  bodylength_w_tail_df[i,2] <- glance(fit)$p.value\n  bodylength_w_tail_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  bodylength_w_tail_df[i,4]<- n_genes_height[i,1]\n  bodylength_w_tail_df[i,5] <- confint(fit)[1] \n  bodylength_w_tail_df[i,6] <- confint(fit)[2] \n}\n\nbodylength_w_tail_cor <- data.frame(cor = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\nfor(i in 1:ncol(tempo)){\n  bodylength_w_tail_cor[i,1] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$estimate\n  bodylength_w_tail_cor[i,2] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$p.value\n  bodylength_w_tail_cor[i,3] <- paste(\"model\", i, sep = \"_\")\n  bodylength_w_tail_cor[i,4]<- n_genes_height[i,1]\n  bodylength_w_tail_cor[i,5] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$conf.int[1]\n  bodylength_w_tail_cor[i,6] <- cor.test(bodylength_w_tail$bodylength_w_tail, tempo[,i])$conf.int[2]\n}\n\nbodylength_w_tail_cor <- bodylength_w_tail_cor %>% filter(n_genes_in_model != 0)\n\ntotal_height_df <- inner_join(bodylength_w_tail_cor, bodylength_w_tail_df, by = \"model\")\ntotal_height_df <- total_height_df %>% select(c(model, n_genes_in_model.x, cor, R2, pvalue.x, conf.int.min.x, conf.int.max.x ))\n```\n:::\n\n\n# Plot Results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bodylength_w_tail_cor, aes(n_genes_in_model, cor)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + ylim(c(0,0.1)) + geom_point(position=\"jitter\") +geom_line() + xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n\n\nggplot(bmi_w_tail_cor, aes(n_genes_in_model, cor)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + ylim(c(0 ,0.1)) + geom_point(position=\"jitter\") +geom_line() +  xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n```\n:::\n\n\nViolin plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nptrs_hum <- read_excel(\"/Users/natashasanthanam/Downloads/13059_2021_2591_MOESM5_ESM.xlsx\")\nptrs_hum <- ptrs_hum[7:nrow(ptrs_hum),]\ncolnames(ptrs_hum) = c(\"trait\", \"population\", \"PTRS_MESA_EUR\", \"PTRS_MESA_AFR\", \"PTRS_MESA_ALL\")\n\nptrs_hum_height <- ptrs_hum %>% filter(trait == \"height\")\nptrs_hum_height <- ptrs_hum_height %>% pivot_longer(c(\"PTRS_MESA_EUR\", \"PTRS_MESA_AFR\", \"PTRS_MESA_ALL\"), names_to = \"PTRS\") %>% select(-c(trait))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(bodylength_w_tail_cor, aes(x=n_genes_in_model, y=cor)) + \n  geom_violin()\n\nggplot(bmi_w_tail_cor, aes(x=n_genes_in_model, y=cor)) + \n  geom_violin()\n```\n:::\n\n\n\n# Create and Plot Negative Control\n\n::: {.cell}\n\n```{.r .cell-code}\nfasting_glucose <- pheno %>% dplyr::select(c(rat_rfid, fasting_glucose)) %>% na.omit()\ntempo <- pred_height[na.omit(match(fasting_glucose$rat_rfid, rownames(pred_height))), ]\n\nneg_control_df <- data.frame(estimate = numeric(), pvalue = numeric(), model = character(), n_genes_in_model = numeric(), conf.int.min = numeric(), conf.int.max = numeric())\n\nfor(i in 1:ncol(tempo)){\n  neg_control_df[i,1] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$estimate\n  neg_control_df[i,2] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$p.value\n  neg_control_df[i,3] <- paste(\"model\", i, sep = \"_\")\n  neg_control_df[i,4]<- n_genes_height[i,1]\n  neg_control_df[i,5] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$conf.int[1]\n  neg_control_df[i,6] <- cor.test(fasting_glucose$fasting_glucose, tempo[,i])$conf.int[2]\n}\n\nggplot(neg_control_df, aes(n_genes_in_model, estimate)) + geom_errorbar(aes(ymin = conf.int.min, ymax = conf.int.max ), width=0.2,  color=\"gray48\") + geom_point(position=\"jitter\") +geom_line() +  xlab(\"Number of genes in each model\") + ylab(\"Correlation Coefficient (r)\") \n```\n:::\n\n\n# Test PTRS top genes for Enrichment\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_ptrs_genes <- weights_height %>% select(c(gene_name, model_5)) %>% filter(model_5 != 0) %>% select(c(gene_name))\ntop_ptrs_genes$gene_name = sapply(strsplit(top_ptrs_genes$gene_name , \"\\\\.\"), `[`, 1)\n\ntop_ptrs_genes <- top_ptrs_genes %>% mutate(rat_gene = orth.rats[match(top_ptrs_genes$gene_name, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n\nfull_df <- read_tsv(\"/Users/natashasanthanam/Github/rat-genomic-analysis/data/rat_metabolic_traits_best_Ac_full_assocs.txt\", col_names = TRUE)\npheno_Multi_rat <- read_tsv(\"/Users/natashasanthanam/Downloads/rat_metabolic_MultiXcan_pval_assoc.txt\", col_names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqqunif(full_df$pvalue, col= \"dodgerblue4\" )\nqqpoints(full_df %>% filter(gene %in% top_ptrs_genes$rat_gene) %>% .[[\"pvalue\"]],pch='+', col = \"dodgerblue\") \n\nqqunif(pheno_Multi_rat$pvalue.bodylength_w_tail, col= \"dodgerblue4\" )\nqqpoints(pheno_Multi_rat %>% filter(gene %in% top_ptrs_genes$rat_gene) %>% .[[\"pvalue.bodylength_w_tail\"]],pch='+', col = \"dodgerblue\") \n\n\nall_ptrs_genes <- weights_height %>%  filter(!(gene_name %in% top_ptrs_genes$gene_name)) %>% select(c(gene_name))\nall_ptrs_genes <-  all_ptrs_genes %>% mutate(rat_gene = orth.rats[match(all_ptrs_genes$gene_name, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n\nqqunif(full_df %>% filter(gene %in% all_ptrs_genes$rat_gene) %>% .[[\"pvalue\"]])\nqqpoints(full_df %>% filter(gene %in% top_ptrs_genes$rat_gene) %>% .[[\"pvalue\"]],pch='+', col = \"dodgerblue\") \n\n\nfull_df <- full_df %>% mutate(human_gene = orth.rats[match(full_df$gene, orth.rats$rnorvegicus_homolog_ensembl_gene), 1]$ensembl_gene_id)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}