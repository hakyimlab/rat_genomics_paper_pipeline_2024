{
  "hash": "cd1674d86c7fa796f646bf0b1e02bf6f",
  "result": {
    "markdown": "---\ntitle: \"rat_compare_genotypes\"\nauthor: \"Natasha Santhanam\"\ndate: \"2/14/2022\"\noutput: html_document\n---\n\n---\ntitle: \"rat_compare_genotypes\"\nauthor: \"Natasha Santhanam\"\ndate: \"10/25/2021\"\noutput: html_document\n---\n\n\n\n\n## Compare the overlap of Rats between the original 80 and new ones sent by Apurva\n\n\n# Convert bimbam to plink format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilelist <- list.files(geno.dir, pattern = \"3473.txt\")\nsamples <- read_tsv(geno.dir %&% \"samples_Rat_metab_phenos_file\", col_names = FALSE) %>% rename(FID = X1, IID = X2)\n\nfor(fila in filelist) {\n  tempo <- fread(geno.dir %&% fila)\n  \n  MAP <- tempo %>% mutate(CM = 0) %>% select(c(V1, V2, CM, V3))\n  write_tsv(MAP, geno.dir %&% \"plink_format/\" %&% substr(fila, 1, str_length(fila) - 4) %&% \".map\", col_names = FALSE)\n  \n  PED6 <- data.frame(\n  FID = samples$FID,\n  IID = samples$IID,\n  FatherID = 0,\n  MotherID = 0,\n  Sex = 1,\n  Phenotype = 1)\n  \n# convert 0,1,2 to genotypes, a bit tricky\n# make helper dataframe for matching alleles\nmyAlleles <- data.frame(\n  AA = paste(tempo$V4,tempo$V4),\n  AB = paste(tempo$V4, tempo$V5),\n  BB = paste(tempo$V5,tempo$V5) )\n\ntempo <- as.matrix(tempo[,7:ncol(tempo)])\nPEDsnps <- round(as.matrix(tempo[,]) + 1)\n\nPEDsnpsAB <- \n  sapply(seq(nrow(tempo)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\n\nPED <- cbind(PED6, PEDsnpsAB)\nwrite_tsv(PED, geno.dir %&% \"plink_format/\" %&% substr(fila, 1, str_length(fila) - 4) %&% \".ped\", col_names = FALSE)\n}\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# have to convert to bim/bam/bed\nfor i in {1..20}\ndo\nplink --file chr$i.round2_impute2_3473 --make-bed --out chr$i.round2_impute2_3473\ndone\n\n# create a list of chrs to merge \nfor i in {1..20}\ndo\necho chr$i.round2_impute2_3473 >> mergelist.txt\ndone\n\n#merge all chromosomes\nplink --merge-list mergelist.txt --make-bed --out rat_metabolic_impute\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbim <- read_tsv(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/genotype_files/rat_genotype_Ac.bim\", col_names = FALSE)\nbim$X2 <- paste(paste(\"chr\", bim$X1, sep= \"\"), bim$X4, sep = \":\")\n```\n:::\n\n\n\n\n# Merge the both rat genotype data sets\n\n# Prior to merging,  want to make sure that the files are mergeable, for this we conduct 3 steps:\n# 1) Make sure the reference genome is similar in the HapMap and the 1000 Genomes Project datasets.\n# 2) Resolve strand issues.\n# 3) Remove the SNPs which after the previous two steps still differ between datasets.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print$2,$5}' rat_metabolic_impute.bim > rat_metabolic_impute_ref-list.txt\n\nplink --bfile rat_geno_merge_Ac --reference-allele rat_metabolic_impute_ref-list.txt --make-bed --out rat_genotype_Ac-adj\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Check for potential strand issues.\nawk '{print$2,$5,$6}' rat_metabolic_impute.bim > rat_metabolic_impute_tmp\nawk '{print$2,$5,$6}' rat_genotype_Ac-adj.bim > rat_genotype_Ac-adj_tmp\nsort rat_metabolic_impute_tmp rat_genotype_Ac-adj_tmp |uniq -u > all_differences.txt\n# 164380 differences between the files, some of these might be due to strand issues.\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Print SNP-identifier and remove duplicates.\nawk '{print$1}' all_differences.txt | sort -u > flip_list.txt\n# Generates a file of 164380 SNPs. These are the non-corresponding SNPs between the two files. \n# Flip the 164380 non-corresponding SNPs. \n\nplink --bfile rat_genotype_Ac-adj --flip flip_list.txt --reference-allele rat_metabolic_impute_ref-list.txt --make-bed --out corrected_rat_geno_Ac\n\n# Check for SNPs which are still problematic after they have been flipped.\nawk '{print$2,$5,$6}' corrected_rat_geno_Ac.bim > corrected_rat_Ac_tmp\nsort rat_metabolic_impute_tmp corrected_rat_Ac_tmp |uniq -u  > uncorresponding_SNPs.txt\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print$1}' uncorresponding_SNPs.txt | sort -u > SNPs_for_exlusion.txt\n# The command above generates a list of the 245556 SNPs\n\n# Remove problematic SNPs from both datasets.\nplink --bfile corrected_rat_geno_Ac --exclude SNPs_for_exlusion.txt --make-bed --out rat_geno_Ac_MDS2\n\nplink --bfile rat_metabolic_impute --exclude SNPs_for_exlusion.txt --make-bed --out rat_metabolic_corr\n\n# Merge original rat file with rat metabolic phenotype Data.\nplink --bfile rat_geno_Ac_MDS2 --bmerge rat_metabolic_corr.bed rat_metabolic_corr.bim rat_metabolic_corr.fam --allow-no-sex --make-bed --out all_rats_merged\n```\n:::\n\n\n# Generate GRM\n\n::: {.cell}\n\n```{.bash .cell-code}\ngcta --bfile all_rats_merged --make-grm-bin --out all_rats_grm\n```\n:::\n\n\n# Examine GRM for relatedness between overlap individuals\n\n::: {.cell}\n\n```{.r .cell-code}\n#from https://gist.github.com/explodecomputer/7150052\nreadGRM <- function(rootname)\n{\n\tbin.file.name <- paste(rootname, \".grm.bin\", sep=\"\")\n\tn.file.name <- paste(rootname, \".grm.N.bin\", sep=\"\")\n\tid.file.name <- paste(rootname, \".grm.id\", sep=\"\")\n\n\tcat(\"Reading IDs\\n\")\n\tid <- read.table(id.file.name, colClasses=\"character\")\n\tn <- dim(id)[1]\n\tcat(\"Reading GRM\\n\")\n\tbin.file <- file(bin.file.name, \"rb\")\n\tgrm <- readBin(bin.file, n=n*(n+1)/2, what=numeric(0), size=4)\n\tclose(bin.file)\n\tcat(\"Reading N\\n\")\n\tn.file <- file(n.file.name, \"rb\")\n\tN <- readBin(n.file, n=n*(n+1)/2, what=numeric(0), size=4)\n\tclose(n.file)\n\n\tcat(\"Creating data frame\\n\")\n\tl <- list()\n\tfor(i in 1:n)\n\t{\n\t\tl[[i]] <- 1:i\n\t}\n\tcol1 <- rep(1:n, 1:n)\n\tcol2 <- unlist(l)\n\tgrm <- data.frame(id1=col1, id2=col2, N=N, grm=grm)\t\n\n\tret <- list()\n\tret$grm <- grm\n\tret$id <- id\n\treturn(ret)\n}\n\nall_rats_GRM <- readGRM(geno.dir %&% \"plink_format/all_rats_grm\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noverlap <- read_tsv(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/MultiXcan/overlap_rat_original_metabolic.txt\", col_names = FALSE)\nids <- all_rats_GRM$id %>% mutate(num = rownames(ids)) %>% filter(V1 %in% overlap$X1)\n\ngrms <- all_rats_GRM$grm %>% filter(id1 %in% ids$num) %>%  filter(id1 == id2 )\nsummary(grms$grm)\n```\n:::\n\nMin. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.6856  0.7511  0.7851  0.7833  0.8211  0.8801 \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}