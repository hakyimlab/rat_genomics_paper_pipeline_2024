{
  "hash": "8b43ce5dbabeeb74f9ca55969af754a8",
  "result": {
    "markdown": "---\ntitle: \"convert_genotypes_old\"\nauthor: \"\"\ndate: \"2022-02-21\"\noutput: workflowr::wflow_html\neditor_options:\n  chunk_output_type: console\n---\n\n\n**Note:** This is old script to convert Palmer lab genotype data in an .Rdata object to plink format. For our analysis, we used a different process to reformat, documented [here](analysis/generate_plink_format_genotypes.Rmd)\n\nData from [here](https://uchicago.app.box.com/folder/102043737114) - genoGex.Rdata has everything we need in it\nThere are 5 'gex' RDS files which are the gene expressions for the 5 different tissues, the 'gtf' is the gene annotation, 'phyMap' is the snp annotation, and 'geno' is the genotype matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(RSQLite)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndate = Sys.Date()\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/output/\"\n```\n:::\n\n\nWe loaded several data tables into memory. `geno` contains genotype data, with columns of rat IDs and each row containing dosage for a single snp. These snps are listed in `phyMap`, with their chromosome, position, reference, and alternative alleles. In this next step, we subset genotype data to the rats with gene expression data for each tissue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We take all except the first column of geno, which is NA (because geno is a matrix). The the result is a list of all individual ids\ngeno_Ac = geno[,match(colnames(gexAc), colnames(geno))[-1]]\ngeno_Il = geno[,match(colnames(gexIl), colnames(geno))[-1]]\ngeno_Lh = geno[,match(colnames(gexLh), colnames(geno))[-1]]\ngeno_Pl = geno[,match(colnames(gexPl), colnames(geno))[-1]]\ngeno_Vo = geno[,match(colnames(gexVo), colnames(geno))[-1]]\n```\n:::\n\n\nAdding information from the snp annotation file `phyMap`, we generate a genotype file for each tissue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAc_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Ac), phyMap$refAllele, phyMap$effectAllele, geno_Ac)\nIl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Il),phyMap$refAllele, phyMap$effectAllele,  geno_Il)\nLh_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Lh),phyMap$refAllele, phyMap$effectAllele,  geno_Lh)\nPl_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Pl),phyMap$refAllele, phyMap$effectAllele,  geno_Pl)\nVo_bimbam <- cbind(phyMap$chr, phyMap$pos, rownames(geno_Vo),phyMap$refAllele, phyMap$effectAllele,  geno_Vo)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(Ac_bimbam, file = wd %&% \"Ac_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Il_bimbam, file = wd %&% \"Il_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Lh_bimbam, file = wd %&% \"Lh_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Pl_bimbam, file = wd %&%\"Pl_bimbam\",quote=F,col.names=F,row.names=F)\nwrite.table(Vo_bimbam, file = wd %&%\"Vo_bimbam\",quote=F,col.names=F,row.names=F)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}