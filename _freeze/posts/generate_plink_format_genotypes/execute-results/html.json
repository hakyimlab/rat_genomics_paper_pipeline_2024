{
  "hash": "4579f7b7596e4ce2d9210675533d63e0",
  "result": {
    "markdown": "---\ntitle: \"Generate_plink_format_genotypes\"\nauthor: \"Natasha Santhanam\"\ndate: \"2/14/2022\"\noutput: html_document\n---\n\n\n## Definitions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(workflowr)\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(readxl)\n\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\nwd =  \"/Users/sabrinami/Github/Rat_Genomics_Paper_Pipeline/data/\"\n```\n:::\n\n\n## Generating Raw Genotype files from Tyson's original analysis\n\nData from [here](https://uchicago.app.box.com/folder/102043737114) - genoGex.Rdata has everything we need in it\nThere are 5 'gex' RDS files which are the gene expressions for the 5 different tissues, the 'gtf' is the gene annotation, 'phyMap' is the snp annotation, and 'geno' is the genotype matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"~/Box/imlab-data/Projects/PTRS-PGRS-Rosetta/Data-From-Abe-Palmer-Lab/Rdata/genoGex.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn = gexAc$EnsemblGeneID\ngexAc_transpose <- as.data.frame(t(gexAc[,-1]))\ncolnames(gexAc_transpose) <- n\n\nn = gexIl$EnsemblGeneID\ngexIl_transpose <- as.data.frame(t(gexIl[,-1]))\ncolnames(gexIl_transpose) <- n\n\nn = gexLh$EnsemblGeneID\ngexLh_transpose <- as.data.frame(t(gexLh[,-1]))\ncolnames(gexLh_transpose) <- n\n\nn = gexPl$EnsemblGeneID\ngexPl_transpose <- as.data.frame(t(gexPl[,-1]))\ncolnames(gexPl_transpose) <- n\n\nn = gexVo$EnsemblGeneID\ngexVo_transpose <- as.data.frame(t(gexVo[,-1]))\ncolnames(gexVo_transpose) <- n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninvnorm = function(x) {\n  if(is.null(dim(x))) res = invnorm.vector(x) else\n  res=apply(x,2,invnorm.vector)\n  res\n}\ninvnorm.vector = function(x) {yy = rank(x)/(length(x)+1); qnorm(yy)}\n\n\ngexAc_transpose = invnorm(gexAc_transpose)\n\ngexIl_transpose = invnorm(gexIl_transpose)\n\ngexLh_transpose = invnorm(gexLh_transpose)\n\ngexPl_transpose = invnorm(gexPl_transpose)\n\ngexVo_transpose = invnorm(gexVo_transpose)\n```\n:::\n\n\nWe first transposed each gene expression file as a matrix with individuals as the columns and genes for the rows. Now we add gene annotations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngtf$gene_type = sub(\".*?gene_biotype(.*?);.*\", \"\\\\1\", gtf$Attr)\ngtf$gene_name = sub(\".*?gene_name(.*?);.*\", \"\\\\1\", gtf$Attr)\n\ngene_annotation = subset(gtf, select = -c(Source, Feature, Score, Strand, Attr, Frame) )\ngene_annotation = gene_annotation[, c(\"Chr\",\"Gene\", \"gene_name\", \"Start\", \"End\", \"gene_type\" )]\ncolnames(gene_annotation) = c(\"chr\", \"gene_id\", \"gene_name\", \"start\", \"end\")\nrownames(gene_annotation) = gene_annotation$gene_id\n\nphyMap <- within(phyMap,  varID <- paste(Chr, Pos, Ref, Alt, sep=\"_\"))\nrownames(phyMap) = phyMap$varID\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", 'varID', \"rsid\")\n```\n:::\n\n\nNext, we subset genotype files to the rats with gene expression data from respective tissues.\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(geno) = rownames(phyMap)\n#write.table(geno, file = \"./data/genotype.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngeno_Ac = geno[,match(rownames(gexAc_transpose), colnames(geno))]\ngeno_Il = geno[,match(rownames(gexIl_transpose), colnames(geno))]\ngeno_Lh = geno[,match(rownames(gexLh_transpose), colnames(geno))]\ngeno_Pl = geno[,match(rownames(gexPl_transpose), colnames(geno))]\ngeno_Vo = geno[,match(rownames(gexVo_transpose), colnames(geno))]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(geno_Ac, file = wd %&% \"genotype_Ac.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Il, file = wd %&% \"genotype_Il.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Lh, file = wd %&% \"genotype_Lh.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Pl, file = wd %&% \"genotype_Pl.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\nwrite.table(geno_Vo, file = wd %&% \"genotype_Vo.txt\", sep = \"\\t\", col.names = TRUE, row.names = TRUE)\n```\n:::\n\n\n## Generating MAP/PED files for plink\n\nMAP\n\n::: {.cell}\n\n```{.r .cell-code}\nnIndividuals_Ac <- ncol(geno_Ac)\nnSNPs_Ac <- nrow(geno_Ac)\n\nMAP <- phyMap %>% rename( SNP = rsid, CHR = chr, BP = pos) %>% mutate(CM = 0) %>% select(c(CHR, SNP, CM, BP))\nwrite_tsv(MAP, wd %&% \"rat_genotype.map\", col_names = FALSE)\n```\n:::\n\n\n\nPED\n\n::: {.cell}\n\n```{.r .cell-code}\nPED6 <- data.frame(\n  FID = colnames(geno_Ac),\n  IID = colnames(geno_Ac),\n  FatherID = 0,\n  MotherID = 0,\n  Sex = 1,\n  Phenotype = 1)\n\n# convert 0,1,2 to genotypes, a bit tricky\n# make helper dataframe for matching alleles\nmyAlleles <- data.frame(\n  AA = paste(phyMap$refAllele,phyMap$refAllele),\n  AB = paste(phyMap$refAllele, phyMap$effectAllele),\n  BB = paste(phyMap$effectAllele,phyMap$effectAllele) )\n   \nPEDsnps <- geno_Ac[,] + 1\n\nPEDsnpsAB <- \n  sapply(seq(nSNPs_Ac), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\n\nPED <- cbind(PED6, PEDsnpsAB)\n\nwrite_tsv(PED, wd %&% \"rat_genotype.ped\",col_names = FALSE)\n```\n:::\n\n\nRepeat for other tissues ~ only need to change the rows\n\n::: {.cell}\n\n```{.r .cell-code}\nPED_Il <- data.frame(FID = colnames(geno_Il), IID = colnames(geno_Il), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Lh <- data.frame(FID = colnames(geno_Lh), IID = colnames(geno_Lh), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Pl <- data.frame(FID = colnames(geno_Pl), IID = colnames(geno_Pl), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\nPED_Vo <- data.frame(FID = colnames(geno_Vo), IID = colnames(geno_Vo), FatherID = 0, MotherID = 0, Sex = 1, Phenotype = 1)\n\nPEDsnps <- geno_Il[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Il)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Il, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Il.ped\",col_names = FALSE)\n\nPEDsnps <- geno_Lh[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Lh)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Lh, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Lh.ped\",col_names = FALSE)\n\nPEDsnps <- geno_Pl[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Pl)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Pl, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Pl.ped\",col_names = FALSE)\n\nPEDsnps <- geno_Vo[,] + 1\nPEDsnpsAB <- \n  sapply(seq(nrow(geno_Vo)), function(snp)\n    sapply(PEDsnps[snp, ], function(ind) myAlleles[snp, ind]))\nPED <- cbind(PED_Vo, PEDsnpsAB)\nwrite_tsv(PED, wd %&% \"rat_genotype_Vo.ped\",col_names = FALSE)\n```\n:::\n\n\n\nGenerating Phenotype file ~ We're using gene expression levels\n\n::: {.cell}\n\n```{.r .cell-code}\npheno_Ac <- as.data.frame(cbind(FID = rownames(gexAc_transpose), IID = rownames(gexAc_transpose), gexAc_transpose))\npheno_Il <- as.data.frame(cbind(FID = rownames(gexIl_transpose), IID = rownames(gexIl_transpose), gexIl_transpose))\npheno_Lh <- as.data.frame(cbind(FID = rownames(gexLh_transpose), IID = rownames(gexLh_transpose), gexLh_transpose))\npheno_Pl <- as.data.frame(cbind(FID = rownames(gexPl_transpose), IID = rownames(gexPl_transpose), gexPl_transpose))\npheno_Vo <- as.data.frame(cbind(FID = rownames(gexVo_transpose), IID = rownames(gexVo_transpose), gexVo_transpose))\n\n\nwrite_tsv(pheno_Ac, wd %&% \"phenotype_files/rat_pheno_Ac.txt\", col_names = FALSE)\nwrite_tsv(pheno_Il, wd %&% \"phenotype_files/rat_pheno_Il.txt\", col_names = FALSE)\nwrite_tsv(pheno_Lh, wd %&% \"phenotype_files/rat_pheno_Lh.txt\", col_names = FALSE)\nwrite_tsv(pheno_Pl, wd %&% \"phenotype_files/rat_pheno_Pl.txt\", col_names = FALSE)\nwrite_tsv(pheno_Vo, wd %&% \"phenotype_files/rat_pheno_Vo.txt\", col_names = FALSE)\n```\n:::\n\n\n\n## Convert MAP/PED files to plink \n\nAll conversion to plink format use the same MAP file, but because of plink conventions, the MAP file must match the name of the PED file, so we rename the map file each time we convert genotypes for a different tissue.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /gpfs/data/im-lab/nas40t2/sabrina/Rat_Genomics_Paper_Pipeline/data\n\nplink --file rat_genotype --make-bed --out plink_files/rat_genome_Ac\n\nmv rat_genotype.map rat_genotype_Il.map\nplink --file rat_genotype_Il --make-bed --out plink_files/rat_genome_Il\n\nmv rat_genotype_Il.map rat_genotype_Lh.map\nplink --file rat_genotype_Lh --make-bed --out plink_files/rat_genome_Lh\n\nmv rat_genotype_Lh.map rat_genotype_Pl.map\nplink --file rat_genotype_Pl --make-bed --out plink_files/rat_genome_Pl\n\nmv rat_genotype_Pl.map rat_genotype_Vo.map\nplink --file rat_genotype_Vo --make-bed --out plink_files/rat_genome_Vo\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}