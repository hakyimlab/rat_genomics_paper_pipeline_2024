{
  "hash": "9a5e0c19114c7cb30be7ff7cf2e787e5",
  "result": {
    "markdown": "---\ntitle: \"GTEx_comparison_rat_n_genes\"\nauthor: \"Natasha Santhanam\"\ndate: \"2/14/2022\"\noutput: html_document\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(devtools)\nlibrary(broom)\nlibrary(data.table)\nlibrary(RSQLite)\n\"%&%\" = function(a,b) paste(a,b,sep=\"\")\ndir <- \"/gpfs/data/im-lab/nas40t2/Data/GTEx/V8/GTEx_Analysis_v8_eQTL_expression_matrices/\"\ngeno.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/\"\n```\n:::\n\n\n## Compare number of genes predicted between Rat and GTEx prediction models \n\n# Generate GTEx prediction models using the same pipeline as in Rats\n\nGather Genotype, Gene epression data, snp annotation file and gtf (made with ensembl notation)\n\nFirst convert genotypes to single coded format to be read by pipeline\n\n::: {.cell}\n\n```{.bash .cell-code}\nplink --bfile /gpfs/data/im-lab/nas40t2/Data/GTEx/V8/genotype/plink_files/GTEx_maf_0.01 --geno 0.02 --mind 0.02 --maf 0.05 --make-bed --out GTEx_comp\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nplink --bfile GTEx_comp --recode A-transpose --out GTEx_single_code\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngeno <- fread(geno.dir %&% \"genos/GTEx_single_code.traw\")\ngex <- read_tsv(dir %&% TISSUE %&% \".v8.normalized_expression.bed.gz\") %>% select(-c(`#chr`, start, end))\n```\n:::\n\n\nGenotype has to have SNP in first column \n\n::: {.cell}\n\n```{.r .cell-code}\ngeno <- geno %>% select(c(SNP, CHR, colnames(geno)[4:ncol(geno)]))\n```\n:::\n\n\n\ntransposing gene expression files and inverse normalize\n\n::: {.cell}\n\n```{.r .cell-code}\ngex <- gex %>% pivot_longer(!gene_id, names_to = \"IID\", values_to = \"count\") %>% pivot_wider(names_from = gene_id, values_from = count)\n\ninvnorm = function(x) {\n  if(is.null(dim(x))) res = invnorm.vector(x) else\n  res=apply(x,2,invnorm.vector)\n  res\n}\ninvnorm.vector = function(x) {yy = rank(x)/(length(x)+1); qnorm(yy)}\ngex_transpose <- gex %>% select(-c(IID))\n\ngex_transpose = invnorm(gex_transpose)\nrownames(gex_transpose) = gex$IID\n\nwrite.table(gex_transpose, file = '/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/expression/gexWB.csv', sep = \",\", col.names = TRUE, row.names = FALSE)\n```\n:::\n\n\n\n\nFormat gene annotation\n\n::: {.cell}\n\n```{.r .cell-code}\ngtf <- fread(\"/gpfs/data/im-lab/nas40t2/natasha/GTEX_Analysis/annotations_gencode_v26.tsv\")\n\ngene_annotation <- gtf %>% select(c(chromosome, gene_id, gene_name, start, end))\nrownames(gene_annotation) = gtf$gene_id\n```\n:::\n\n\nFormat snp annotation\n\n::: {.cell}\n\n```{.r .cell-code}\nphyMap <- read_tsv(geno.dir %&% \"genos/GTEx_comp.bim\", col_names = FALSE)  %>% mutate(varID = X2) %>% select(c(X2, X1, X4, X5, X6, varID))\n\nphyMap$rsid = phyMap$varID\ncolnames(phyMap) = c(\"snp\", \"chr\", \"pos\", \"refAllele\", \"effectAllele\", \"varID\", \"rsid\")  \n\nrownames(phyMap) = phyMap$varID\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Splitting the snp annotation file by chromosome\ns <- setNames(split(phyMap, phyMap$chr), paste0(\"snp_annot.chr\", unique(phyMap$chr)))\nlist2env(s, globalenv())\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n#Splitting the genotype file by chromosome - run this from the rat_genomic_alaysis directory\npython /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/rat-genomic-analysis/scripts/split_genotype_by_chr.py GTEx_genotype.txt  /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/genos/geno_by_chr/'genotype'\n\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Now we are performing PEER factor analysis on each tissue choosing 7 factors\npeertool -f expression/\"gexWB.csv\" -n 7 -o peer_GTEx --has_header\n```\n:::\n\n\n\nRead in Peer Factors\n\n::: {.cell}\n\n```{.r .cell-code}\npeer_factors= read.csv(file = geno.dir %&% \"peer_GTEx/X.csv\", header = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manipulating the PEER factor files so we can append to covariate file\nrownames(peer_factors) = gex$IID\ncolnames(peer_factors) = c('PF1', 'PF2', 'PF3', 'PF4', 'PF5', 'PF6', 'PF7')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#initializing matrices to be filled with t-stats, p_vals, and residuals of the regression of each gene vs. the covariates for each tissue. t-stat and p-val matrices are just for diagnostics\n# t_stats = matrix(nrow = 13, ncol = length(colnames(gex)))\n# p_vals = matrix(nrow = 13, ncol = length(colnames(gex)))\nexpression = gex_transpose\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Regressing out the covariates and saving the residuals as the new expression for each tissue\nfor (i in 1:length(colnames(gex_transpose))) {\n    fit = lm(gex_transpose[,i] ~  peer_factors$PF1 + peer_factors$PF2 + peer_factors$PF3 + peer_factors$PF4 + peer_factors$PF5 + peer_factors$PF6 + peer_factors$PF7)\n    expression[,i] <- fit$residuals\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Saving the expression RDS objects to be used as arguments in the script\nsaveRDS(as.matrix(expression), geno.dir %&% TISSUE %&% \"_expression_transformed.RDS\")\n```\n:::\n\n\nFind intersection of genes across all GTEx tissues and Rats\n\n::: {.cell}\n\n```{.r .cell-code}\nfilelist = list.files(geno.dir %&% \"expression\" , pattern = \"expression_transformed.RDS\", full.names = TRUE)\nnames <- data.frame(gene = readRDS(filelist[1]) %>% colnames())\n\nfor(fila in filelist[2:length(filelist)]) {\n  tempo <- data.frame(gene = readRDS(fila) %>% colnames())\n  names <- inner_join(names, tempo, by = \"gene\")\n}\nnames$gene = sapply(strsplit(names$gene, \"\\\\.\"), `[`, 1)\n\n#do the same for all 5 rat tissues \nfilelist = list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/expression/\", pattern = \"expression_transformed.RDS\", full.names = TRUE)\nrat_names <- data.frame(gene = readRDS(filelist[1]) %>% colnames())\n\nfor(fila in filelist[2:length(filelist)]) {\n  tempo <- data.frame(gene = readRDS(fila) %>% colnames())\n  rat_names <- inner_join(rat_names, tempo, by = \"gene\")\n}\n\n#change gene id in rats to human notation\north.rats <- read_tsv(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/expression/ortholog_genes_rats_humans.tsv\")\nrat_names <- rat_names %>% mutate(human_gene = orth.rats[match(rat_names$gene, orth.rats$rnorvegicus_homolog_ensembl_gene), 1]$ensembl_gene_id)\n\noverlap = data.frame(human_gene = intersect(rat_names$human_gene, names$gene)) #12,230 overlap \noverlap <- overlap %>% mutate(rat_gene = orth.rats[match(overlap$human_gene, orth.rats$ensembl_gene_id), 3]$rnorvegicus_homolog_ensembl_gene)\n```\n:::\n\n\nFilter for only overlapped genes in expression files\n\n::: {.cell}\n\n```{.r .cell-code}\nfilelist = list.files(geno.dir %&% \"expression\", pattern = \"expression_transformed.RDS\", full.names = TRUE)\nfor(fila in filelist) {\n  tempo <- readRDS(fila)\n  colnames(tempo) = sapply(strsplit(colnames(tempo), \"\\\\.\"), `[`, 1)\n  tempo <- tempo[, overlap$human_gene]\n  tis = substr(fila, 73, str_length(fila) - 27)\n  saveRDS(tempo, geno.dir %&% txis %&% \"_expression_abrv.RDS\")\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#set snp annotation rownames \nrownames(snp_annot.chr1) = snp_annot.chr1$varID\nrownames(snp_annot.chr2) = snp_annot.chr2$varID\nrownames(snp_annot.chr3) = snp_annot.chr3$varID\nrownames(snp_annot.chr4) = snp_annot.chr4$varID\nrownames(snp_annot.chr5) = snp_annot.chr5$varID\nrownames(snp_annot.chr6) = snp_annot.chr6$varID\nrownames(snp_annot.chr7) = snp_annot.chr7$varID\nrownames(snp_annot.chr8) = snp_annot.chr8$varID\nrownames(snp_annot.chr9) = snp_annot.chr9$varID\nrownames(snp_annot.chr10) = snp_annot.chr10$varID\nrownames(snp_annot.chr11) = snp_annot.chr11$varID\nrownames(snp_annot.chr12) = snp_annot.chr12$varID\nrownames(snp_annot.chr13) = snp_annot.chr13$varID\nrownames(snp_annot.chr14) = snp_annot.chr14$varID\nrownames(snp_annot.chr15) = snp_annot.chr15$varID\nrownames(snp_annot.chr16) = snp_annot.chr16$varID\nrownames(snp_annot.chr17) = snp_annot.chr17$varID\nrownames(snp_annot.chr18) = snp_annot.chr18$varID\nrownames(snp_annot.chr19) = snp_annot.chr19$varID\nrownames(snp_annot.chr20) = snp_annot.chr20$varID\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Saving the SNP annotation RDS objects to be used as arguments in the script - too lazy to write a for loop \nsaveRDS(snp_annot.chr1, geno.dir %&% \"snp_annot/snp_annot.chr1.RDS\")\nsaveRDS(snp_annot.chr2, geno.dir %&% \"snp_annot/snp_annot.chr2.RDS\")\nsaveRDS(snp_annot.chr3, geno.dir %&% \"snp_annot/snp_annot.chr3.RDS\")\nsaveRDS(snp_annot.chr4, geno.dir %&% \"snp_annot/snp_annot.chr4.RDS\")\nsaveRDS(snp_annot.chr5, geno.dir %&% \"snp_annot/snp_annot.chr5.RDS\")\nsaveRDS(snp_annot.chr6, geno.dir %&% \"snp_annot/snp_annot.chr6.RDS\")\nsaveRDS(snp_annot.chr7, geno.dir %&% \"snp_annot/snp_annot.chr7.RDS\")\nsaveRDS(snp_annot.chr8, geno.dir %&% \"snp_annot/snp_annot.chr8.RDS\")\nsaveRDS(snp_annot.chr9, geno.dir %&% \"snp_annot/snp_annot.chr9.RDS\")\nsaveRDS(snp_annot.chr10, geno.dir %&% \"snp_annot/snp_annot.chr10.RDS\")\nsaveRDS(snp_annot.chr11, geno.dir %&% \"snp_annot/snp_annot.chr11.RDS\")\nsaveRDS(snp_annot.chr12, geno.dir %&% \"snp_annot/snp_annot.chr12.RDS\")\nsaveRDS(snp_annot.chr13, geno.dir %&% \"snp_annot/snp_annot.chr13.RDS\")\nsaveRDS(snp_annot.chr14, geno.dir %&% \"snp_annot/snp_annot.chr14.RDS\")\nsaveRDS(snp_annot.chr15, geno.dir %&% \"snp_annot/snp_annot.chr15.RDS\")\nsaveRDS(snp_annot.chr16, geno.dir %&% \"snp_annot/snp_annot.chr16.RDS\")\nsaveRDS(snp_annot.chr17, geno.dir %&% \"snp_annot/snp_annot.chr17.RDS\")\nsaveRDS(snp_annot.chr18, geno.dir %&% \"snp_annot/snp_annot.chr18.RDS\")\nsaveRDS(snp_annot.chr19, geno.dir %&% \"snp_annot/snp_annot.chr19.RDS\")\nsaveRDS(snp_annot.chr20, geno.dir %&% \"snp_annot/snp_annot.chr20.RDS\")\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Creating the meta data file for each tissue \npython /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/rat-genomic-analysis/scripts/create_meta_data.py --geno \"genos/GTEx_genotype.txt\" --expr \"Ovary_expression_transformed.RDS\" --snpset \"1KG\" --rsid_label 1 --window 1000000 --out_prefix \"Results/allMetaData/GTEx_ovary\" \n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Running the model training script for each tissue/chromosome pair\nRscript --vanilla /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/GTEx_TW_CV_elasticNet.R  $chr $alpha \n\n\n\na=0.01\nfor i in {1..20}\ndo\nqsub -v chr=$i,alpha=$a GTEx_single_nested_EN.pbs  \ndone\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Concatenating all of the results files for each tissue\nbash /gpfs/data/im-lab/nas40t2/natasha/rat_genomics/rat-genomic-analysis/scripts/make_all_results.sh  'Whole_Blood' '/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/Results/all_Results_Whole_Blood_0.01' 0.01 '1KG_snps'\n\n```\n:::\n\n\n# Compare number of genes predicted in GTEx to those in Rats\n\nNow we have predictability for all parameters of alpha. We can now iterate through all alphas and create the long data format. We also only select for genes that have an average R2 > 0.3 and subsample 20 genes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilelist <- list.files(\"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/comp_to_GTEx/Results/chr_Results\", pattern = \"working_TW_\", full.names = TRUE)\n\ntempo <- read_tsv(filelist[1]) %>% filter(R2 <= 1) %>% select(c(gene, cor, R2)) %>% distinct(gene, .keep_all = TRUE)\ntempo$cor = as.numeric(tempo$cor)\ntempo$R2 = tempo$R2*sign(tempo$cor)\ncolnames(tempo)[2] = paste(\"cor\", \"0.01\", sep=\"_\")\ncolnames(tempo)[3] = paste(\"R2\", \"0.01\", sep=\"_\")\n\n \nfor (k in 2:(length(filelist))){\n df <- read_tsv(filelist[k], col_names = TRUE) %>% distinct(gene, .keep_all = TRUE)\n alpha <- substr(filelist[k], 135, str_length(filelist[k]) - 8)\n df <- as.data.frame(df) %>% select(c(gene, cor, R2)) %>% filter(R2 <= 1)\n df$cor = as.numeric(df$cor)\n df$R2 = as.numeric(df$R2)*sign(df$cor)\n colnames(df)[2] <- paste(\"cor\", alpha, sep=\"_\")\n colnames(df)[3] <- paste(\"R2\", alpha, sep=\"_\")\n tempo <- inner_join(tempo, df, by = c(\"gene\"))\n}\n\n\n\n#tempo <- read_tsv(\"/Users/natashasanthanam/Downloads/GTEx_Whole_Blood_sparsity_all_parameters.txt\", col_names = TRUE)\ntempo_cor_df <- tempo %>% select(c(gene, starts_with(\"cor\"))) %>% select(-c(cor_0.01))\ntempo_R2_df <- tempo %>% select(c(gene, starts_with(\"R\"))) %>% select(-c(R_0.01))\n\n\ntempo_R2_df <- tempo_R2_df[sample(nrow(tempo_R2_df), 20), ]\ntempo_cor_df <- tempo_cor_df[sample(nrow(tempo_cor_df), 20), ]\n```\n:::\n\n\n\n\n# Plot Sparsity for GTEx\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_long <- tempo_R2_df  %>%  pivot_longer(!gene, names_to = \"value\", values_to = \"count\") \ndata_long$value = as.numeric(substr(data_long$value, 4, str_length(data_long$value)))\n\np1 <-  ggplot(data_long, aes(x = as.numeric(value), y = count)) + geom_smooth(method = \"loess\", span = 2, show_guide = FALSE, se=T, size = .5, col = \"maroon1\")  +  xlab(expression(paste(\"Elastic net mixing parameter (\",alpha, \")\"))) + ylab(expression(paste(\"10-fold cross-validated R2\")))\n\np1\n\ncor_long <- tempo_cor_df  %>%  pivot_longer(!gene, names_to = \"value\", values_to = \"count\") \ncor_long$value = as.numeric(substr(cor_long$value, 5, str_length(cor_long$value)))\n\np2 <-  ggplot(cor_long, aes(x = as.numeric(value), y = count)) + geom_smooth(show_guide = FALSE, se=T, size = .5, col = \"maroon1\")  +  xlab(expression(paste(\"Elastic net mixing parameter (\",alpha, \")\"))) + ylab(expression(paste(\"10-fold cross-validated cor\")))\n```\n:::\n\n\n\n\nCreate Number of Genes for Rat Tissues\n\n::: {.cell}\n\n```{.r .cell-code}\nrat.dir <- \"/gpfs/data/im-lab/nas40t2/natasha/rat_genomics/Tyson_Results/\"\nfilelist <- list.files(rat.dir, pattern = \"all_results\", full.names=TRUE)\nrat_n_genes <- data.frame(tis= as.character(), n.genes = numeric(), species = as.character())\n\nfor(fila in filelist) {\n  i = match(fila, filelist)\n  tempo <- read_tsv(fila, col_names = TRUE)\n  tempo <- tempo %>% filter(R2 >= 0)\n  rat_n_genes[i,2] <- n_distinct(tempo$gene) \n  rat_n_genes[i,1] <- substr(fila, 75, 76)\n  rat_n_genes[i,3] <- \"Rat\"\n}\n\nrat_n_genes <- rat_n_genes %>% mutate(n.samples = c(78, 83, 83, 81, 82)) \ntotal_genes <- rbind(GWAS_n_genes, rat_n_genes)\n```\n:::\n\n\nCreate Plot Comparing Tissues\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_genes <- read_tsv(\"/Users/natashasanthanam/Github/rat-genomic-analysis/data/n_genes_comparison_GTEx_subset_genes.txt\", col_names = TRUE)\n  \nggplot(total_genes, aes(n.samples, n.genes)) + geom_point() +geom_smooth(data=subset(total_genes,species==\"Human\"),\naes(n.samples, n.genes), method=lm) + geom_label_repel( label = total_genes$tis, box.padding   = 0.35, point.padding = 0.5) +  xlab(\"Number of Individuals\") + ylab(\"Number of Genes Predicted\")  + theme(legend.position = \"None\") + theme_bw()\n\nggsave(\"/Users/natashasanthanam/Downloads/GTEx_rats_n_genes.pdf\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}